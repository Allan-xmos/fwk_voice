// This file is generated. Do not edit.
// Generated on: 11.08.2023 15:33:15


#include "lib_tflite_micro/api/xcore_config.h"
#include "lib_nn/api/version.h"
#include "lib_tflite_micro/api/version.h"
#include "tensorflow/lite/c/builtin_op_data.h"
#include "tensorflow/lite/c/common.h"
#include "tensorflow/lite/micro/kernels/conv.h"
#include "tensorflow/lite/micro/kernels/fully_connected.h"
#include "tensorflow/lite/micro/kernels/micro_ops.h"
#include "tensorflow/lite/micro/kernels/reduce.h"
#include "tensorflow/lite/micro/kernels/softmax.h"
#include "tensorflow/lite/micro/micro_context.h"

// #define TFLMC_XCORE_PROFILE
// #define TFLMC_PRINT_TENSORS
// #define TFLMC_PRINT_INPUT_TENSORS

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

// Check lib_nn and lib_tflite_micro versions
// NOTE: xformer version is saved for debugging purposes
// If lib_nn and lib_tflite_micro versions are as expected,
// then the xformer version doesn't matter as the model should execute
// If major version is zero, then minor versions must match
// Otherwise, major versions must match and binary minor version
// must be less or equal to runtime minor version
// Check if runtime lib_tflite_micro version matches with compiled version
static_assert((0 == 0 && lib_tflite_micro::major_version == 0 && 5 == lib_tflite_micro::minor_version) ||
              (0 == lib_tflite_micro::major_version) ||
              (5  < lib_tflite_micro::minor_version),
             "Model has been compiled with lib_tflite_micro version incompatible with runtime lib_tflite_micro version!");

// Check if runtime lib_nn version matches with compiled version
static_assert((0 == 0 && lib_nn::major_version == 0 && 2 == lib_nn::minor_version) ||
              (0 == lib_nn::major_version) ||
              (2  < lib_nn::minor_version),
             "Model has been compiled with lib_nn version incompatible with runtime lib_nn version!");

namespace tflite {
namespace ops {
namespace micro {
namespace xcore {
extern TfLiteRegistration_V1 *Register_XC_conv2d_v2(void);
extern TfLiteRegistration_V1 *Register_XC_mul(void);
extern TfLiteRegistration_V1 *Register_XC_add(void);
extern TfLiteRegistration_V1 *Register_XC_strided_slice(void);
extern TfLiteRegistration_V1 *Register_XC_lookup(void);
} // namespace xcore
}  // namespace micro
}  // namespace ops
}  // namespace tflite



constexpr int kTensorArenaSize = 1504;
#ifndef SHARED_TENSOR_ARENA
namespace {
uint8_t tensor_arena[kTensorArenaSize] ALIGN(8);
}
#else
extern uint8_t tensor_arena[];
#endif

namespace {
template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_XC_conv2d_v2, OP_XC_mul, OP_XC_add, OP_XC_strided_slice, OP_RESHAPE, OP_XC_lookup,  OP_LAST
};

#if defined(TFLMC_XCORE_PROFILE) || defined(TFLMC_PRINT_TENSORS) || defined(TFLMC_PRINT_INPUT_TENSORS)
const char *op_strs[] = {
"OP_XC_conv2d_v2", "OP_XC_mul", "OP_XC_add", "OP_XC_strided_slice", "OP_RESHAPE", "OP_XC_lookup", };

unsigned char checksum(char *data, unsigned int length)
{
  static char sum;
  static char * end;
  sum = 0;
  end = data + length;

  do
  {
      sum -= *data++;
  } while (data != end);
  return sum;
}

#endif

#ifdef TFLMC_XCORE_PROFILE
int op_times[OP_LAST];
int op_counts[OP_LAST];
int64_t op_times_summed;
int time_t0, time_t1;
#endif

TfLiteContext ctx{};

TfLiteRegistration_V1 registrations[OP_LAST];

struct {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,1,4,24 } };
const TfArray<1, float> quant0_scale = { 1, { 0.12506082653999329, } };
const TfArray<1, int> quant0_zero = { 1, { 127 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int8_t tensor_data1[256] = { 
    -127, -126, -126, -126, -126, -125, -125, -125, -124, -124, 
    -123, -123, -122, -121, -120, -119, -118, -117, -115, -114, 
    -112, -110, -107, -105, -102, -99, -95, -92, -87, -83, 
    -78, -72, -67, -60, -54, -47, -40, -32, -24, -16, 
    -8, 0, 8, 16, 24, 32, 40, 47, 54, 60, 
    67, 72, 78, 83, 87, 92, 95, 99, 102, 105, 
    107, 110, 112, 114, 115, 117, 118, 119, 120, 121, 
    122, 123, 123, 124, 124, 125, 125, 125, 126, 126, 
    126, 126, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -127, 
    -127, -127, -127, -127, -127, -127, 
};
const TfArray<1, int> tensor_dimension1 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data2[1664] = { 
    -1, -34, -123, -36, 22, 64, -40, -112, -127, -84, 
    21, 62, 66, -20, 13, 57, -15, -41, 28, -42, 
    32, 38, -102, -23, 5, -8, 7, 10, -8, 21, 
    -6, 9, -6, -28, -50, -29, 3, -127, 36, 41, 
    28, 97, 27, 15, 6, -25, 58, -75, -3, -1, 
    24, 13, 22, -1, -41, -12, 0, -37, -14, 7, 
    -10, -41, 5, -15, -5, 69, -9, 100, 104, 37, 
    -91, -127, 14, -75, -15, 4, 9, -25, -33, -68, 
    -39, 8, 1, 87, -40, 72, -6, 73, 127, -42, 
    8, 13, 20, 22, -6, 34, 0, 16, -11, 121, 
    -38, -43, -6, -30, -127, -99, 121, -2, 16, 105, 
    103, 5, 10, 61, -47, 92, -74, -88, -118, 13, 
    3, 0, -10, -4, 31, -9, -5, -4, 1, 15, 
    16, 8, -11, 52, -69, -127, 72, 45, 23, -97, 
    -11, 120, -14, -8, -79, 113, 102, 88, 73, 92, 
    -9, 59, -20, 120, -68, 68, 17, -43, 4, 32, 
    -34, 122, 64, 9, 127, 75, 122, 4, 2, -1, 
    1, -2, 3, -2, -1, -1, 0, 1, -1, 3, 
    1, 0, -2, 4, -3, 1, -6, 31, -16, -127, 
    12, 103, -3, 24, -50, -76, 60, 127, 8, -32, 
    -32, 28, -9, 9, 32, -35, -20, 21, 12, -19, 
    -18, 22, 4, -20, -17, 10, 0, -5, -1, -5, 
    10, -7, 0, 5, -4, 2, -2, 2, -1, -9, 
    9, -1, 0, 1, 4, 20, -58, 16, 127, -107, 
    4, -3, 2, -2, 18, 5, 4, -14, -17, -38, 
    -8, 35, 31, 18, -1, 90, -127, -73, 109, -48, 
    -28, 64, -35, 17, -3, 1, 4, 9, -8, 7, 
    4, -1, -4, -18, 11, 4, 10, -15, -5, 21, 
    -29, -49, -18, -16, -15, 127, -13, -11, 7, -16, 
    -14, -3, -50, -31, 127, 7, -23, 63, 64, -100, 
    -3, 111, -57, -2, -60, 12, -10, 29, -60, 14, 
    36, 29, 11, 7, 21, 67, -26, 44, -5, -29, 
    -68, 52, -120, 31, -78, -72, -82, 37, 102, 40, 
    80, 56, 47, 93, 20, 127, -5, 6, 38, 4, 
    -5, 52, -36, 13, -16, 16, -14, -14, 11, -40, 
    -36, -59, -55, -19, -12, 27, -15, 0, 45, 127, 
    1, 14, -3, 1, -5, 7, -11, 11, 11, 3, 
    -26, -20, 27, -8, -16, 79, 13, -127, 45, 20, 
    -19, -26, 11, 13, 27, -57, -26, -67, -58, 65, 
    -82, -127, 58, 55, -104, 13, 66, -96, 100, -67, 
    9, 42, 10, -36, 27, -9, 33, 40, 11, -35, 
    -3, 34, -2, -45, 93, 20, 27, 44, 15, -127, 
    7, 1, -55, -11, -37, 88, -4, -23, 22, 81, 
    -80, -88, 2, 14, 3, 18, -20, -8, 28, 1, 
    -7, -51, -16, -49, 8, 22, 2, 86, 127, 47, 
    -125, -117, -34, 59, 19, 0, 0, 11, 26, -45, 
    127, -55, 18, -20, -13, -43, -23, 12, 29, -10, 
    8, 6, -5, -15, 17, -14, 23, -18, 12, 11, 
    7, 42, -43, -18, 16, 54, -27, 51, 72, 28, 
    -5, 49, 49, -14, 45, 17, -16, -9, 32, -125, 
    -127, 31, 12, 4, 104, 89, 51, 110, 24, 14, 
    -29, -63, 101, 114, 54, 52, -51, -39, -32, 109, 
    100, 75, 35, -52, 49, -17, -57, 127, 3, -4, 
    -25, -10, 3, -21, -14, 15, 0, 19, 68, -22, 
    -127, 22, 51, -41, 46, -26, -17, -4, 16, 3, 
    0, -6, 34, 55, 123, -20, -74, 85, -56, -92, 
    94, 71, -50, 81, 90, 90, 116, -30, 127, -6, 
    33, -16, -88, 127, -22, 86, 6, -4, -2, -1, 
    27, 7, 15, -26, -4, 16, 5, 9, 19, 2, 
    -12, -87, -52, -37, 75, 127, 30, -66, -60, 32, 
    0, 2, 3, -13, 16, -34, -16, 10, 43, 83, 
    -18, -127, -32, 42, 6, 5, 7, -15, 14, -23, 
    21, -18, 25, 5, 2, 5, -5, 2, 7, -10, 
    4, 11, 1, -6, 0, 31, -37, -115, 127, 28, 
    -90, 58, -21, -14, 15, 11, -12, 3, 43, -127, 
    51, 115, 17, 42, 42, 3, -14, -28, -20, 3, 
    32, -7, 11, -5, 0, -22, -8, -15, 3, -12, 
    27, -9, 17, 16, -6, -33, -12, 13, -16, 25, 
    -7, 19, 67, 69, 79, 49, -33, -101, -34, -59, 
    -127, 40, 32, -32, 68, -82, 9, 115, 109, 93, 
    51, 20, -121, -5, 1, -52, -10, 37, -14, -25, 
    49, -28, -14, 11, 29, -126, 47, 31, 45, -127, 
    13, -3, -118, 127, 82, -64, 18, 36, -32, 37, 
    11, -9, -93, -28, 68, -15, 10, 3, -5, 3, 
    -40, 26, 20, -6, 86, 84, 65, -35, 95, -26, 
    -79, 124, 35, 94, 102, 37, 127, -76, -11, 15, 
    -17, -13, -27, -10, 71, 37, -90, 114, 6, -8, 
    64, 84, 61, -127, -125, -46, -8, 36, 8, 18, 
    -9, -4, 12, -9, 21, -22, -10, 12, 11, -3, 
    24, 3, -34, 110, 25, 4, 3, 65, -18, 117, 
    29, 25, 48, -58, -54, 43, 19, -11, 97, 28, 
    127, 101, 117, 33, 50, -35, 5, -12, 5, -1, 
    33, 8, -9, -45, -78, 50, 127, 9, -76, -13, 
    -1, 3, -16, 12, 3, -5, 13, -18, 10, -1, 
    3, 0, 0, -7, 13, -5, -2, 9, -6, 9, 
    1, 1, -3, 0, -9, -11, 61, -2, -127, 49, 
    31, -17, 34, -13, -17, -50, -57, 16, -41, -127, 
    -88, 63, -4, -38, -21, 6, 5, 46, 57, -16, 
    -22, 1, 16, -16, 24, -9, 11, 0, -5, -16, 
    -5, -61, 18, -20, 31, 54, 21, 6, 27, 21, 
    33, -103, 79, 78, -67, -34, 75, -127, 49, -47, 
    -42, 36, 84, 110, -67, 61, -101, 11, 43, 30, 
    12, -100, 80, -13, 98, 49, -53, -49, 93, 114, 
    50, 127, 109, 47, 47, 87, -5, -4, -11, 52, 
    -5, -91, 127, -67, 26, 9, -64, 88, -32, 38, 
    24, -64, 57, -49, 9, 7, 12, -13, -11, 0, 
    -18, -43, 114, -127, -30, 37, -5, 11, 83, 12, 
    15, 34, 6, -24, 28, -10, -10, -14, -18, -22, 
    110, -62, -21, -53, 82, -93, 32, 61, -50, 6, 
    49, 0, 116, 29, 26, 127, -81, 42, 102, -2, 
    21, 100, 96, 49, -48, 94, -117, 78, -55, 94, 
    69, 111, 93, -29, 112, 127, -7, 6, -14, 96, 
    99, 59, -83, 53, -10, -38, 37, 83, -54, -61, 
    108, 77, -5, 10, 10, 14, -21, 24, -33, 52, 
    -78, 127, -114, 64, -12, -8, 9, -12, -8, 10, 
    -6, 3, -4, 8, -3, 7, -3, 7, 6, 6, 
    -10, 8, -5, 1, 28, -59, 111, -127, 93, -49, 
    33, -35, 20, -17, 12, 5, -8, 5, -2, 6, 
    25, 127, 102, 101, 120, 72, 46, 28, 55, 79, 
    31, 10, -49, -7, -34, -48, 34, 1, -31, 17, 
    -37, 22, -19, 21, 1, -3, 8, -11, -2, -8, 
    -4, 0, 11, 14, 37, 32, -7, -127, -75, 101, 
    23, -30, 36, -33, 8, 30, -4, 0, 14, -24, 
    -16, -22, 92, 23, -78, 67, 127, -52, -74, 57, 
    -72, 12, 9, -56, 28, 10, 10, -9, 2, -6, 
    5, 2, -50, 41, 23, -43, 95, 100, 108, 38, 
    81, -10, 78, 59, 127, -49, 20, 106, 83, 8, 
    -32, -39, -13, 85, 93, 7, 15, 2, 2, 7, 
    87, -97, -64, 127, -27, -25, 16, 2, 54, -12, 
    7, -8, -17, 37, -43, 9, 9, -29, 3, 17, 
    18, 52, -127, 103, -51, 33, 4, 10, 5, -16, 
    -9, 19, 10, -8, -25, 29, -5, -35, 31, -14, 
    20, 5, -5, 10, 127, 55, 41, -31, 22, 102, 
    -82, -41, 63, 105, 125, -90, -58, 33, 32, 66, 
    35, -28, -1, 66, 4, 16, 38, 93, 3, -37, 
    -35, 72, 38, -59, -49, -10, 35, 65, 9, 0, 
    55, 38, -127, 11, 56, -18, 7, -45, 29, -47, 
    -10, 10, -6, 51, 73, 3, 7, 26, 45, 23, 
    14, 7, -50, -127, -64, 64, 35, 7, -48, -20, 
    29, -1, -70, 4, -46, 55, 6, -5, -26, 8, 
    20, -27, 35, 79, 4, -82, -127, -83, 92, 33, 
    -3, 57, -9, -29, 19, -52, 41, -2, 13, -5, 
    -4, 11, 5, -42, -31, 6, 95, 54, -64, -127, 
    33, 102, -19, -64, 21, 1, 13, -5, -4, 0, 
    -6, -1, 2, 8, 3, 0, 5, -5, 7, 3, 
    3, -7, -17, -4, 10, 3, -16, 35, 101, -127, 
    -80, 104, -21, -9, 16, -13, 7, 1, -4, 25, 
    26, -6, 33, 2, 5, 19, 1, 27, -17, 35, 
    0, -127, -30, 26, 1, -35, -11, -22, 22, -12, 
    -11, 37, 127, -96, -44, 39, -16, 6, 13, -2, 
    -9, 2, 6, -11, 6, 8, -13, 1, 4, -3, 
    6, 3, -13, 9, -6, 4, -10, 42, 23, 22, 
    9, 22, 12, -5, -19, -12, 19, 4, 6, -2, 
    4, 2, 11, 10, -14, 28, -110, -127, 4, 75, 
    7, 16, -4, 23, -23, -9, 12, 13, 29, -1, 
    6, -21, -25, -61, -45, -15, 69, 98, 38, 72, 
    -70, -127, -2, 37, 2, 3, 16, 2, -17, 24, 
    -2, -59, 89, -54, 3, 73, -117, 127, -119, 82, 
    -52, 46, -33, 28, -5, -19, 17, 8, -17, -47, 
    102, 28, 41, 127, -38, 76, 2, -5, -11, -46, 
    81, 98, 23, 8, 11, 58, 89, 17, 27, 47, 
    -32, 124, -20, -127, -94, -100, 14, -74, -41, 17, 
    -41, -105, -31, -18, 61, -73, 13, 113, -66, -16, 
    59, -24, -3, -21, 53, 13, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 
};
const TfArray<1, int> tensor_dimension2 = { 1, { 1664 } };
const ALIGN(8) int16_t tensor_data3[128] = { 
    12998, 11165, 2577, 7330, 10827, 8386, 10191, 14315, 11346, 5705, 
    8850, 6444, 4530, 8061, 8028, 3432, -2103, -2294, -2678, -2324, 
    -2146, -2119, -2035, -2518, -2048, -7796, -2183, -2136, -2374, -2073, 
    -2250, -1124, 5420, 12044, 5570, 6612, 12850, 10196, 13480, 8728, 
    5606, 12727, 4781, 8661, 16441, 8866, 5886, 8407, -5739, -2524, 
    -3006, -2064, -3449, -2053, -1990, -2300, -6175, -1438, -6070, -3111, 
    -2644, -2167, -1988, -605, 10549, 10798, 3300, 10084, 11547, 5841, 
    4827, 9368, 10917, 4884, 3951, 8732, 14637, 12671, 5984, 10238, 
    -2540, -2082, -3834, -2223, -2320, -7000, -5412, -2119, -2366, -6162, 
    -2208, -183, -2181, -2195, -6876, -2159, 4493, 5137, 8882, 9447, 
    7017, 20914, 8522, 10248, 10814, 7699, 6799, 10221, 5632, 14203, 
    10448, 5412, -176, -5855, -2275, -2275, -2349, -2460, -2241, -2137, 
    -2012, -1941, -2446, -2138, -5830, -2550, -2548, -6859, 
};
const TfArray<1, int> tensor_dimension3 = { 1, { 128 } };
const ALIGN(8) int8_t tensor_data4[2048] = { 
    -4, -2, 0, 4, 0, -1, -6, 3, -2, -2, 
    2, -1, -6, 2, -127, -2, 9, -1, -3, 16, 
    -8, 8, -1, 7, 20, 12, 2, -9, -1, 4, 
    -9, -5, 12, 8, 34, -6, 16, 8, 7, -22, 
    -12, -39, -3, -5, -9, 21, 23, 14, 22, 60, 
    -31, -36, 24, 13, 1, -16, -26, 45, -19, 62, 
    26, -18, -36, -15, -10, 13, -127, 4, 0, -17, 
    11, 3, 10, 11, -2, -22, -79, -3, -10, 43, 
    26, -10, -16, 24, -44, -18, 13, 10, -2, 27, 
    4, 4, 2, -41, 13, 26, -6, -32, -89, 27, 
    4, -5, -8, 24, -3, -60, -2, -2, -4, -9, 
    1, -70, -50, 8, -32, 19, 11, 3, 8, -3, 
    -10, 16, -3, 55, -27, -12, 8, -96, -1, 14, 
    -53, 17, -16, -27, -92, 28, -127, 79, -51, -4, 
    18, 61, -21, 7, 54, 23, 11, 24, 37, -16, 
    -7, -20, 69, 21, 47, 10, -5, -102, 16, 49, 
    -41, -17, -66, -16, -10, -37, -37, -127, -30, -77, 
    -48, 33, -76, -19, -21, -47, -68, -32, -21, 2, 
    -17, -1, 3, -70, -41, -50, -122, -59, 21, -18, 
    -3, -57, 15, -2, 17, -8, -31, -10, -34, -27, 
    -127, 20, -75, 23, -5, 9, -17, 12, -12, 4, 
    16, 34, 8, 22, -11, -19, 24, 12, -7, 27, 
    -33, 3, 24, -11, -40, 11, -22, 21, 14, -43, 
    -127, 30, -86, 55, -56, 26, -22, 15, 7, 31, 
    42, -15, 12, -47, -2, -38, -41, 7, 21, -5, 
    46, -69, -15, 19, 29, -50, 14, 17, -10, -4, 
    1, 5, 3, 15, 11, 22, 37, 11, 22, 13, 
    -1, 63, 45, -30, -14, 25, 44, 16, -126, 11, 
    34, -127, 5, 12, 47, -18, -52, -20, -90, -8, 
    52, -52, -30, 17, 19, 7, 0, -4, 25, 13, 
    69, -16, -13, 15, 38, 8, 65, -3, -26, 39, 
    20, 79, -11, 33, 37, 47, -70, -9, -15, 13, 
    2, 4, -2, -127, -27, -5, -9, 8, -4, 9, 
    -14, -4, -2, -8, -6, 2, 0, -11, 9, -8, 
    0, 2, -6, -27, 10, -1, -8, 2, 11, 3, 
    -12, 1, 26, 14, -10, -39, 37, 10, -1, -20, 
    12, 24, -44, 29, 33, 21, -8, 10, -9, -84, 
    24, 7, 39, -43, -82, -26, 57, -100, 4, -13, 
    83, 50, -51, 4, 55, 18, 53, 15, -3, 43, 
    -9, 47, 5, -1, -4, 17, -19, 77, -15, -41, 
    16, 77, 13, -5, 2, 71, 27, -13, -55, 33, 
    -32, 24, 5, 71, 19, -32, 3, -18, 21, 17, 
    -127, 11, -12, 29, 6, -19, 21, -27, 21, -89, 
    -64, -13, 20, 12, -39, -58, 6, 9, 19, 5, 
    13, 5, 21, -30, 20, -10, -52, 20, -11, -8, 
    4, 9, 0, -50, 2, -6, 2, 17, 16, -127, 
    -12, -4, 4, -75, 11, 9, -25, -20, 60, 8, 
    17, 17, 48, 3, 68, -3, 11, 25, 70, -46, 
    29, -61, 13, 21, 17, 63, -35, -54, -30, 58, 
    18, 76, 60, 10, -44, 28, 30, -34, -75, 43, 
    -127, -24, 71, -20, 84, 32, 87, -1, -48, 18, 
    18, -40, -11, 1, 3, -3, 0, 0, -7, 5, 
    -2, 1, 12, 1, -9, 3, -5, 4, -1, -18, 
    1, 0, -1, -2, 9, 4, -2, -105, -15, 21, 
    1, -3, -1, 9, -27, 20, -23, -8, -4, 7, 
    30, 54, -46, 4, 54, -34, -11, 5, 8, 6, 
    14, -29, -16, 13, 5, -78, 11, -14, 24, 12, 
    13, -127, -15, 34, -53, -38, 2, -3, -3, -16, 
    -30, 1, 22, 15, 2, -22, -14, 12, -5, 8, 
    9, -24, 27, 0, -3, 4, -6, 13, -12, -18, 
    7, 6, -7, 3, -11, -19, 74, 4, 23, 15, 
    80, 14, 4, -11, -50, 48, 6, -10, 17, -100, 
    3, 12, -49, -4, -127, 1, 2, 12, -9, 4, 
    -3, -11, 8, -4, -34, 23, 16, 9, 12, -30, 
    17, -46, 14, -25, 1, -1, 58, 31, 26, 33, 
    17, 5, -5, 17, 74, 32, 6, -52, 14, -117, 
    25, -52, 40, -4, 25, -7, 36, 36, -49, 2, 
    12, 39, -23, -36, 15, 32, 60, -10, -107, -14, 
    51, -92, -57, -52, -59, -8, -74, -14, -76, 56, 
    38, -8, -14, 96, -40, -44, 6, 12, 7, 8, 
    62, 28, 5, -115, -3, -23, 1, 1, -19, 2, 
    32, 26, 13, 1, 14, 6, -60, -32, 11, -17, 
    -5, -18, -24, -9, 14, -1, 6, 9, -35, 8, 
    -6, 18, -19, -22, -11, 7, 20, -1, -9, 8, 
    -4, 2, 59, -11, 10, 60, -72, -23, -64, 9, 
    14, 1, -44, -24, -7, 31, 28, 15, -30, -19, 
    27, -3, 8, -8, -16, -8, -15, 41, -45, 30, 
    -18, -11, -11, 3, 14, 14, 14, 29, -6, -40, 
    -14, 17, 42, 17, -8, -6, 4, -5, 8, -21, 
    15, 25, 27, -10, -105, 31, -30, 19, 17, -14, 
    12, -28, 34, 14, -24, 8, -14, -127, -16, -15, 
    -43, 15, -21, 26, 62, 29, -40, -20, 16, -12, 
    12, 53, -23, 51, -10, 13, 4, 23, -28, -82, 
    7, 25, 22, -2, -5, 8, 3, 2, 7, 0, 
    -8, 9, -11, 1, -7, -6, 1, 0, 0, 3, 
    2, -5, 2, 2, 0, 6, -9, -2, -5, -7, 
    -1, 6, -3, 2, -127, -70, -54, -39, 5, 6, 
    72, 34, 57, -25, 9, 30, -5, -80, 3, -7, 
    1, 21, 1, 2, 0, -58, -12, 17, 20, 9, 
    52, -82, -40, 55, 31, 5, 32, 11, 44, 3, 
    9, -2, 26, 5, 8, -40, -38, -38, -5, 63, 
    -16, 42, -60, 68, -4, 127, 10, 27, 11, 33, 
    56, 19, 16, 0, 43, 20, -4, -14, 30, 0, 
    8, 7, -6, 1, -24, -26, -7, 11, 13, 3, 
    7, 3, 28, -4, -6, -16, 5, -21, -50, 1, 
    -28, 28, -22, 1, -51, -4, -24, 10, 2, -16, 
    52, 31, 19, -18, 9, 7, 68, 38, -45, 59, 
    -5, -101, 12, -13, 28, 15, -16, -19, -13, -5, 
    -6, 21, 30, -13, -13, 9, 32, 18, -41, -43, 
    5, 27, 71, 87, -46, -30, -2, 3, 26, 33, 
    -14, 37, 13, -12, 14, 85, 97, -2, -16, -93, 
    31, -17, -6, -24, -75, 27, 18, 44, -50, 51, 
    -107, -11, -8, 93, -53, 36, 61, 21, -16, -112, 
    7, 34, 9, 6, -49, 5, 55, 39, -34, 1, 
    80, -16, 63, -21, 23, -93, -127, -11, 50, -81, 
    50, 47, -26, -1, -4, 1, 17, 23, 34, -23, 
    2, -37, -8, -124, 18, 38, -16, -44, 14, -10, 
    0, -15, 42, -114, 39, 10, -53, -13, -22, -28, 
    39, -1, 41, -80, -44, -33, 14, -6, -5, -23, 
    -37, -25, -14, -20, 8, 1, 10, -10, -17, 56, 
    17, -15, 2, 12, -32, 3, 42, -10, 9, -4, 
    16, -20, 12, -19, -17, -3, 6, 29, -20, -6, 
    31, -64, -29, 11, -15, 30, 6, 13, 3, 39, 
    15, 13, 33, 13, -4, 15, 27, -2, -53, 35, 
    -2, 11, 25, 8, 41, 10, 45, 10, -30, -4, 
    -5, -44, 7, -99, -11, -11, -127, -16, -37, 3, 
    -20, -6, -6, -9, -13, -3, -52, 2, 15, 3, 
    3, -14, 3, -3, 6, -1, 0, -3, -9, -27, 
    -2, -31, 2, -4, -32, -14, -3, 11, -17, -10, 
    3, 30, -4, 57, 39, 1, -74, -16, -9, 0, 
    59, -29, -7, 22, -70, 28, -5, 17, 60, 20, 
    67, 15, -30, 42, 38, -65, -74, 18, 15, 40, 
    -17, -71, 53, -26, 23, -1, -1, 16, -1, -63, 
    -18, -36, 13, 127, -50, -77, 92, 23, 7, -23, 
    -11, 26, -19, -99, 47, -30, -1, -40, 10, -8, 
    -35, -27, 16, 7, 23, -23, 12, -49, 11, -4, 
    44, 31, -12, 69, -6, 8, -14, 4, -46, 18, 
    22, 4, -82, 43, -11, -127, -7, -13, -8, 64, 
    37, -13, -1, 3, 34, 34, 21, -33, -2, 25, 
    52, 6, 21, 24, 17, -5, -2, 17, -52, -26, 
    -17, 28, -40, 58, 29, -10, 28, 19, -24, 51, 
    2, -4, 4, 12, 21, -9, 8, 6, 5, -4, 
    4, -10, 6, -4, -4, 0, 4, -70, 22, -12, 
    21, -7, 5, -6, 9, 4, -6, -33, 25, 5, 
    22, -7, -13, -33, -98, -21, 8, -1, -20, -35, 
    -42, -41, -48, 35, -15, -66, 21, -21, -93, -10, 
    33, -35, -106, 31, -30, -70, -11, -40, 10, -13, 
    -23, -10, -14, -113, -63, -1, 19, -33, -11, -16, 
    -97, 34, -8, -127, 38, 72, 54, 29, 41, -14, 
    -8, -13, 97, -16, -42, 8, -25, 68, 31, 22, 
    56, 40, 83, -27, -71, 0, -90, 14, -127, -47, 
    -101, -10, 31, -60, -63, 23, -80, -9, 21, 48, 
    -18, 38, -12, 36, 31, 48, -24, -72, 64, -107, 
    -56, 24, -3, -8, 39, 8, -15, 42, 19, -32, 
    16, -14, -47, 6, -9, 13, 16, 35, -3, 41, 
    -6, -3, -19, -3, -4, 32, 70, 16, 17, 15, 
    9, 29, 4, -11, 25, 8, 14, 7, 12, -8, 
    20, 55, -1, 0, 3, -2, 1, 2, 0, 0, 
    -1, 16, 2, -2, -12, 1, -3, 2, 6, 3, 
    10, -2, 5, 3, 6, 2, 1, 0, 6, -25, 
    6, -1, 4, 2, -15, 11, 16, 6, 0, -8, 
    -2, -9, 2, 16, -2, -3, 5, 6, 3, -1, 
    8, -1, -20, -24, -14, -3, 5, -2, 18, -2, 
    23, -15, 2, 3, -10, 2, -4, -100, 28, -7, 
    -20, 4, 4, 54, -10, 39, 6, 2, -61, -81, 
    4, 26, 9, -46, -8, 2, 12, -11, 18, -78, 
    -72, -95, 27, 3, -39, 7, -5, -8, -127, -8, 
    -19, -11, -12, 12, 25, -87, -59, 41, -11, -32, 
    -27, -51, 65, -38, -18, 13, 7, -6, 0, 39, 
    38, -18, -54, -12, 36, -107, -23, -47, -71, 69, 
    -9, -23, 4, -4, -13, 2, -19, -23, 1, 2, 
    -127, 3, -1, 8, 15, 9, -2, 11, -1, 4, 
    6, 3, -2, -9, -8, 12, -6, 13, 15, -7, 
    25, -19, -10, -106, 0, -8, -16, 0, 13, 4, 
    16, 35, -3, -36, 39, 8, 22, -6, -22, -31, 
    3, 10, 13, 1, -127, 25, 3, 18, -34, -6, 
    -10, -25, -5, 42, 17, -3, -11, -3, 0, 0, 
    2, -19, -5, 22, -15, 2, -1, -2, 18, 1, 
    -3, 4, -6, -10, 9, -14, 0, 3, 5, 4, 
    15, 1, -10, 1, 2, 2, 2, -1, 4, 8, 
    5, 3, 17, 11, -5, 15, -10, -3, 11, -14, 
    37, 19, -22, -39, -9, 17, 24, -127, 38, 10, 
    -8, 8, 12, 32, -12, 115, -10, 31, -40, -58, 
    -87, 4, 50, 16, 73, -44, 54, 69, 15, 40, 
    -17, 28, 66, 78, 19, 5, -13, -66, -42, 11, 
    -16, -34, 86, 18, -37, 35, -61, 18, 51, -8, 
    -24, 8, -65, -24, -29, -11, -25, -11, -14, 12, 
    -51, 90, 3, 29, -65, 25, 95, 28, -32, 52, 
    -6, -26, 9, 4, 16, 10, 2, -8, 46, 2, 
    -52, -56, -27, 17, 11, -23, -27, 3, 46, -3, 
    -18, 32, 12, -6, 34, -127, 31, -26, 6, -14, 
    0, 19, -6, 6, -43, 13, -78, -3, -46, 4, 
    -43, -12, 11, 18, -16, -2, 80, 3, 5, 5, 
    -17, -8, 9, 1, 2, -127, 7, 0, 14, -19, 
    -122, 21, 5, 0, 5, 0, 8, -7, -7, -16, 
    21, -16, -20, 6, 5, 0, -49, -36, 11, -19, 
    -1, -2, 63, 16, -20, 6, -13, 4, -14, -37, 
    32, -6, 4, -58, -2, -125, -127, 22, -93, -71, 
    -34, -24, -120, -13, 2, 3, 13, 37, -33, 1, 
    -21, 28, -8, 1, 78, -3, 97, 110, -10, -1, 
    60, 9, 83, -29, -28, -40, 14, 34, 8, -6, 
    7, 75, 47, 15, 45, -10, -16, -29, -44, 36, 
    49, -63, -27, -17, 12, 4, 44, 6, -17, 26, 
    29, 21, -10, -1, -24, -15, 5, -24, -24, 69, 
    12, -11, -94, 9, 1, -39, -35, 44, 48, -18, 
    -24, -11, 21, 7, -40, 127, 106, 0, 54, 0, 
    27, 67, 2, -6, -2, 21, 66, -4, 9, -64, 
    103, -8, 8, 19, 18, 5, 36, 8, 3, 12, 
    -12, 1, 49, 28, 0, 6, 0, 1, 0, 0, 
    26, 8, 0, 9, -7, 4, 5, 4, 4, -127, 
    2, -20, 1, -2, 2, 1, -4, 1, -1, 0, 
    -2, 2, -19, -2, 5, 1, 1, 2, -6, 4, 
    5, 2, 29, -12, -3, 35, -7, -1, -5, -2, 
    29, 1, -1, -14, 4, -3, -127, 4, -15, -12, 
    -3, 2, -28, -8, -31, 1, 0, 9, 
};
const TfArray<1, int> tensor_dimension4 = { 1, { 2048 } };
const ALIGN(8) int16_t tensor_data5[64] = { 
    6684, 8813, 11616, 6489, 6286, 23284, 7047, 9969, 12612, 14183, 
    5796, 10307, 9180, 12368, 8109, 19346, 1439, 126, -5629, 4483, 
    -2292, -5647, -46, -542, -4777, -4913, -9289, 1288, -5043, -2649, 
    -1820, -4833, 19248, 24393, 9486, 7830, 7235, 7673, 11832, 11100, 
    6194, 5471, 8948, 19945, 10793, 13373, 7298, 7376, -3826, -2631, 
    7731, -4288, 2835, -12128, -3399, -650, -1901, -749, 1314, -9460, 
    -1154, -3684, -6696, -4169, 
};
const TfArray<1, int> tensor_dimension5 = { 1, { 64 } };
const ALIGN(8) int8_t tensor_data6[4096] = { 
    -12, 10, -4, 4, 14, -15, 12, 12, -12, -16, 
    -12, -19, 3, -13, 15, 7, 24, 18, -27, -1, 
    -11, -36, -8, -11, 7, -14, 13, 19, 22, 12, 
    -13, -14, 3, -8, 4, -15, 5, -20, 7, 3, 
    -12, -4, -12, -13, 7, -20, 2, 2, 35, 9, 
    -12, 0, -4, 15, -60, 0, 39, -11, 6, -1, 
    19, -1, 7, -13, -18, -14, 17, -16, -4, -2, 
    -11, -27, 30, 10, 16, -42, 0, 16, -14, -20, 
    -22, -11, 21, 27, -16, 0, -4, -15, 6, 8, 
    -20, -2, -11, -10, 17, 21, -1, 5, -10, 2, 
    -1, -3, 3, 3, -2, -8, 0, 0, 28, -13, 
    3, 12, -95, 10, -6, -3, 3, -1, 4, -5, 
    -26, -13, 0, 6, 7, 0, -9, -4, -13, 13, 
    -12, 3, 8, -13, 11, 15, -20, -12, -13, -10, 
    8, 2, 14, 16, 12, 13, -22, -7, -18, -18, 
    9, -14, 5, -10, 16, 14, 17, 4, -22, -16, 
    -9, -4, -13, 2, -1, -12, 4, 14, -9, -10, 
    -4, -7, 36, 8, 8, 23, -11, 13, -7, -10, 
    -9, -1, 17, -12, -5, -9, 8, 13, 10, -7, 
    -18, -18, -7, 22, -4, 5, 15, 8, 7, -4, 
    0, -4, -1, -14, -47, -25, 7, -10, 0, 0, 
    -20, -4, -12, -23, -7, -14, 2, -1, 6, 15, 
    -2, 14, 14, 8, 19, -15, 10, -3, -16, 7, 
    -9, -15, 28, 14, 21, 39, -9, 6, -10, -19, 
    -18, -8, 21, 10, 19, 13, 2, 19, -14, 2, 
    -14, -19, -14, -14, -38, 15, 31, -18, 21, -14, 
    -10, 2, -14, -19, 33, 11, 16, 32, -4, 8, 
    -10, -13, -21, -19, 10, 16, 14, 3, -3, 18, 
    2, 11, -19, -15, -16, -16, 9, 25, 23, -26, 
    20, -22, -10, 1, -9, -21, 23, 7, 11, 14, 
    0, 2, -5, -9, -29, -19, -5, 16, 13, 7, 
    -4, 21, 9, 13, -13, -8, -6, -9, 17, 24, 
    5, -11, 14, -17, -12, 3, -4, -4, -25, 28, 
    -7, 13, -4, -6, -12, -23, -8, -13, 28, 10, 
    29, 32, 15, -6, -11, 20, -6, -15, -6, -14, 
    20, 4, 5, -51, -5, -17, 10, -11, 12, 9, 
    -9, -5, -6, -16, -29, -10, 7, 12, 38, 6, 
    -21, 1, -7, 4, -24, 0, 13, -9, -8, -4, 
    5, 6, 11, -4, -5, 14, 5, 4, 6, -13, 
    8, 14, -9, -15, -15, 1, 8, 5, 10, -2, 
    24, 12, -9, 3, -10, -27, -6, -7, 3, 0, 
    6, -7, 10, 10, -127, -16, 26, -16, 13, -8, 
    -9, 6, -12, -16, 28, 12, 10, 33, -5, 10, 
    -11, -19, -17, -21, 20, 15, 16, 8, 1, 16, 
    -3, 11, -14, -16, -12, -13, 9, 16, 22, -21, 
    15, -8, -14, 2, -13, -9, -30, 14, 11, 28, 
    0, 7, -10, -15, -20, -7, 26, 19, 17, 8, 
    1, 20, 1, 13, -15, -10, -12, -12, 14, 16, 
    -2, 9, -11, 5, 12, -3, 2, 2, 1, -4, 
    8, -4, -25, -18, 10, 1, -16, 1, -8, 3, 
    -1, -16, -2, -5, -13, -6, 4, 8, 20, 15, 
    -4, -4, -10, 11, -9, 4, 14, -10, 11, 8, 
    -11, -9, -8, -12, 2, -17, 12, 11, 4, 13, 
    -24, -5, -16, 6, -8, -13, 5, -10, 11, 17, 
    15, 7, -7, -8, -4, 5, -19, 6, 4, 0, 
    6, 9, -9, -9, 0, -6, 9, -4, 8, 9, 
    -26, 12, -11, 1, -10, -15, 20, -8, -9, -4, 
    8, 11, 11, 6, -11, -4, -7, -9, 15, -9, 
    -2, 0, -8, -12, 25, 4, 7, -34, 7, 12, 
    -2, -6, -12, -12, 20, 19, -23, 1, 7, -9, 
    -2, 6, -18, 0, -11, -6, 14, 11, -7, 5, 
    -5, 6, 5, -1, 7, 7, -3, -6, -1, 0, 
    8, -4, 6, 6, 0, 7, -3, -3, -3, 4, 
    3, 0, -12, -1, 6, 4, 4, 3, -2, -4, 
    -9, 9, -7, 2, 10, -12, 10, 11, -13, -10, 
    -13, -7, 4, -8, 10, 12, 18, 14, -20, -5, 
    -12, -10, -9, -11, 5, -9, 12, 12, 15, 8, 
    -12, -7, -8, 5, -9, 3, 5, -9, 8, 13, 
    -7, -8, -10, -5, 15, -5, 7, 12, 6, 11, 
    -7, -5, -12, -13, 0, -9, 1, -5, 6, 12, 
    13, 8, -11, -10, -5, 15, -5, 3, 11, -10, 
    7, -1, -6, -7, -7, -8, -2, -11, 6, 2, 
    10, 6, -9, -7, -5, 1, -13, -9, 6, -9, 
    4, 10, 11, 3, 5, 0, 18, -13, 8, -2, 
    -12, 10, -6, -9, 22, 13, 11, 32, -8, 8, 
    -3, -12, -15, -6, 18, 7, 11, 11, 6, 15, 
    0, 4, -9, -13, -13, -9, -20, 11, 24, -12, 
    16, -8, -10, 8, -9, -14, 27, 10, 14, 24, 
    2, 8, -6, -12, -15, -18, 10, 12, 10, 4, 
    8, 16, -2, 11, -16, -13, -11, -12, 6, 18, 
    18, -11, 18, -13, -8, 2, -7, -15, 20, 7, 
    6, 17, 2, 1, -5, -7, -20, -18, 1, 12, 
    8, 4, 7, 17, -3, 10, -7, -11, -5, -9, 
    10, 18, 11, -9, 10, -8, -9, 6, -3, -6, 
    -22, 17, 0, 11, -3, 0, -5, -21, -15, -8, 
    22, 16, 19, 22, 14, -2, -4, 13, -5, -17, 
    -2, -9, 14, 2, 0, 6, -1, 1, 11, -12, 
    12, 7, -6, -6, -3, -7, -4, -14, 9, -1, 
    3, 12, -9, -2, -7, 2, -13, -9, 5, -4, 
    8, 10, 9, 16, -2, -3, -4, -1, -5, -5, 
    5, -7, 7, 8, -8, -7, 0, -5, 6, -5, 
    7, 3, 12, 5, -16, 3, -4, -2, -4, -6, 
    5, -5, 6, 0, 10, 0, 5, -5, 20, -12, 
    9, -7, -7, 10, -7, -11, 24, 10, 9, 27, 
    -1, 9, -7, -13, -14, -18, 16, 12, 12, 10, 
    9, 12, -1, 11, -12, -12, -10, -10, 8, 11, 
    13, -14, 12, -4, -8, 4, -10, -5, -21, 11, 
    8, 22, 0, 4, -7, -15, -16, -6, 19, 16, 
    12, 9, 7, 15, -2, 8, -12, -8, -9, -9, 
    11, 13, -10, 13, -4, 9, 8, -2, 6, 6, 
    2, -9, -2, -2, -1, 1, 8, 6, -19, 8, 
    -5, -4, -5, -11, 10, -8, -16, -2, 5, 8, 
    7, 10, -10, -4, -15, 14, -23, 5, 11, -11, 
    10, 13, -12, -11, -9, -10, 1, -13, 9, 16, 
    3, 15, -19, -8, -12, -46, -7, -11, -1, -12, 
    13, 13, 17, 8, -6, -7, -5, 10, -14, 11, 
    4, 2, 5, 8, -7, -9, 1, -2, -1, 2, 
    7, 8, -58, 8, -9, -2, -8, -25, 20, -9, 
    -26, -1, 7, 11, 9, 6, -12, -2, -8, -11, 
    19, -8, -1, -1, -7, -9, 24, 3, 6, -36, 
    7, 12, -3, -8, -4, -16, 13, 17, -23, 1, 
    8, -9, -7, 6, -18, -6, -8, -6, 12, 13, 
    -14, 5, -8, 5, 6, -1, 8, 7, -1, -4, 
    -3, -6, -4, -1, 4, 1, 7, 6, -10, -3, 
    -9, -6, 2, -3, -1, 1, 8, 5, 4, 4, 
    1, -3, -9, 8, -9, 3, 13, -12, 12, 9, 
    -13, -12, -12, -9, 0, -18, 10, 10, 16, 13, 
    -21, -7, -11, -11, -17, -12, 4, -11, 13, 15, 
    17, 7, -2, -9, -10, 6, -6, 0, 9, -5, 
    9, 8, -8, -9, -9, -6, -2, -17, 9, 2, 
    4, 13, -19, -1, -10, -20, -2, -14, 5, -3, 
    4, 14, 9, 10, -3, -3, -1, -7, 1, -8, 
    0, -9, 0, 4, -8, -2, -3, -6, 19, -3, 
    2, 4, 14, -7, -3, -2, -1, 0, -10, -4, 
    12, -6, 3, 6, 11, -7, 1, -4, 17, -11, 
    10, -3, -12, 7, -7, -7, 22, 12, 10, 30, 
    -7, 12, -4, -12, -18, -5, 19, 8, 10, 10, 
    11, 17, 2, 4, -10, -13, -10, -9, -21, 12, 
    21, -13, 18, -8, -9, 9, -10, -11, 26, 11, 
    13, 26, 2, 10, -7, -11, -14, -18, 11, 12, 
    10, 5, 14, 16, -2, 11, -16, -14, -16, -10, 
    7, 18, 16, -13, 17, -14, -10, 3, -7, -11, 
    20, 8, 8, 20, 2, 1, -6, -9, -18, -14, 
    3, 13, 9, 3, 11, 17, -3, 9, -10, -12, 
    -7, -8, 9, 18, 15, -5, 4, -6, -10, 9, 
    -3, -5, -23, 18, -3, 10, -6, 0, -4, -18, 
    -27, -3, 23, 17, 21, 21, 10, -11, 4, 12, 
    -1, -12, -2, -7, 14, 3, -3, 15, -8, 5, 
    7, -10, 6, 2, -5, -6, 0, 1, 5, -12, 
    6, -2, -4, 7, -1, -5, -1, -3, -6, -7, 
    2, -8, 5, 13, 9, 11, -3, -5, -5, 1, 
    -3, -1, 8, -11, 10, 7, -10, -4, -3, -11, 
    0, -19, 8, 11, 2, 11, -23, -5, -8, 7, 
    -13, -9, 2, -11, 13, 12, 12, 1, 9, -3, 
    20, -13, 9, -7, -6, 11, -9, -11, 23, 10, 
    8, 26, 0, 13, -7, -14, -10, -20, 19, 13, 
    12, 9, 12, 15, -3, 12, -16, -15, -10, -8, 
    7, 11, 16, -13, 12, -4, -10, 5, -11, -9, 
    -20, 11, 11, 23, 2, 7, -8, -14, -18, -11, 
    21, 16, 14, 11, 12, 15, -2, 9, -13, -10, 
    -9, -10, 11, 13, -10, 12, -6, 3, 5, -3, 
    7, 4, -3, -8, -7, -8, 15, 1, 5, 8, 
    -1, 10, -13, -6, -11, -11, 5, -4, -2, -2, 
    8, 8, 2, 1, -7, -5, -14, 16, -13, 1, 
    10, -9, 14, 19, -23, -11, -11, -12, 8, -8, 
    11, 22, 0, 20, -20, -14, -21, 8, -10, -16, 
    9, -8, 17, 16, 15, 4, -11, -13, -9, 13, 
    -5, 2, 8, -5, 3, 0, -4, -5, -6, -1, 
    -4, -9, 6, 5, 0, 2, -7, -3, -6, 0, 
    -6, -2, 2, -4, 5, 9, 11, 2, 3, 2, 
    -22, -19, 25, -11, -2, -1, -9, -14, 30, 9, 
    11, -45, 4, 13, -13, -23, -5, -23, 17, 28, 
    -28, 1, 7, -20, -5, 6, -21, -21, -5, -7, 
    15, 15, -20, -12, 3, -9, 3, -3, 4, 2, 
    1, 8, -10, -11, -27, -3, -2, -14, 46, -4, 
    -17, -5, -7, -5, -23, 0, 38, 1, 1, -1, 
    -2, 2, 9, -1, -13, 12, -13, 4, 15, -9, 
    13, 10, -12, -16, -5, -18, -2, -21, 13, 16, 
    -7, 17, -26, -9, -15, -23, -11, -15, 1, -11, 
    16, 22, 16, 10, 0, -10, -10, 2, -3, -2, 
    14, 0, 6, -2, -6, -3, -12, -11, -44, -26, 
    11, -11, 20, 6, -33, -2, -9, -14, -29, -9, 
    17, -7, 5, 7, 8, 11, 12, 5, -4, -3, 
    -9, 0, -6, -23, 7, 19, -15, -13, -5, 0, 
    36, 5, 4, 16, 2, 13, -2, -1, -8, -12, 
    6, -7, -1, -5, 4, 0, 7, 4, -49, -26, 
    22, -12, 17, -2, -18, 10, -12, -12, 25, 12, 
    19, 36, -9, 16, -6, -19, -13, -8, 23, 14, 
    17, 13, 15, 20, -6, 7, -16, -29, -11, -11, 
    -42, 16, 25, -21, 18, -12, -14, 8, -13, -16, 
    32, 12, 15, 33, -6, 12, -10, -14, -18, -22, 
    12, 17, 14, 1, 9, 18, 2, 14, -19, -17, 
    -17, -14, 9, 25, 16, -32, 21, -20, -12, 6, 
    -10, -14, 24, 8, 11, 27, -4, 0, -8, -6, 
    -31, -20, -5, 16, 11, 4, 0, 21, 5, 11, 
    -14, -12, -8, -9, 14, 23, 14, -3, 6, -15, 
    -10, 10, -2, -11, -27, 25, -4, 10, -4, -3, 
    -4, -18, -31, 2, 32, 14, 25, 24, 14, -23, 
    4, 16, -3, -6, -1, -13, 20, 6, -7, 17, 
    -11, 9, -7, -4, 0, -1, -6, -9, 2, 6, 
    33, 2, 3, 0, -37, 7, -2, -9, -7, -7, 
    20, -11, -4, -3, 4, 22, 3, -10, -20, -6, 
    -14, 17, -26, 7, 15, -7, 13, 8, -11, -10, 
    -8, -16, 0, -24, 9, 21, -19, 20, -21, -15, 
    -15, -53, 2, -15, 1, -16, 17, 24, 16, 11, 
    33, 0, 25, -16, 15, -8, -11, 11, -13, -18, 
    29, 13, 9, 32, -3, 15, -10, -17, -5, -22, 
    20, 17, 17, 7, 14, 16, -4, 16, -18, -21, 
    -16, -13, 8, 17, 18, -16, 17, -8, -15, 4, 
    -14, -10, -28, 17, 9, 25, -2, 9, -12, -18, 
    -15, -8, 26, 17, 19, 7, 10, 18, 1, 13, 
    -13, -10, -16, -17, 14, 17, -7, -4, -4, -13, 
    -4, -13, 6, 8, -28, -3, -19, -14, 17, -5, 
    -1, 12, 37, 2, -17, -7, -13, 3, -44, -1, 
    34, -7, 9, 3, 8, -22, 11, -3, -15, 15, 
    -11, 4, 9, -11, 11, 15, -15, -13, -14, -10, 
    5, -3, 12, 10, 18, 10, -24, -4, -17, -28, 
    8, -15, 6, -7, 14, 13, 15, 4, -20, -10, 
    -13, 7, 4, -33, -6, 5, 3, -6, -30, 11, 
    -2, -14, -5, 12, -1, -6, -31, 1, -29, -15, 
    -35, 11, 4, -8, 13, 10, 4, 18, 1, -23, 
    22, 0, 3, 12, -5, -8, 13, -13, 6, -4, 
    -3, -2, -5, -18, -28, -17, -1, -25, 36, -1, 
    -13, -3, -5, -2, -39, 0, 28, -6, -2, -1, 
    9, 11, 7, -1, -8, 3, 3, -7, -9, -14, 
    4, -1, -19, -6, -12, -13, 29, -5, -1, 8, 
    14, 9, -18, -9, -14, 2, -11, 0, 20, -7, 
    11, 6, 1, -27, 4, 0, -17, 17, -16, 6, 
    10, -5, 10, 14, -30, -10, -15, -19, 1, -8, 
    11, 19, 6, 12, -26, -18, -20, -30, 10, -17, 
    8, -12, 17, 19, 20, 2, 4, -6, -13, 20, 
    -11, 14, 7, -2, 8, 9, -7, -12, -3, -5, 
    12, -20, 10, 2, -30, 7, -9, -5, -5, -31, 
    7, -9, -31, -5, 6, 15, 15, 9, -20, -7, 
    -11, 7, -40, 13, 7, -3, 14, 12, -2, -16, 
    -8, -3, 20, -21, 10, 28, -21, 23, -9, -15, 
    -12, -40, 15, -13, -25, -7, 11, 17, 15, 11, 
    -5, -7, 27, -19, 15, -15, -13, -17, -17, -5, 
    23, 11, -2, 3, 5, 9, -12, -18, -11, -24, 
    -11, 25, 9, 20, 6, 17, 1, 2, -16, -2, 
    -6, -22, 23, 9, 26, -17, 15, -8, -10, 9, 
    -16, -17, 29, 14, 11, 30, -3, 9, -10, -21, 
    -18, -27, 28, 16, 22, 14, 0, 18, -4, 17, 
    -18, -20, -16, -14, 13, 19, -30, 0, 1, -35, 
    -10, -2, -1, -14, -4, 8, -3, 2, 1, 8, 
    -9, -4, -7, -18, -35, -47, -19, 10, 2, -64, 
    5, 5, 8, 5, 2, -12, 20, 13, 9, -5, 
    9, -26, -5, 5, 0, -12, -45, 4, 8, -15, 
    -5, 10, -2, -9, -8, -16, 3, -8, -4, 2, 
    3, -60, 5, 6, -12, 1, -4, -14, 4, 7, 
    -13, 7, -4, 9, 5, 0, 10, 13, -4, -18, 
    -1, -1, 37, -17, 7, 10, -49, 13, -8, -4, 
    -8, -10, 14, -8, -26, -2, 3, 12, 7, 6, 
    -19, -8, -16, 13, -11, 5, 13, -10, 14, 10, 
    -10, -14, -6, -18, -4, -19, 14, 13, 9, 15, 
    -24, -4, -13, -38, -1, -15, 6, -12, 17, 18, 
    23, 13, -4, -8, -12, 2, -1, 0, 10, -8, 
    14, 15, -28, -9, -8, -18, 6, -6, 15, 20, 
    2, 17, -27, -8, -14, 10, -1, -16, 8, -11, 
    15, 20, 16, 6, -4, -16, -1, 14, -7, 1, 
    10, -16, 9, 2, -7, -2, -10, -21, -16, -7, 
    7, 7, 31, 14, -15, -11, -10, 10, -56, -4, 
    18, -5, 17, 6, 8, 2, 13, -2, -17, 15, 
    -12, 5, 15, -12, 15, 16, -15, -15, -10, -15, 
    3, -11, 16, 15, 12, 19, -25, -5, -17, -14, 
    -2, -16, 7, -13, 17, 20, 21, 11, -14, -11, 
    -10, 12, -4, 0, 11, -14, 12, 8, -15, -10, 
    -12, -10, 3, -9, 11, 9, 21, 13, -19, -6, 
    -8, -8, -9, -11, 5, -9, 13, 13, 12, 6, 
    -13, -10, -17, 5, 7, -20, -2, -1, 7, -1, 
    -28, 4, -1, -20, 5, 6, -2, -6, -17, 3, 
    -23, -9, -30, 6, 7, -5, 1, 10, 1, 9, 
    6, -15, 13, 0, -1, 11, 11, 0, 9, -2, 
    8, 2, -2, -6, 3, -7, 7, -12, 2, -5, 
    -2, 2, -4, 1, -1, 2, 0, -3, 8, -2, 
    7, 5, 8, 5, -1, 0, -5, 6, -9, 1, 
    6, -14, 8, 9, -8, -8, -11, -6, 8, -11, 
    4, 11, 22, 12, -10, -7, -6, -1, -23, -2, 
    8, -8, 9, 4, 9, 7, -4, -7, -11, 14, 
    -8, 2, 9, -8, 12, 9, -13, -13, -13, -10, 
    4, -13, 10, 13, 10, 16, -19, -7, -16, -3, 
    -6, -15, 6, -8, 14, 15, 18, 8, -5, -5, 
    -16, 14, -6, 5, 5, -4, 7, 7, -4, -9, 
    -4, -4, 14, -6, 5, 2, -2, 5, -10, -6, 
    -6, -1, 6, -4, -7, -2, 7, 8, 5, 2, 
    -4, -4, -9, -26, 14, -9, 0, -1, -2, -1, 
    -7, 7, -4, -25, -1, -5, -2, -3, 11, -8, 
    -21, -1, -9, 7, -11, -1, 17, -2, -3, 4, 
    2, -15, 10, -4, 23, -14, 11, -11, -5, -10, 
    -10, -7, 19, 12, 0, 5, 3, 8, -10, -14, 
    -15, -20, -5, 19, 11, 14, 11, 15, -2, 4, 
    -10, 3, -9, -13, 16, 9, 22, -14, 9, -6, 
    -8, 11, -10, -11, 24, 12, 9, 26, -1, 11, 
    -7, -16, -14, -20, 25, 12, 13, 14, 8, 16, 
    -2, 13, -15, -13, -15, -9, 10, 13, -20, 8, 
    4, -21, -8, -4, 2, -1, -5, 4, -2, -4, 
    5, 5, -8, -6, -5, -14, -23, -28, -12, 6, 
    3, -43, 0, 5, 5, 2, 2, -4, 11, 10, 
    -3, -3, 8, -12, -3, 3, 1, -8, -42, -2, 
    10, -19, 3, 2, -1, -8, -3, -14, 1, -3, 
    -11, 0, 6, -39, -2, 4, -15, -4, 1, -9, 
    1, 10, -13, 9, -20, 5, 3, -5, 9, 11, 
    -5, -7, -6, -3, 7, -9, 6, 7, 11, 9, 
    -8, -6, -7, -5, 2, -2, -6, -8, 7, 5, 
    12, 5, -1, -4, -14, 12, -11, 4, 13, -10, 
    13, 9, -13, -12, -9, -12, 3, -12, 11, 10, 
    5, 14, -21, -6, -12, -7, -9, -16, 2, -10, 
    10, 16, 19, 8, -9, -10, -13, 11, -26, 4, 
    10, -12, 13, 10, -11, -10, -12, -15, 0, -13, 
    9, 14, 7, 16, -18, -9, -11, -61, -9, -11, 
    -1, -12, 10, 15, 17, 10, -5, -8, -4, 5, 
    1, -4, 7, -7, 4, 2, -8, -4, -3, -11, 
    9, -9, 4, 4, 11, 4, -11, -4, -6, 0, 
    -10, -1, 10, -7, 9, 5, 13, -1, 5, -4, 
    -17, 14, -16, 4, 12, -11, 12, 11, -12, -13, 
    -10, -12, 3, -13, 11, 14, 11, 14, -19, -7, 
    -16, -24, -7, -15, 2, -13, 15, 17, 19, 10, 
    -10, -12, -9, 7, -11, 2, 10, -13, 12, 9, 
    -12, -11, -11, -12, 1, -17, 10, 12, 15, 17, 
    -20, -5, -11, -8, -19, -12, 4, -11, 12, 14, 
    15, 7, -7, -10, -27, 5, 15, -19, -1, -3, 
    7, 2, -31, 6, 0, -28, 9, 5, -6, -9, 
    -7, -5, -24, -14, -42, 8, 13, -10, -10, 10, 
    -4, 4, 6, -18, 10, 3, -4, 9, -8, 7, 
    3, -6, 5, 7, -5, -10, -1, 0, 11, -3, 
    6, 11, -3, 14, -1, -6, -2, 4, 4, -2, 
    -4, -2, 8, 6, 10, 7, -6, -6, 1, -4, 
    5, 0, 5, -7, 5, 8, -3, -8, 1, 1, 
    -4, -11, 4, 3, 6, 5, -6, 3, -1, 15, 
    -8, -4, 0, -6, 5, 6, 10, 9, 0, -6, 
    -10, 14, -13, 4, 11, -14, 11, 11, -9, -15, 
    -10, -12, 5, -10, 10, 13, 16, 11, -17, -4, 
    -11, -20, -8, -12, 2, -10, 11, 15, 15, 11, 
    -13, -10, -12, 4, -7, -2, 7, -2, 9, 9, 
    -4, -3, -8, -13, 10, 3, 5, 10, 11, 10, 
    -14, -8, -11, -4, 0, -4, 11, -4, 11, 5, 
    6, 2, 2, -3, -5, 4, 4, -1, 8, -10, 
    4, 2, -6, -2, -11, -9, -10, -6, 4, -3, 
    21, 7, -12, -3, -6, 1, -21, -5, 16, -6, 
    3, 1, 6, 2, -1, -10, 21, -12, 10, -11, 
    -6, -11, -10, -8, 18, 13, 0, 10, 0, 10, 
    -11, -13, -22, -17, -1, 19, 8, 14, 11, 13, 
    1, 7, -7, 2, -12, -12, 18, 7, 21, -12, 
    9, -4, -10, 13, -9, -10, 25, 9, 8, 25, 
    0, 12, -5, -16, -14, -25, 21, 13, 13, 13, 
    12, 13, -2, 15, -19, -13, -12, -10, 8, 14, 
    -28, 6, 3, -21, -9, -5, 4, -2, -5, 3, 
    -2, -6, 9, 3, -7, -7, -4, -13, -24, -26, 
    -9, 7, 4, -42, -3, 6, 3, 5, 5, -3, 
    9, 10, -6, -3, 8, -7, -1, 2, 1, -5, 
    -36, -1, 11, -34, 6, 1, 1, -8, -5, -10, 
    0, -8, -8, -1, 4, -46, -2, 3, -12, -2, 
    0, -7, 1, 8, -10, -1, 0, -3, 3, -2, 
    6, 4, -3, 3, -5, -13, -5, 1, 2, 1, 
    12, 4, -14, -4, -7, -4, -1, -7, 15, -1, 
    6, 7, 5, 0, 3, 0, -11, 13, -10, 2, 
    11, -10, 12, 11, -16, -11, -12, -11, 6, -7, 
    9, 14, 8, 13, -21, -9, -17, -7, -8, -14, 
    4, -10, 12, 15, 14, 5, -10, -12, -11, 10, 
    -7, 3, 10, -9, 10, 7, -8, -13, -7, -8, 
    3, -15, 10, 7, 2, 11, -19, -4, -15, 12, 
    -9, -11, 4, -9, 10, 14, 10, 8, -7, -6, 
    -6, 9, -3, -2, 5, -4, 7, 8, -10, -10, 
    -2, 0, 12, -10, 6, 3, 7, 2, -5, 0, 
    -2, 6, 5, 2, 10, -11, 6, 6, 18, 6, 
    -1, -8, -13, 14, -12, 4, 11, -12, 13, 10, 
    -15, -11, -11, -13, 7, -14, 10, 12, 5, 14, 
    -22, -7, -14, -13, -10, -13, 3, -10, 13, 18, 
    15, 9, -7, -12, -11, 9, -15, 5, 13, -8, 
    14, 14, -15, -13, -5, -21, 1, -19, 12, 21, 
    -14, 15, -23, -12, -17, -22, -7, -17, 0, -13, 
    13, 21, 16, 12, 1, -14, -39, 4, 17, -32, 
    -3, -6, 8, -6, -44, 14, -2, -36, 3, 4, 
    -12, -16, -6, -12, -31, -26, -44, 14, 12, -18, 
    -5, 13, 0, 8, 2, -33, 14, 2, -3, -2, 
    -9, 4, -7, -1, 5, 8, -6, -8, 2, 2, 
    14, -2, 1, 24, -74, 8, -4, -4, -3, -8, 
    10, -9, -29, -4, 5, 11, 5, -10, -8, 1, 
    -3, 15, -17, 11, 9, 2, 7, 5, -2, -8, 
    8, -3, -25, -13, 12, 0, -58, 2, -6, 0, 
    -2, -44, 18, -8, -25, -4, 6, 10, 15, 21, 
    -13, -5, -10, 5, -6, 3, 13, -14, 14, 15, 
    -10, -14, -6, -16, 2, -12, 13, 8, 8, 17, 
    -23, -1, -12, -10, -25, -10, 4, -12, 11, 13, 
    16, 14, -27, -25, -4, -22, -5, -10, 5, -10, 
    9, 8, -5, 2, -12, -15, -23, -3, 4, 13, 
    37, 4, -23, -8, -10, 11, -39, -2, 27, -8, 
    9, -2, 7, 1, 17, -8, -2, 20, 1, 4, 
    7, -11, 9, 8, -6, -13, -3, 2, -5, -6, 
    11, -7, 10, 9, -8, 0, -5, -35, 1, -9, 
    0, -1, 5, 5, 2, 13, -21, -5, 22, -19, 
    10, -15, -12, -13, -12, -9, 24, 16, -4, 1, 
    4, 8, -13, -10, -26, -20, -12, 20, 10, 15, 
    6, 17, 5, 3, -10, 7, -16, -21, 26, 8, 
    25, -17, 14, -7, -12, 14, -11, -16, 28, 12, 
    8, 30, -1, 16, -10, -21, -11, -27, 29, 17, 
    19, 10, 15, 15, -3, 19, -22, -20, -17, -11, 
    12, 19, -50, -2, -1, -37, -9, -4, 4, -26, 
    -14, 5, -2, 0, 12, 0, -8, -12, -11, -18, 
    -25, -34, -14, 12, -6, -66, 1, 2, 4, 8, 
    4, -5, 17, 17, -2, 0, 9, -15, -2, 2, 
    3, -5, -35, 2, 7, -20, -2, 2, 2, -9, 
    -9, -10, 3, -11, -6, 1, 3, -71, 5, 5, 
    -4, 4, 1, -14, 5, 8, -1, -3, -3, -5, 
    5, -8, 4, -1, -5, 3, -13, -17, -33, -1, 
    4, 4, 34, 8, -18, -10, -8, 3, -32, -3, 
    21, -6, 3, -1, 5, 4, 9, -6, -15, 14, 
    -12, 2, 8, -14, 14, 16, -24, -10, -15, -12, 
    8, -7, 9, 18, 14, 16, -25, -10, -17, -14, 
    -15, -12, 7, -11, 13, 15, 14, 6, -16, -18, 
    -13, 18, -11, 4, 11, -12, 11, 9, -9, -14, 
    -12, -11, 0, -10, 12, 8, 9, 13, -22, -5, 
    -15, -31, -10, -9, 7, -11, 11, 13, 13, 7, 
    -20, -11, -7, 10, -13, 11, 6, -1, 11, 11, 
    -11, -13, 2, 0, 11, -14, 9, 12, -62, 6, 
    -10, 1, -7, -32, 24, -12, -28, -6, 9, 16, 
    14, 16, -26, -8, -15, 13, -15, 2, 12, -11, 
    15, 14, -19, -13, -14, -16, 2, -11, 12, 18, 
    11, 20, -29, -8, -17, -13, -18, -12, 8, -12, 
    17, 16, 17, 6, -11, -17, 
};
const TfArray<1, int> tensor_dimension6 = { 1, { 4096 } };
const ALIGN(8) int16_t tensor_data7[64] = { 
    10959, 10959, 10959, 10959, 10959, 10959, 10959, 10959, 10959, 10959, 
    10959, 10959, 10959, 10959, 10959, 10959, -5026, 1380, 4385, -6583, 
    -4610, 617, 507, 3577, 1904, -5714, -5929, -5797, -5228, -8155, 
    -5094, -5878, 10959, 10959, 10959, 10959, 10959, 10959, 10959, 10959, 
    10959, 10959, 10959, 10959, 10959, 10959, 10959, 10959, -6143, -3365, 
    -6904, -6444, -4797, -15596, -18283, 5127, -1189, -6876, -4812, -6084, 
    -5341, -3861, -15944, -6421, 
};
const ALIGN(8) int8_t tensor_data8[512] = { 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 33, -30, -29, 31, 
    33, -39, -53, -28, -35, 37, 27, 21, 33, -27, 
    40, 20, 18, 27, 21, 21, 25, -52, -127, -26, 
    -53, 35, 23, 21, 33, 39, -58, 21, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 
};
const TfArray<1, int> tensor_dimension8 = { 1, { 512 } };
const ALIGN(8) int16_t tensor_data9[20] = { 
    14011, 0, 0, 0, 4728, 5247, 5247, 5247, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};
const TfArray<1, int> tensor_dimension9 = { 1, { 20 } };
const ALIGN(8) int32_t tensor_data10[2] = { 
    1, 1, 
};
const TfArray<1, int> tensor_dimension10 = { 1, { 2 } };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,1,4,64 } };
const TfArray<1, float> quant11_scale = { 1, { 0.10807058215141296, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(8) int8_t tensor_data12[64] = { 
    -113, -116, -112, -107, -105, -110, -106, -120, -103, 94, 
    -115, -123, -116, -120, -106, -120, 119, -120, -118, -120, 
    -118, -113, -117, -111, 102, -117, 127, -120, -118, -121, 
    -119, -123, -117, -112, -117, -108, -112, 71, 127, -121, 
    -114, 127, -68, -123, -109, -118, 106, -114, -123, 107, 
    -111, -120, -107, -120, -114, -110, -118, -99, -118, -118, 
    117, -117, -117, 110, 
};
const TfArray<1, float> quant12_scale = { 1, { 0.12401088327169418, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<1, float> quant13_scale = { 1, { 0.13621410727500916, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(8) int8_t tensor_data14[64] = { 
    20, 26, 85, -33, 112, 30, 43, -43, 55, -12, 
    46, -74, 20, -9, 38, -83, -8, -33, 9, -44, 
    -18, -5, 52, 57, -35, -45, -32, -25, -4, -29, 
    -46, -4, -2, -11, -21, 23, -39, 73, -43, -14, 
    -30, -35, 5, 27, 26, 38, -40, -3, -68, 115, 
    -51, 19, -128, -18, -20, 11, 27, -23, 30, -40, 
    127, -66, -88, 34, 
};
const TfArray<1, float> quant14_scale = { 1, { 0.0040693976916372776, } };
const TfArray<1, int> quant14_zero = { 1, { 73 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<1, float> quant15_scale = { 1, { 0.13789637386798859, } };
const TfArray<1, int> quant15_zero = { 1, { -122 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,4,32 } };
const TfArray<1, float> quant16_scale = { 1, { 0.10372437536716461, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,1,32 } };
const TfArray<1, float> quant17_scale = { 1, { 0.1441643089056015, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,1,1,4 } };
const TfArray<1, float> quant18_scale = { 1, { 0.12821871042251587, } };
const TfArray<1, int> quant18_zero = { 1, { 41 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,1,1,1 } };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,1 } };
const TfArray<1, float> quant21_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
uint8_t ALIGN(4) opdata0[144] = { 109, 112, 0, 40, 96, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 232, 255, 255, 255, 248, 255, 255, 255, 72, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 97, 0, 8, 64, 0, 0, 0, 24, 0, 0, 0, 0, 111, 0, 8, 64, 0, 0, 0, 3, 0, 252, 255, 0, 112, 0, 34, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 48, 48, 0, 1, 36, 20, 115, 0, 107, 0, 116, 0, 7, 72, 6, 119, 63, 52, 12, 9, 7, 1, 7, 79, 1, 125, 70, 23, 64, 0, 20, 4, 20, 20, 40, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 11 } };
uint8_t ALIGN(4) opdata1[33] = { 66, 0, 83, 0, 2, 5, 4, 0, 3, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 115, 1, 0, 0, 147, 1, 0, 6, 6, 10, 38, 1,  }; /* custom_initial_data */
const TfArray<2, int> inputs1 = { 2, { 11,12 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
uint8_t ALIGN(4) opdata2[59] = { 109, 49, 0, 109, 50, 0, 98, 105, 97, 115, 0, 115, 104, 105, 102, 116, 0, 4, 12, 19, 17, 10, 0, 0, 6, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 48, 146, 0, 0, 56, 63, 0, 0, 228, 1, 0, 0, 14, 0, 0, 0, 6, 6, 6, 6, 20, 38, 1,  }; /* custom_initial_data */
const TfArray<2, int> inputs2 = { 2, { 13,14 } };
const TfArray<1, int> outputs2 = { 1, { 15 } };
uint8_t ALIGN(4) opdata3[128] = { 109, 112, 0, 8, 0, 1, 0, 0, 64, 0, 0, 0, 0, 97, 0, 24, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 111, 0, 8, 32, 0, 0, 0, 3, 0, 251, 255, 0, 112, 0, 34, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 48, 48, 0, 1, 36, 20, 115, 0, 107, 0, 116, 0, 7, 88, 6, 103, 63, 52, 12, 9, 7, 1, 7, 95, 0, 109, 70, 23, 0, 0, 20, 4, 20, 20, 40, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs3 = { 3, { 15,4,5 } };
const TfArray<1, int> outputs3 = { 1, { 16 } };
uint8_t ALIGN(4) opdata4[128] = { 109, 112, 0, 8, 128, 0, 0, 0, 128, 0, 0, 0, 0, 97, 0, 24, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0, 8, 32, 0, 0, 0, 2, 0, 252, 255, 0, 112, 0, 34, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 48, 48, 0, 1, 36, 20, 115, 0, 107, 0, 116, 0, 7, 88, 6, 103, 63, 52, 12, 9, 7, 1, 7, 95, 0, 109, 70, 23, 0, 0, 20, 4, 20, 20, 40, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs4 = { 3, { 16,6,7 } };
const TfArray<1, int> outputs4 = { 1, { 17 } };
uint8_t ALIGN(4) opdata5[144] = { 109, 112, 0, 40, 32, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 0, 97, 0, 8, 4, 0, 0, 0, 32, 0, 0, 0, 0, 111, 0, 8, 4, 0, 0, 0, 1, 0, 255, 255, 0, 112, 0, 34, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 48, 48, 0, 1, 36, 20, 115, 0, 107, 0, 116, 0, 7, 72, 6, 119, 63, 52, 12, 9, 7, 1, 7, 79, 1, 125, 70, 23, 64, 0, 20, 4, 20, 20, 40, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs5 = { 3, { 17,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 18 } };
uint8_t ALIGN(4) opdata6[85] = { 98, 101, 103, 105, 110, 95, 120, 0, 98, 101, 103, 105, 110, 95, 121, 0, 109, 112, 0, 40, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 255, 255, 255, 228, 255, 255, 255, 0, 0, 0, 0, 15, 0, 0, 0, 1, 0, 0, 0, 0, 116, 121, 112, 101, 0, 4, 67, 60, 53, 9, 4, 1, 4, 0, 0, 56, 2, 4, 4, 20, 4, 8, 36, 1,  }; /* custom_initial_data */
const TfArray<1, int> inputs6 = { 1, { 18 } };
const TfArray<1, int> outputs6 = { 1, { 19 } };
const TfLiteReshapeParams opdata7 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs7 = { 2, { 19,10 } };
const TfArray<1, int> outputs7 = { 1, { 20 } };
uint8_t ALIGN(4) opdata8[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs8 = { 2, { 20,1 } };
const TfArray<1, int> outputs8 = { 1, { 21 } };
} g0;

TfLiteTensor tflTensors[] = 
{{ {(int32_t*)(tensor_arena + 256)},(TfLiteIntArray*)&g0.tensor_dimension0, kTfLiteInt8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0.quant0)) }, {g0.quant0.scale->data[0], g0.quant0.zero_point->data[0] },96, kTfLiteArenaRw, false, },
{ {(int32_t*)g0.tensor_data1},(TfLiteIntArray*)&g0.tensor_dimension1, kTfLiteInt8, {kTfLiteNoQuantization, nullptr }, {0,0},256, kTfLiteMmapRo, false, },
{ {(int32_t*)g0.tensor_data2},(TfLiteIntArray*)&g0.tensor_dimension2, kTfLiteInt8, {kTfLiteNoQuantization, nullptr }, {0,0},1664, kTfLiteMmapRo, false, },
{ {(int32_t*)g0.tensor_data3},(TfLiteIntArray*)&g0.tensor_dimension3, kTfLiteInt16, {kTfLiteNoQuantization, nullptr }, {0,0},256, kTfLiteMmapRo, false, },
{ {(int32_t*)g0.tensor_data4},(TfLiteIntArray*)&g0.tensor_dimension4, kTfLiteInt8, {kTfLiteNoQuantization, nullptr }, {0,0},2048, kTfLiteMmapRo, false, },
{ {(int32_t*)g0.tensor_data5},(TfLiteIntArray*)&g0.tensor_dimension5, kTfLiteInt16, {kTfLiteNoQuantization, nullptr }, {0,0},128, kTfLiteMmapRo, false, },
{ {(int32_t*)g0.tensor_data6},(TfLiteIntArray*)&g0.tensor_dimension6, kTfLiteInt8, {kTfLiteNoQuantization, nullptr }, {0,0},4096, kTfLiteMmapRo, false, },
{ {(int32_t*)g0.tensor_data7},(TfLiteIntArray*)&g0.tensor_dimension5, kTfLiteInt16, {kTfLiteNoQuantization, nullptr }, {0,0},128, kTfLiteMmapRo, false, },
{ {(int32_t*)g0.tensor_data8},(TfLiteIntArray*)&g0.tensor_dimension8, kTfLiteInt8, {kTfLiteNoQuantization, nullptr }, {0,0},512, kTfLiteMmapRo, false, },
{ {(int32_t*)g0.tensor_data9},(TfLiteIntArray*)&g0.tensor_dimension9, kTfLiteInt16, {kTfLiteNoQuantization, nullptr }, {0,0},40, kTfLiteMmapRo, false, },
{ {(int32_t*)g0.tensor_data10},(TfLiteIntArray*)&g0.tensor_dimension10, kTfLiteInt32, {kTfLiteNoQuantization, nullptr }, {0,0},8, kTfLiteMmapRo, false, },
{ {(int32_t*)(tensor_arena + 0)},(TfLiteIntArray*)&g0.tensor_dimension11, kTfLiteInt8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0.quant11)) }, {g0.quant11.scale->data[0], g0.quant11.zero_point->data[0] },256, kTfLiteArenaRw, false, },
{ {(int32_t*)g0.tensor_data12},(TfLiteIntArray*)&g0.tensor_dimension5, kTfLiteInt8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0.quant12)) }, {g0.quant12.scale->data[0], g0.quant12.zero_point->data[0] },64, kTfLiteMmapRo, false, },
{ {(int32_t*)(tensor_arena + 256)},(TfLiteIntArray*)&g0.tensor_dimension11, kTfLiteInt8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0.quant13)) }, {g0.quant13.scale->data[0], g0.quant13.zero_point->data[0] },256, kTfLiteArenaRw, false, },
{ {(int32_t*)g0.tensor_data14},(TfLiteIntArray*)&g0.tensor_dimension5, kTfLiteInt8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0.quant14)) }, {g0.quant14.scale->data[0], g0.quant14.zero_point->data[0] },64, kTfLiteMmapRo, false, },
{ {(int32_t*)(tensor_arena + 0)},(TfLiteIntArray*)&g0.tensor_dimension11, kTfLiteInt8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0.quant15)) }, {g0.quant15.scale->data[0], g0.quant15.zero_point->data[0] },256, kTfLiteArenaRw, false, },
{ {(int32_t*)(tensor_arena + 256)},(TfLiteIntArray*)&g0.tensor_dimension16, kTfLiteInt8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0.quant16)) }, {g0.quant16.scale->data[0], g0.quant16.zero_point->data[0] },128, kTfLiteArenaRw, false, },
{ {(int32_t*)(tensor_arena + 64)},(TfLiteIntArray*)&g0.tensor_dimension17, kTfLiteInt8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0.quant17)) }, {g0.quant17.scale->data[0], g0.quant17.zero_point->data[0] },32, kTfLiteArenaRw, false, },
{ {(int32_t*)(tensor_arena + 96)},(TfLiteIntArray*)&g0.tensor_dimension18, kTfLiteInt8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0.quant18)) }, {g0.quant18.scale->data[0], g0.quant18.zero_point->data[0] },4, kTfLiteArenaRw, false, },
{ {(int32_t*)(tensor_arena + 0)},(TfLiteIntArray*)&g0.tensor_dimension19, kTfLiteInt8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0.quant18)) }, {g0.quant18.scale->data[0], g0.quant18.zero_point->data[0] },1, kTfLiteArenaRw, false, },
{ {(int32_t*)(tensor_arena + 16)},(TfLiteIntArray*)&g0.tensor_dimension20, kTfLiteInt8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0.quant18)) }, {g0.quant18.scale->data[0], g0.quant18.zero_point->data[0] },1, kTfLiteArenaRw, false, },
{ {(int32_t*)(tensor_arena + 0)},(TfLiteIntArray*)&g0.tensor_dimension20, kTfLiteInt8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0.quant21)) }, {g0.quant21.scale->data[0], g0.quant21.zero_point->data[0] },1, kTfLiteArenaRw, false, },
};

TfLiteNode tflNodes[] = 
{{ (TfLiteIntArray*)&g0.inputs0, (TfLiteIntArray*)&g0.outputs0, (TfLiteIntArray*)&g0.inputs0, const_cast<void*>(static_cast<const void*>(&g0.opdata0)), 144, },
{ (TfLiteIntArray*)&g0.inputs1, (TfLiteIntArray*)&g0.outputs1, (TfLiteIntArray*)&g0.inputs1, const_cast<void*>(static_cast<const void*>(&g0.opdata1)), 33, },
{ (TfLiteIntArray*)&g0.inputs2, (TfLiteIntArray*)&g0.outputs2, (TfLiteIntArray*)&g0.inputs2, const_cast<void*>(static_cast<const void*>(&g0.opdata2)), 59, },
{ (TfLiteIntArray*)&g0.inputs3, (TfLiteIntArray*)&g0.outputs3, (TfLiteIntArray*)&g0.inputs3, const_cast<void*>(static_cast<const void*>(&g0.opdata3)), 128, },
{ (TfLiteIntArray*)&g0.inputs4, (TfLiteIntArray*)&g0.outputs4, (TfLiteIntArray*)&g0.inputs4, const_cast<void*>(static_cast<const void*>(&g0.opdata4)), 128, },
{ (TfLiteIntArray*)&g0.inputs5, (TfLiteIntArray*)&g0.outputs5, (TfLiteIntArray*)&g0.inputs5, const_cast<void*>(static_cast<const void*>(&g0.opdata5)), 144, },
{ (TfLiteIntArray*)&g0.inputs6, (TfLiteIntArray*)&g0.outputs6, (TfLiteIntArray*)&g0.inputs6, const_cast<void*>(static_cast<const void*>(&g0.opdata6)), 85, },
{ (TfLiteIntArray*)&g0.inputs7, (TfLiteIntArray*)&g0.outputs7, (TfLiteIntArray*)&g0.inputs7, const_cast<void*>(static_cast<const void*>(&g0.opdata7)), 0, },
{ (TfLiteIntArray*)&g0.inputs8, (TfLiteIntArray*)&g0.outputs8, (TfLiteIntArray*)&g0.inputs8, const_cast<void*>(static_cast<const void*>(&g0.opdata8)), 0, },
};

used_operators_e used_ops[] =
{OP_XC_conv2d_v2, OP_XC_mul, OP_XC_add, OP_XC_conv2d_v2, OP_XC_conv2d_v2, OP_XC_conv2d_v2, OP_XC_strided_slice, OP_RESHAPE, OP_XC_lookup, };


// Indices into tflTensors and tflNodes for subgraphs
size_t tflTensors_subgraph_index[] = {0, 22, };
size_t tflNodes_subgraph_index[] = {0, 9, };

// Variable tensors
size_t varTensors_index[] = {};

// Input/output tensors
static const int inTensorIndices[] = {
  0, 
};

static const int outTensorIndices[] = {
  21, 
};

// Indices into inTensors and outTensors for subgraphs
size_t inTensors_subgraph_index[] = {0, 1, };
size_t outTensors_subgraph_index[] = {0, 1, };

// Scratch buffer variables
int scratch_buffer_idx;
const int scratch_buffer_offsets[4] = { 352, 0, 0, 0 };
tflite::MicroContext mc;
tflite::MicroGraph micro_graph;
size_t currentSubgraphIndex = 0;

// Xcore context and thread variables
xc_context_config_t xc_config;
// When using USE_DDR_FIX for enabling LPDDR support, only one thread can be used
#ifdef USE_DDR_FIX
static_assert((1 == 1),
             "Only one thread can be used when using USE_DDR_FIX! Please recompile with one thread!");
#endif
constexpr int kStackWordsPerThread = 256;
constexpr int threadsStackSizeInUint64 = 1 * kStackWordsPerThread/2;
// We use uint64_t for xcThreadsStack so that it is aligned to 8 bytes
uint64_t xcThreadsStack[threadsStackSizeInUint64];

// Persistent buffer ptr
// Initialized to the tail end of the tensor arena
uint8_t *persistentBufferPtr;
// Functions to be used as function pointers for TfLiteContext and MicroContext 
static void* AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes) {
  // Align to double word
  bytes = ((bytes + 7) / 8) * 8;
  persistentBufferPtr -= bytes;
  return persistentBufferPtr;
}

static TfLiteEvalTensor *GetEvalTensor(const struct TfLiteContext *context,
                                       int tensor_idx) {
  return (TfLiteEvalTensor*)&tflTensors[tflTensors_subgraph_index[currentSubgraphIndex] + tensor_idx];
}

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext *context, size_t bytes,
                                       int *buffer_idx) {
  *buffer_idx = scratch_buffer_idx++;
  return kTfLiteOk;
};

static void *GetScratchBuffer(struct TfLiteContext *context,
                                       int buffer_idx) {
  return tensor_arena + scratch_buffer_offsets[buffer_idx];
}

static TfLiteTensor* mc_AllocateTempInputTensor(const TfLiteNode* node, int index) {
      if (node->inputs->data[index] < 0) {
        return nullptr;
      }
      return &ctx.tensors[tflTensors_subgraph_index[currentSubgraphIndex] + node->inputs->data[index]];
}

static TfLiteTensor* mc_AllocateTempOutputTensor(const TfLiteNode* node, int index) {
      if (node->outputs->data[index] < 0) {
        return nullptr;
      }
      return &ctx.tensors[tflTensors_subgraph_index[currentSubgraphIndex] + node->outputs->data[index]];
}

static void mc_DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
}

static void* mc_external_context() {
  return &xc_config;
}

static tflite::MicroGraph& mc_graph() {
  return micro_graph;
}

static int mg_NumSubgraphs(){
  return sizeof(tflTensors_subgraph_index)/sizeof(size_t) - 1;
}

static size_t mg_NumSubgraphInputs(int subgraph_idx){
  return inTensors_subgraph_index[subgraph_idx+1] - inTensors_subgraph_index[subgraph_idx];
}

static size_t mg_NumSubgraphOutputs(int subgraph_idx){
  return outTensors_subgraph_index[subgraph_idx+1] - outTensors_subgraph_index[subgraph_idx];
}

static TfLiteEvalTensor* mg_GetSubgraphInput(int subgraph_idx, int i){
  return (TfLiteEvalTensor*)&tflTensors[tflTensors_subgraph_index[subgraph_idx] + inTensorIndices[inTensors_subgraph_index[subgraph_idx] + i]];
}

static TfLiteEvalTensor* mg_GetSubgraphOutput(int subgraph_idx, int i){
  return (TfLiteEvalTensor*)&tflTensors[tflTensors_subgraph_index[subgraph_idx] + outTensorIndices[outTensors_subgraph_index[subgraph_idx] + i]];
}

static TfLiteStatus mg_InvokeSubgraph(int g){
  int prevSubgraphIndex = currentSubgraphIndex;
  currentSubgraphIndex = g;
#ifdef TFLMC_PRINT_TENSORS
printf("[\n");
#endif

  for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {

#ifdef TFLMC_PRINT_INPUT_TENSORS
    // print every input tensor
    printf("\nnode in %d", i);
    for (int j=0; j<tflNodes[i].inputs->size; j++){
      // -1 such as in case of no bias tensor for conv
      if (tflNodes[i].inputs->data[j] != -1) {
        printf("\ntensor %d, input %d, %d bytes, checksum %d\n", tflNodes[i].inputs->data[j], j, tflTensors[tflNodes[i].inputs->data[j]].bytes, checksum(tflTensors[tflNodes[i].inputs->data[j]].data.raw, tflTensors[tflNodes[i].inputs->data[j]].bytes));
        for(int k=0; k<tflTensors[tflTensors_subgraph_index[g] + tflNodes[i].inputs->data[j]].bytes; k++){
          printf("%d,", (int8_t)tflTensors[tflTensors_subgraph_index[g] + tflNodes[i].inputs->data[j]].data.raw[k]);
        }
      }
    }
    printf("\n");
#endif

#ifdef TFLMC_XCORE_PROFILE
#ifdef __xcore__
  asm volatile ("gettime %0" : "=r" (time_t0));
#endif
#endif

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#ifdef TFLMC_XCORE_PROFILE
#ifdef __xcore__
  asm volatile ("gettime %0" : "=r" (time_t1));
#endif
  op_times[used_ops[i]] += time_t1 - time_t0;
  op_counts[used_ops[i]] += 1;
  printf("\nnode %-5d %-32s %-12d", i, op_strs[used_ops[i]], time_t1 - time_t0);
#endif

#ifdef TFLMC_PRINT_TENSORS
    // print every output tensor
    printf("\n{\"node\" : \"%d\", \"op\" : \"%s\", \"data\" : [", i, op_strs[used_ops[i]]);
    for (int j=0; j<tflNodes[i].outputs->size; j++){
      printf("\n{\"tensor\" : %d, \"output\" : %d, \"bytes\" : %d, \"checksum\" : %d,\n", tflNodes[i].outputs->data[j], j, tflTensors[tflNodes[i].outputs->data[j]].bytes, checksum(tflTensors[tflNodes[i].outputs->data[j]].data.raw, tflTensors[tflNodes[i].outputs->data[j]].bytes));
      printf("\"val\" : [");
      for(int k=0; k<tflTensors[tflTensors_subgraph_index[g] + tflNodes[i].outputs->data[j]].bytes; k++){
        printf("%d", (int8_t)tflTensors[tflTensors_subgraph_index[g] + tflNodes[i].outputs->data[j]].data.raw[k]);
        if (k < tflTensors[tflTensors_subgraph_index[g] + tflNodes[i].outputs->data[j]].bytes-1){
          printf(",");
        }
      }
      if(j<tflNodes[i].outputs->size-1){
        printf("]},\n");
      } else {
        printf("]}]\n");
      }
    }

    if(i < ((tflNodes_subgraph_index[g+1] - tflNodes_subgraph_index[g]) - 1)){
      printf("},\n");
    } else {
      printf("}\n");
    }
#endif

    if (status != kTfLiteOk) {
      currentSubgraphIndex = prevSubgraphIndex;
      return status;
    }
  }
#ifdef TFLMC_PRINT_TENSORS
printf("\n]");
#endif

  currentSubgraphIndex = prevSubgraphIndex;
  return kTfLiteOk;
}

} // namespace

TfLiteTensor* model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

TfLiteTensor* model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus model_init(void *flash_data) {
  // Clear and initialize
  scratch_buffer_idx = 0;
  persistentBufferPtr = tensor_arena + kTensorArenaSize;

  // Set flash data in xcore context config
  xc_config.flash_data = flash_data;

  // Setup microcontext functions
  mc.AllocateTempInputTensor = &mc_AllocateTempInputTensor;
  mc.AllocateTempOutputTensor = &mc_AllocateTempOutputTensor;
  mc.DeallocateTempTfLiteTensor = &mc_DeallocateTempTfLiteTensor;
  mc.external_context = &mc_external_context;
  mc.graph = &mc_graph;

  micro_graph.NumSubgraphs = &mg_NumSubgraphs;
  micro_graph.NumSubgraphInputs = &mg_NumSubgraphInputs;
  micro_graph.NumSubgraphOutputs = &mg_NumSubgraphOutputs;
  micro_graph.GetSubgraphInput = &mg_GetSubgraphInput;
  micro_graph.GetSubgraphOutput = &mg_GetSubgraphOutput;
  micro_graph.InvokeSubgraph = &mg_InvokeSubgraph;

  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  
  // Set microcontext as the context ptr
  ctx.impl_ = (void*)&mc;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 22;
  registrations[OP_XC_conv2d_v2] = *(tflite::ops::micro::xcore::Register_XC_conv2d_v2());
  registrations[OP_XC_mul] = *(tflite::ops::micro::xcore::Register_XC_mul());
  registrations[OP_XC_add] = *(tflite::ops::micro::xcore::Register_XC_add());
  registrations[OP_XC_strided_slice] = *(tflite::ops::micro::xcore::Register_XC_strided_slice());
  registrations[OP_RESHAPE] = tflite::ops::micro::Register_RESHAPE();
  registrations[OP_XC_lookup] = *(tflite::ops::micro::xcore::Register_XC_lookup());


  // Allocate persistent buffers for variable tensors
  for (int i = 0; i < 0; i++) {
    tflTensors[varTensors_index[i]].data.data = AllocatePersistentBuffer(&ctx, tflTensors[varTensors_index[i]].bytes);
  }

#ifdef TFLMC_XCORE_PROFILE
  printf("\nProfiling init()...");
  memset(op_times, 0, sizeof(op_times));
  op_times_summed = 0;
#endif

  for(size_t g = 0; g < 1; ++g) {
    currentSubgraphIndex = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
    if (registrations[used_ops[i]].init) {

#ifdef TFLMC_XCORE_PROFILE
#ifdef __xcore__
      asm volatile ("gettime %0" : "=r" (time_t0));
#endif
#endif

      tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, tflNodes[i].custom_initial_data_size);

#ifdef TFLMC_XCORE_PROFILE
#ifdef __xcore__
      asm volatile ("gettime %0" : "=r" (time_t1));
#endif
      op_times[used_ops[i]] += time_t1 - time_t0;
      printf("\nnode %-5d %-32s %-12d", i, op_strs[used_ops[i]], time_t1 - time_t0);
#endif

    }
  }
  }
  currentSubgraphIndex = 0;

#ifdef TFLMC_XCORE_PROFILE
    printf("\n\nCumulative times for init()...");
    for(int i=0; i<OP_LAST; i++){
      op_times_summed += op_times[i];
      printf("\n%-32s %-12d %.2fms", op_strs[i], op_times[i], op_times[i]/100000.0);
    }
    printf("\n\nTotal time for init() - %-10lld %.2fms\n\n", op_times_summed, op_times_summed/100000.0);
  printf("\n");
  printf("\nProfiling prepare()...");
  memset(op_times, 0, sizeof(op_times));
  op_times_summed = 0;
#endif

  for(size_t g = 0; g < 1; ++g) {
        currentSubgraphIndex = g;
        for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
    if (registrations[used_ops[i]].prepare) {

#ifdef TFLMC_XCORE_PROFILE
#ifdef __xcore__
      asm volatile ("gettime %0" : "=r" (time_t0));
#endif
#endif

      TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);

#ifdef TFLMC_XCORE_PROFILE
#ifdef __xcore__
      asm volatile ("gettime %0" : "=r" (time_t1));
#endif
      op_times[used_ops[i]] += time_t1 - time_t0;
      printf("\nnode %-5d %-32s %-12d", i, op_strs[used_ops[i]], time_t1 - time_t0);
#endif

      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  }
  currentSubgraphIndex = 0;

#ifdef TFLMC_XCORE_PROFILE
printf("\n\nCumulative times for prepare()...");
    for(int i=0; i<OP_LAST; i++){
      op_times_summed += op_times[i];
      printf("\n%-32s %-12d %.2fms", op_strs[i], op_times[i], op_times[i]/100000.0);
    }
    printf("\n\nTotal time for prepare() - %-10lld %.2fms\n\n", op_times_summed, op_times_summed/100000.0);
  printf("\n");
#endif

  return kTfLiteOk;
}

TfLiteStatus model_invoke() {
  xc_config.thread_info.nstackwords = kStackWordsPerThread;
  xc_config.thread_info.stacks = &xcThreadsStack[threadsStackSizeInUint64 - 1];
  thread_init_1(&xc_config.thread_info);

#ifdef TFLMC_XCORE_PROFILE
  printf("\nProfiling invoke()...");
  memset(op_times, 0, sizeof(op_times));
  memset(op_counts, 0, sizeof(op_counts));
  op_times_summed = 0;
#endif

  mg_InvokeSubgraph(0);

  thread_destroy(&xc_config.thread_info);

#ifdef TFLMC_XCORE_PROFILE
  struct convopdata{
    const char * name;
    size_t thread_count;
    int evalStartTime;
    int threadsStartTime;
    int threadsDoneTime;
  };int conv_times1 = 0, conv_times2 = 0;
    printf("\n\nConv()...");
    for(size_t g = 0; g < 1; ++g) {
      for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
        if(used_ops[i] == OP_XC_conv2d_v2) {
          auto *op_data = reinterpret_cast<convopdata *>(tflNodes[i].user_data);
          conv_times1 += op_data->threadsStartTime - op_data->evalStartTime;
          conv_times2 += op_data->threadsDoneTime - op_data->threadsStartTime;
          printf("\nnode %-5d %-25s %-25s %-6d %-6d %-12d", i, op_strs[used_ops[i]], op_data->name, op_data->thread_count, op_data->threadsStartTime - op_data->evalStartTime, op_data->threadsDoneTime - op_data->threadsStartTime);
        }
      }
    }
    printf("\nSummed - %-10d %-10d", conv_times1, conv_times2);
    printf("\n\nCumulative times for invoke()...");
  for(int i=0; i<OP_LAST; i++){
    op_times_summed += op_times[i];
    printf("\n%-5d %-32s %-12d %.2fms", op_counts[i], op_strs[i], op_times[i], op_times[i]/100000.0);
  }
  printf("\n\nTotal time for invoke() - %-10lld %.2fms\n\n", op_times_summed, op_times_summed/100000.0);
#endif

  return kTfLiteOk;
}

TfLiteStatus model_reset() {
  // Reset variable tensors
  for (int i = 0; i < 0; i++) {
    memset(tflTensors[varTensors_index[i]].data.data, tflTensors[varTensors_index[i]].params.zero_point, tflTensors[varTensors_index[i]].bytes);
  }
  return kTfLiteOk;
}
