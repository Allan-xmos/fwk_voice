// This file is generated. Do not edit.
// Generated on: 31.10.2022 14:35:49


#include "../../api/xcore_config.h"
#include "tensorflow/lite/c/builtin_op_data.h"
#include "tensorflow/lite/c/common.h"
#include "tensorflow/lite/micro/kernels/conv.h"
#include "tensorflow/lite/micro/kernels/fully_connected.h"
#include "tensorflow/lite/micro/kernels/micro_ops.h"
#include "tensorflow/lite/micro/kernels/reduce.h"
#include "tensorflow/lite/micro/kernels/softmax.h"
#include "tensorflow/lite/micro/micro_context.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace tflite {
namespace ops {
namespace micro {
namespace xcore {
extern TfLiteRegistration *Register_XC_conv2d_v2(void);
extern TfLiteRegistration *Register_XC_lookup(void);
} // namespace xcore
}  // namespace micro
}  // namespace ops
}  // namespace tflite

namespace {

constexpr int kTensorArenaSize = 4384;
uint8_t tensor_arena[kTensorArenaSize] ALIGN(8);
template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_XC_conv2d_v2, OP_UNPACK, OP_ADD, OP_SPLIT, OP_XC_lookup, OP_MUL, OP_RESHAPE, OP_CONV_2D,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
  int custom_initial_data_size;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[107];
TfLiteEvalTensor evalTensors[107];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[61];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,32 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0078426925465464592, } };
const TfArray<1, int> quant0_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const TfArray<4, int> tensor_dimension1 = { 4, { 1,1,4,24 } };
const TfArray<1, float> quant1_scale = { 1, { 0.10270200669765472, } };
const TfArray<1, int> quant1_zero = { 1, { 127 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const TfArray<2, int> tensor_dimension2 = { 2, { 1,32 } };
const TfArray<1, float> quant2_scale = { 1, { 11.763879776000977, } };
const TfArray<1, int> quant2_zero = { 1, { 93 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const int32_t tensor_data3[1] = { 1 };
const int tensor_dimension3 = 0; /* empty TfLiteIntArray */
const ALIGN(8) int8_t tensor_data4[256] = { 
    -100, -95, -90, -84, -77, -70, -61, -52, -43, -33, 
    -22, -11, 0, 11, 22, 33, 43, 52, 61, 70, 
    77, 84, 90, 95, 100, 104, 107, 110, 113, 115, 
    117, 119, 120, 122, 123, 123, 124, 125, 125, 126, 
    126, 126, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -127, -127, -127, -127, -127, -127, -126, 
    -126, -126, -125, -125, -124, -123, -123, -122, -120, -119, 
    -117, -115, -113, -110, -107, -104, 
};
const TfArray<1, int> tensor_dimension4 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data5[256] = { 
    -124, -123, -120, -117, -113, -107, -100, -90, -77, -61, 
    -43, -22, 0, 22, 43, 61, 77, 90, 100, 107, 
    113, 117, 120, 123, 124, 125, 126, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -127, -127, -127, -126, -125, 
};
const TfArray<1, int> tensor_dimension5 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data6[256] = { 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, 0, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, 
};
const TfArray<1, int> tensor_dimension6 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data7[256] = { 
    -88, -82, -75, -68, -60, -51, -42, -32, -21, -11, 
    0, 11, 21, 32, 42, 51, 60, 68, 75, 82, 
    88, 93, 98, 102, 106, 109, 112, 114, 116, 118, 
    120, 121, 122, 123, 124, 124, 125, 125, 126, 126, 
    126, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -127, -127, -127, -127, -127, -127, -126, -126, -126, -125, 
    -125, -124, -124, -123, -122, -121, -120, -118, -116, -114, 
    -112, -109, -106, -102, -98, -93, 
};
const TfArray<1, int> tensor_dimension7 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data8[256] = { 
    -120, -116, -112, -106, -98, -88, -75, -60, -42, -21, 
    0, 21, 42, 60, 75, 88, 98, 106, 112, 116, 
    120, 122, 124, 125, 126, 126, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -127, -127, 
    -127, -126, -126, -125, -124, -122, 
};
const TfArray<1, int> tensor_dimension8 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data9[256] = { 
    -64, -56, -48, -39, -30, -20, -10, 0, 10, 20, 
    30, 39, 48, 56, 64, 71, 78, 84, 90, 94, 
    99, 103, 106, 109, 112, 114, 116, 118, 119, 120, 
    121, 122, 123, 124, 124, 125, 125, 126, 126, 126, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -127, -127, -127, -127, -127, -127, 
    -127, -126, -126, -126, -125, -125, -124, -124, -123, -122, 
    -121, -120, -119, -118, -116, -114, -112, -109, -106, -103, 
    -99, -94, -90, -84, -78, -71, 
};
const TfArray<1, int> tensor_dimension9 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data10[256] = { 
    -103, -94, -84, -71, -56, -39, -20, 0, 20, 39, 
    56, 71, 84, 94, 103, 109, 114, 118, 120, 122, 
    124, 125, 126, 126, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -127, -127, -127, -126, -126, -125, 
    -124, -122, -120, -118, -114, -109, 
};
const TfArray<1, int> tensor_dimension10 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data11[256] = { 
    -10, 0, 10, 19, 28, 37, 46, 54, 62, 69, 
    75, 81, 87, 92, 96, 100, 104, 107, 109, 112, 
    114, 116, 117, 119, 120, 121, 122, 123, 124, 124, 
    125, 125, 126, 126, 126, 126, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -127, -127, -127, -127, 
    -127, -127, -127, -126, -126, -126, -126, -125, -125, -124, 
    -124, -123, -122, -121, -120, -119, -117, -116, -114, -112, 
    -109, -107, -104, -100, -96, -92, -87, -81, -75, -69, 
    -62, -54, -46, -37, -28, -19, 
};
const TfArray<1, int> tensor_dimension11 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data12[256] = { 
    -19, 0, 19, 37, 54, 69, 81, 92, 100, 107, 
    112, 116, 119, 121, 123, 124, 125, 126, 126, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -127, -127, -127, 
    -126, -126, -125, -124, -123, -121, -119, -116, -112, -107, 
    -100, -92, -81, -69, -54, -37, 
};
const TfArray<1, int> tensor_dimension12 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data13[896] = { 
    127, 13, 51, -56, -87, 62, -27, -115, -87, -53, 
    108, -83, -86, -119, -94, -6, 108, 2, -114, 103, 
    -45, 84, 67, -108, 127, -90, -16, -36, -68, -84, 
    28, -35, -18, 42, 41, -70, 116, -21, 92, -71, 
    -64, 98, -51, 34, -88, -59, -33, 48, -69, -102, 
    -127, 107, -10, -12, 78, -92, 102, -33, 53, -70, 
    24, 68, -49, 19, -52, -49, 103, 32, 110, 50, 
    3, 53, -106, 83, 127, 117, 71, -23, -92, 22, 
    -29, -8, 106, -103, 41, 60, -103, 10, -57, -88, 
    79, -76, -52, 32, 53, 101, 3, 55, -3, -73, 
    -31, 91, 70, 35, -68, -88, 33, -88, 85, 111, 
    -87, 103, 30, -30, 84, 23, 66, -22, -100, -127, 
    60, 7, -71, -8, -35, -127, 102, 66, 69, -23, 
    61, -79, -84, -49, 19, 49, -1, 100, -19, 65, 
    -2, -54, 18, -51, -94, 83, 46, 96, 60, -65, 
    33, -81, -42, -108, -93, 0, -22, -45, 118, 127, 
    58, -15, -62, 49, -16, -74, -75, 63, -103, 7, 
    -67, 1, -88, -27, -1, -61, 81, 82, 5, -51, 
    -127, -87, 68, 68, -16, 88, -85, 67, 24, -15, 
    -35, 53, -24, -13, -76, -27, -59, 127, 35, -37, 
    62, -35, -3, 10, -64, -85, -65, 85, 37, -53, 
    14, -88, 54, -91, 12, 79, 40, -4, -48, 111, 
    44, 87, 127, 7, -74, -99, -100, -94, 30, 36, 
    -53, 12, -41, -68, 74, 119, -91, -68, 71, 12, 
    -11, 56, 42, 41, 127, 97, -44, -86, -77, 44, 
    9, -61, 8, -16, -63, -3, 32, 98, -77, 23, 
    -40, -49, 61, -21, 21, 14, -127, 97, -20, -4, 
    -41, -80, -16, -68, 123, -89, -21, 82, 106, 34, 
    -11, 123, -86, 11, -32, -69, 27, -108, -5, 47, 
    -55, -17, 47, 22, -117, 14, -55, 0, -63, -75, 
    85, -89, -84, 127, 85, 2, -74, 63, 38, 7, 
    24, -15, -55, 44, -31, 126, 85, 5, -87, 47, 
    44, 67, -35, -127, 22, -83, 56, 81, 27, 14, 
    17, 9, 10, 25, -14, -20, -95, -20, 29, -34, 
    25, -99, -70, 62, 67, 71, 54, 80, -4, 127, 
    106, -108, 50, -108, -76, -107, 8, 4, 95, 48, 
    124, -68, 7, 85, -96, 4, -76, 34, -54, 113, 
    18, -78, 127, -60, -24, 103, 30, -6, 30, -91, 
    -71, -83, -38, 102, 67, -86, -1, -127, -23, 66, 
    56, 20, -88, -85, 2, -52, 105, -51, -44, 13, 
    1, 69, -33, -41, 105, 86, -87, 37, 39, 47, 
    -95, -18, 6, -127, 55, -26, -124, -72, -11, 92, 
    44, 103, 50, 15, 75, -16, 102, -110, -111, 8, 
    99, 6, 60, -52, -105, 85, 63, -89, -122, -119, 
    52, 1, 49, -127, -53, -127, -45, 87, 56, -104, 
    36, 80, 44, 28, -108, 118, -2, 63, -103, -53, 
    -110, -4, -68, 81, 84, 107, -49, -10, -87, -116, 
    -39, 127, 119, -4, -110, -73, 70, -77, -46, 21, 
    -84, -63, 4, -57, -83, -19, -14, 127, 101, 7, 
    104, 55, 97, -70, -83, 0, 42, -81, 6, 17, 
    -107, 93, -72, -82, -96, 99, -78, 109, 5, -95, 
    -100, -127, 108, -108, 79, -67, -54, 31, 11, 62, 
    30, -14, 75, -11, -74, -113, -105, 112, 25, -22, 
    40, -85, 72, -120, -120, 27, 127, 30, 25, -93, 
    -105, 66, 55, 23, 56, -84, 18, -8, 80, 1, 
    13, -98, 54, -11, -24, 22, 82, -25, -36, -99, 
    99, -18, -65, -96, -127, -4, 112, -123, 61, -1, 
    84, 40, 96, -1, 103, -37, -38, 69, 11, -103, 
    69, -5, 30, 64, -32, 23, 93, 60, -69, -127, 
    -20, 108, 23, -122, 107, -43, -116, 39, 104, 27, 
    95, -21, -96, -29, -62, -86, -12, 3, -113, 54, 
    -47, -42, -11, 27, 77, -18, 75, -68, -32, 127, 
    -26, 123, -15, -113, 17, -46, -33, 94, -117, -5, 
    23, -23, 57, 9, -127, -60, 77, 125, 7, 68, 
    -66, -111, 27, 16, 27, -61, -45, 54, 65, 40, 
    -118, 2, 26, -99, -51, -115, 0, 97, 34, 124, 
    -57, -13, -72, -98, -82, 127, 80, -10, 101, 11, 
    -11, -90, 127, 57, -117, 10, -17, 68, 90, 16, 
    114, 71, 28, -91, -101, -40, -51, 90, 91, -88, 
    2, 59, -48, -15, -30, -2, 57, -66, 33, 94, 
    127, -27, -20, -11, -62, -95, 39, 35, -48, -97, 
    9, -2, 47, 9, 48, 8, -17, -25, 12, 38, 
    -37, 64, -58, 96, -101, -104, 40, -67, 88, -40, 
    105, -127, -84, -124, -23, -10, -70, -89, -10, 105, 
    86, 56, 103, 39, -104, -54, 127, 120, 25, -36, 
    34, -9, 69, 94, 98, -80, 32, -109, -22, 52, 
    -86, 25, 0, 12, 63, -19, 9, -70, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 
};
const TfArray<1, int> tensor_dimension13 = { 1, { 896 } };
const ALIGN(8) int16_t tensor_data14[64] = { 
    18109, 15533, 16910, 15355, 14242, 19105, 18058, 17013, 20773, 19063, 
    18138, 15346, 16972, 15273, 18786, 15242, -3443, -5431, -9731, 283, 
    1362, -5762, -3390, 4374, 6590, -198, -2711, -4436, -7684, -6298, 
    4188, 8155, 15046, 15850, 19494, 18090, 14746, 16825, 14375, 17229, 
    14986, 16936, 14804, 16484, 14933, 15325, 14982, 18845, -7257, 2723, 
    -5625, -10112, 808, 765, 3539, -7420, -4772, 259, 6900, 2837, 
    5698, 6349, -3159, 993, 
};
const TfArray<1, int> tensor_dimension14 = { 1, { 64 } };
const ALIGN(8) int8_t tensor_data15[4096] = { 
    -24, -81, 48, -3, -34, 39, 25, 7, -20, 33, 
    65, 11, 19, -35, 14, 11, -28, 14, 6, -16, 
    -6, 62, 77, -22, 64, -54, 0, 21, -4, 32, 
    17, 63, 18, 18, 41, -17, -25, -69, -41, -45, 
    4, -48, -32, 43, 40, 8, 37, -58, -28, 43, 
    -10, -51, -31, -44, -52, 31, -12, -74, 23, 45, 
    -13, -71, -45, 57, -4, 24, 7, 82, -51, -45, 
    45, -63, -50, -8, -26, 33, -19, -4, 29, -40, 
    -5, -23, -43, -45, -45, 93, 0, 22, 22, -13, 
    5, -63, 41, 8, 53, 56, -57, 3, -21, -32, 
    -17, -13, -13, -27, -17, -41, 62, 30, -23, 17, 
    31, -36, 42, 10, -19, 8, -8, -57, -67, -30, 
    -12, 11, -64, 65, 31, 4, 25, -29, 1, 9, 
    -51, -6, 36, 23, 43, 9, -34, 40, 33, -32, 
    21, -25, 14, 52, 42, -56, -9, -25, 52, -47, 
    -45, -11, -43, 1, 47, 30, -31, 38, 1, -27, 
    -29, -30, -38, 24, -64, -54, 52, 42, 58, 8, 
    55, 17, -39, -20, 4, -19, 4, 17, -45, 34, 
    -66, 47, 3, 3, -30, 36, 17, 42, 44, -45, 
    -15, 43, -5, -60, 11, 10, -43, 75, 11, -27, 
    -46, -26, -18, -9, -24, -45, 23, 33, -2, -34, 
    -20, 38, -21, 29, -8, 25, 54, 30, -27, 19, 
    0, 16, 43, 23, 16, 43, -39, 39, -1, -54, 
    -3, 25, 15, 31, 22, 65, -1, 28, 36, -48, 
    -13, 1, 2, -26, 50, -33, 30, -2, 36, -29, 
    25, -57, -27, -58, 32, 22, -12, 34, -53, 8, 
    -52, -43, -21, 16, -68, 32, -73, 20, 45, 17, 
    -5, 3, -29, -43, 41, 33, -22, -93, -59, -7, 
    -5, -59, 21, 35, -66, -35, 11, -6, 61, -19, 
    -35, -32, 25, -28, -35, -40, 9, 12, 14, -30, 
    83, 18, -8, -14, 44, 10, -6, 4, 22, -13, 
    -44, -20, 4, 40, 11, 26, -26, 1, 19, -2, 
    46, 35, -18, -23, -13, -39, -29, 28, -33, 29, 
    -8, -25, -25, 0, 53, 21, -24, -4, 38, -12, 
    36, -29, 46, -46, -74, 44, 6, -9, 39, 18, 
    -54, -46, -23, 44, 35, 31, 12, 35, -11, 64, 
    -14, -4, 53, 38, -34, -59, 27, 21, 19, 15, 
    7, 18, 52, 59, 34, -3, -54, -25, 40, -15, 
    -8, 24, -8, 39, 38, 13, -15, -31, 3, 45, 
    -15, -52, -74, 42, 7, -24, 1, -9, 0, -37, 
    -16, 24, 80, 28, 58, -5, 2, -33, -37, -54, 
    1, -1, -55, -14, 49, 24, -34, 76, 59, -39, 
    40, -36, 4, -41, 0, 14, 39, 44, 42, -7, 
    45, -37, -6, 15, -30, 52, -9, 21, -31, 68, 
    -22, -9, -28, -20, -57, 36, 37, 48, 4, -29, 
    -32, 48, -20, -55, 27, 13, -13, -3, -29, 21, 
    -40, 57, -33, 20, -18, 53, 20, 30, 30, -25, 
    -9, 31, 55, -35, -10, 5, -50, -3, -14, 127, 
    -4, 28, -17, -46, -12, 29, 33, -28, 18, 39, 
    57, 42, -43, -43, -48, -28, -23, 37, -27, 33, 
    -13, -31, 27, -33, 4, 17, 42, 11, -45, 18, 
    42, 7, 44, -2, 50, 68, -1, -47, -12, -72, 
    59, -34, 45, 45, -40, -16, 8, 9, -38, 65, 
    8, -53, 12, 22, 49, 36, 71, 9, -27, -12, 
    2, -6, 59, -5, 28, 8, 24, -44, -43, -49, 
    15, -40, 100, -12, 38, -38, -30, 11, 11, -21, 
    70, -4, -3, 86, 26, -78, -77, 4, 38, 47, 
    -23, 14, 61, 16, 25, -26, 22, 65, -21, -18, 
    -24, 3, 4, -40, -55, -37, -6, -12, -9, 15, 
    15, -10, -19, 21, 33, 24, -36, 11, -38, 6, 
    33, 12, -42, -21, 7, -1, 29, 2, -1, -7, 
    42, -14, 60, -28, -1, -38, 5, 13, 20, 22, 
    -11, -44, 33, -56, -3, -8, 35, -2, 34, -44, 
    26, -13, 46, -28, -3, -4, 32, -56, -25, 10, 
    -29, 39, 44, 8, -16, -20, -43, -44, -28, 38, 
    37, 27, 22, -66, 57, 30, 0, -19, 24, -26, 
    35, 26, -9, -18, -18, 6, 16, -32, 16, 20, 
    12, 24, 42, 27, -32, 27, 16, -8, -45, -31, 
    49, -52, 26, 19, 27, -11, -5, 33, -46, -27, 
    19, -22, -12, 48, 19, 31, 35, -26, 44, 17, 
    -1, -32, 35, -20, 17, 31, -27, -21, 13, 5, 
    32, -37, 48, -19, 19, 8, -7, 28, 1, 32, 
    13, 36, 15, 8, 22, 5, 2, 46, 68, 18, 
    31, -48, -45, -32, 19, 74, 23, -17, -20, 13, 
    -7, 29, 39, 43, -84, 30, -65, 52, 67, 25, 
    -1, -21, 0, 30, -62, 30, -32, 84, 23, 3, 
    4, -31, -57, -21, -42, 7, 44, -19, 35, 13, 
    -10, -34, -14, 23, 18, -23, -29, 12, 55, -28, 
    17, -47, 13, 59, 39, -21, 54, 44, -45, -81, 
    41, 2, -41, -6, -2, -50, 39, 1, 55, 61, 
    -49, -16, 29, -44, -43, -44, 44, 14, -27, 39, 
    26, -36, 53, 23, -46, 32, 68, 30, 8, 18, 
    -60, 32, -5, 48, 7, 20, -17, -5, -20, 20, 
    -7, 10, 21, -23, -19, -48, 46, 39, -1, 60, 
    16, -19, 22, 14, -63, 17, -28, 27, -32, 25, 
    -42, 57, 8, -18, 1, -5, 40, 78, 26, 51, 
    -37, 29, -45, -11, 8, 24, 48, -44, -8, 34, 
    -44, -59, 63, -8, 62, 11, 23, -3, -41, 11, 
    72, 75, -26, 13, -1, -50, -74, 21, -7, 14, 
    -26, 19, -27, -55, -8, -6, -40, -35, -21, 43, 
    32, -8, 7, 37, 41, -19, 29, -5, 49, 40, 
    -42, -34, 15, -11, -3, -44, -40, -4, -2, 2, 
    -39, 19, 29, 43, 11, -16, -3, -7, 25, 38, 
    -36, -18, -41, -26, -5, -1, -60, -48, -36, 25, 
    -46, -42, 43, 0, 53, 19, -38, -31, -20, 28, 
    -7, -4, -42, -44, 21, 22, -18, -11, 13, -22, 
    -39, 39, -12, 49, 21, 0, 49, 10, 58, 2, 
    -23, -3, -59, -41, -27, -13, -5, 51, 0, 4, 
    15, -2, 22, -3, -55, 14, 44, 17, 17, -23, 
    -24, -32, -29, -55, 20, 28, -5, 10, -8, -19, 
    33, 0, 49, 49, -62, -19, -21, -42, -16, -36, 
    -54, -33, -42, 17, -44, 56, 6, -12, 32, 7, 
    17, -54, 30, 40, -35, -47, 40, -3, -6, -28, 
    -53, 6, 15, -6, -16, 47, 27, 66, -15, 28, 
    -8, -17, 32, 48, -8, 34, 6, 51, 58, 35, 
    -79, -19, 29, -54, 81, 24, -24, -4, -52, 18, 
    36, -31, 46, -44, -42, -54, 5, -9, 20, 30, 
    50, -18, 30, 29, 30, -27, 83, -29, 1, -55, 
    -41, -70, 17, -47, -52, -34, 4, -5, 45, -21, 
    2, -23, 25, -50, 57, 21, -5, 8, -13, 43, 
    45, -19, -54, -15, 26, -25, -7, -25, -62, 49, 
    39, 29, -32, 52, -45, -52, 3, 34, 35, -40, 
    1, -28, 35, -55, 26, -6, 40, 12, -1, -61, 
    17, -51, 44, -48, -11, -48, -9, 30, -79, -29, 
    71, 67, 46, -25, -38, 29, -13, -27, -32, 27, 
    -31, 25, 14, 24, 0, -5, -35, 65, 19, 31, 
    -18, -28, 3, 60, -30, 13, 8, 40, 35, 43, 
    -11, -10, 75, 9, -22, -9, -36, 47, -37, 32, 
    21, 27, 6, -1, -24, 47, 9, 35, 7, -4, 
    -18, 8, -44, -45, 7, -30, 18, 41, 22, 10, 
    -44, -15, -6, -20, -43, -26, 13, 39, -34, 12, 
    -28, -35, 19, -35, 29, 19, 10, -22, 21, 20, 
    52, -24, -24, -16, 1, -3, -50, -40, -63, -22, 
    68, 49, 18, 18, -28, -27, 41, -19, 24, 2, 
    19, -34, 33, 29, 62, -18, -50, -6, 18, 60, 
    71, -11, -42, 53, -70, -96, -70, -48, 2, 16, 
    -2, 3, -14, -62, 53, 31, -26, 74, -5, 3, 
    30, 63, 38, 61, 14, -23, -38, 39, 16, -94, 
    2, -42, -21, -76, 60, -1, 26, -22, 26, 19, 
    13, -36, -15, 21, -23, -40, 11, 18, -48, -42, 
    2, -73, -19, 11, -22, -39, -41, 27, -1, -18, 
    -36, 20, 37, -49, 22, -22, -48, -49, 34, -38, 
    -31, -9, 78, 51, -55, -20, 17, 16, -64, -21, 
    6, 81, 35, -48, 11, -3, -39, 39, -38, 12, 
    -14, -35, -21, -10, -5, -87, -39, 67, -18, 36, 
    29, -20, 27, 36, 19, -13, 39, -6, 18, 45, 
    -33, -13, 16, 46, -55, -24, 47, -29, 45, -7, 
    -15, 21, 7, -35, 28, 18, -12, -41, 27, -65, 
    -22, 11, -66, -46, 25, -36, 96, -42, -17, 35, 
    -51, -18, 11, 2, 61, 37, 71, -100, -22, 51, 
    -7, -42, -27, 19, 12, 44, 2, 2, 11, -50, 
    16, -46, 18, -5, 7, -44, -2, -22, -16, 59, 
    -10, 5, -46, 26, 32, 39, -34, 54, -34, -12, 
    -21, -44, -12, -35, -40, 29, 4, -32, 45, 14, 
    36, -35, -51, 1, 11, 41, 15, -28, -18, 10, 
    -49, 18, 11, -4, 5, 51, -27, 92, -22, 6, 
    69, -53, 16, 17, 39, -26, 44, 39, 35, 71, 
    -29, 45, 3, -16, -1, -21, -42, 14, -10, 11, 
    28, 17, 1, -63, -44, -48, 22, 20, -8, 56, 
    -37, -38, 23, 8, 59, 22, 48, -77, -17, -2, 
    27, -7, 11, 86, 20, -27, 8, -13, 49, -57, 
    -3, -11, 9, -19, -24, -12, 53, -31, -23, 15, 
    30, 48, 55, -38, -31, 26, -23, -44, 36, 8, 
    16, 45, 17, 22, 38, -42, -14, -34, 19, -69, 
    -17, 26, -6, 28, 12, 50, -10, 34, -7, -30, 
    40, 0, 4, 13, -20, -68, -2, 58, 14, -28, 
    -3, 50, -16, -7, 76, 47, -64, -72, -14, -16, 
    -20, -71, 7, 12, 44, -4, 33, 11, 52, -8, 
    -18, -1, 60, -45, 4, -22, 20, -47, 27, 32, 
    36, 0, 10, 12, 5, 4, 44, 14, -19, -8, 
    -42, 44, -53, -68, 18, 60, -8, 6, 15, -17, 
    -4, 2, -48, 12, 6, -6, 21, -35, 50, 35, 
    -46, 70, 30, -41, -25, -23, 25, 7, 50, -33, 
    -23, -35, 16, -32, 13, -32, 52, -36, 5, 25, 
    35, 22, 43, -22, 5, -35, -31, -21, 24, 7, 
    -19, -41, 47, -36, -20, -44, 31, -30, 41, -3, 
    23, 5, -21, 6, -47, -22, -50, 2, 32, 30, 
    -9, -26, 46, -54, 43, 5, -16, -45, 37, -10, 
    -25, -7, 21, 53, 35, 21, 42, -2, 9, 54, 
    39, 21, 8, -52, -40, 55, -23, -56, -55, 18, 
    -12, 4, 40, -41, 35, 10, -16, 37, 11, 13, 
    -24, 59, 6, -11, 38, 48, -38, -36, 17, 11, 
    -39, -39, 16, -15, 25, -28, -7, 32, -7, -55, 
    -77, -40, -4, -4, -16, 67, -8, 20, -18, 15, 
    -12, 15, 68, 64, -9, 10, 19, -18, 5, -4, 
    18, 22, -36, 52, -3, 39, 58, 47, 27, 12, 
    -48, 35, -18, 4, 43, -17, 5, 43, 64, -39, 
    -45, -66, 25, -30, 3, 33, -48, 30, -21, -17, 
    9, 24, -24, -39, -2, -37, -35, 47, 22, 18, 
    1, 18, 26, -31, 0, 24, -60, -16, 22, 17, 
    -27, -16, -13, 56, 4, 35, -26, -31, -16, 44, 
    55, 29, 21, -23, 13, 48, 91, -51, -23, -63, 
    -19, 11, -19, 48, -32, -27, 6, 18, -50, -35, 
    -26, 40, -21, -50, -5, -11, -25, 57, 32, -4, 
    -25, 45, -49, 21, -50, -18, 26, 49, 44, -55, 
    43, -62, 37, 50, 35, 15, -37, 8, 28, -37, 
    -4, -73, -65, -8, -21, -55, 54, -6, 21, 38, 
    -19, -30, 48, -59, 20, -15, -1, -8, -40, 5, 
    -25, -50, -23, 27, -14, -57, -5, 24, 11, -12, 
    16, -40, -37, -27, 9, 5, 22, 39, -34, 5, 
    -23, 14, -35, 52, 45, -21, 24, 43, 48, 20, 
    -47, 9, 3, -7, -17, 36, 28, -35, -60, -72, 
    -29, -4, -10, 61, 52, 45, 14, -23, 35, 43, 
    -25, -31, 15, 33, -51, -30, 12, -45, 27, -28, 
    -57, -57, 8, 10, 14, -44, 0, 41, -54, -4, 
    -58, -60, -21, 0, 49, -46, -43, -17, -5, 37, 
    27, -46, 56, -34, -2, 15, 31, -26, -2, 23, 
    -59, 15, 48, -21, 34, -56, 41, 18, 23, 37, 
    22, 6, 29, 23, 21, 35, 77, 38, -45, -5, 
    -67, -62, -2, 27, 122, 30, -17, 28, 14, -46, 
    29, -2, -76, 48, -53, 78, -5, -22, 63, 21, 
    -21, -47, 33, -30, 32, 54, 15, 24, -15, 43, 
    4, 17, 17, 33, 37, -1, 9, 10, 36, -42, 
    -29, 26, 5, -9, -41, 19, 3, -20, 37, -57, 
    9, -55, 8, 7, 41, 22, 2, 24, 56, 54, 
    2, -7, -19, -20, -39, 48, 80, 45, 19, 23, 
    -6, -3, 38, -4, 6, -8, 56, -64, 27, -79, 
    22, -14, -32, 61, 39, -3, -23, 10, -7, 36, 
    46, 51, -55, -26, -1, -28, -10, -25, -13, 11, 
    -11, 14, -32, 40, -27, -15, 11, -23, -39, -36, 
    34, -26, -26, -5, 39, -56, 0, 30, 31, -32, 
    -36, 4, -18, 26, -6, -13, 28, 2, -21, -22, 
    -4, 57, 58, 26, 17, 43, -35, -8, -29, -7, 
    -31, -43, -86, 69, 39, -36, 22, -27, 24, 24, 
    -24, 4, 5, -11, -62, -16, -20, -27, 48, -39, 
    -18, 16, -47, 26, -35, 8, 32, -8, 0, -30, 
    -38, -9, 25, -73, 1, 101, 11, -41, -38, 40, 
    28, -52, -29, -12, 46, 22, 35, 34, -20, 16, 
    29, 6, -14, 38, 32, 52, -25, 17, 43, -47, 
    45, 25, -14, 26, 22, 2, 18, -9, -18, 23, 
    -5, -14, -1, -13, 15, 0, -26, -70, 0, -18, 
    -8, -38, 61, -7, -13, 22, 45, -10, 7, 31, 
    -47, -44, -11, -12, 18, -9, 31, 19, 45, -29, 
    10, -40, -34, 15, 19, 55, 25, 45, -44, 17, 
    -19, -45, -14, -7, -22, 27, 3, -25, -31, -43, 
    3, 9, -12, -27, -37, 45, -42, 40, 38, 12, 
    -43, -32, -11, -37, 42, 29, 37, 4, 37, -38, 
    -29, 48, -29, 19, 34, -31, -16, -14, -33, -14, 
    46, 11, -18, -23, 35, 18, -12, -3, -16, 34, 
    32, 40, 11, 9, -32, 13, -26, 3, 22, -53, 
    -58, -21, 24, -25, -6, 9, -44, -21, -26, 29, 
    -25, 8, -40, 15, -12, -24, -57, -21, 14, 9, 
    -58, 12, 18, -23, -3, -40, 22, 11, 13, -73, 
    18, 52, -38, 10, 17, 54, -35, 30, 43, -52, 
    -50, -27, 30, 36, 28, 46, 19, 19, -13, 10, 
    8, -38, 49, -62, 21, -35, 41, 5, 32, 16, 
    3, -48, -2, 19, 26, -32, -7, -56, 34, -19, 
    8, -5, -2, -16, 50, -40, -28, 5, -32, 55, 
    8, -2, 13, -15, 47, -12, 8, 15, 13, -49, 
    -18, -5, -23, -6, 39, 40, 10, -17, -35, -35, 
    44, -19, 50, -10, -40, 19, 14, 0, -42, 4, 
    20, 24, 55, 54, 29, -51, 7, 48, 39, 57, 
    -12, -57, -20, -28, -19, -43, -40, -8, -48, -22, 
    -35, -34, -37, 1, -44, 16, 44, 26, 32, -5, 
    3, -19, 60, 0, 4, 50, -6, 30, 12, -11, 
    43, 56, -55, 6, -41, 4, 45, 8, -30, -13, 
    67, 38, 15, 23, -47, -36, -64, 30, -36, 12, 
    33, 5, -32, -5, -16, -35, 16, 46, -61, 27, 
    24, 0, 26, 22, -11, -12, 47, -46, -31, -63, 
    33, 9, 51, 47, -13, 56, 34, 28, 3, -5, 
    31, 12, -17, -29, -6, 7, 0, 3, 35, -60, 
    -41, -45, -58, -25, -35, -40, -15, 55, -55, -24, 
    -62, -41, 48, 71, 42, -5, -16, -23, -32, 15, 
    55, 39, 9, -49, 36, -65, 27, -50, -45, -9, 
    65, -42, -3, -31, -33, 9, -12, 45, 26, -51, 
    -58, -36, 16, -47, -22, -7, -3, 4, 5, -23, 
    -33, 24, 27, -61, -10, -5, 33, 35, -43, -44, 
    -47, -24, -4, -14, -1, 30, -64, -47, -14, 6, 
    9, 31, -4, 25, -36, 44, 28, 15, -37, 17, 
    -55, -55, -37, -16, 46, 21, 23, -25, -41, 55, 
    29, 7, 82, -19, -27, 29, 19, 10, 27, -30, 
    51, 33, -1, -48, -38, 37, 0, 51, -24, 40, 
    36, 29, 20, -40, 34, 6, 8, -7, -12, 27, 
    -24, -4, -27, -4, -48, -35, 29, -9, 57, 4, 
    -53, -45, 31, -12, -36, 53, -29, 44, -18, -61, 
    -8, 32, 21, -64, -4, 61, -35, -29, 7, 35, 
    -22, 32, 30, 51, 13, 23, 47, -2, 31, 1, 
    18, 37, 19, -1, 21, -34, 42, -14, 13, -14, 
    50, 47, 51, 3, 49, -37, -35, -23, 14, 2, 
    22, -24, 28, 31, 37, 12, 33, -25, 36, 19, 
    -29, -32, 32, 28, -5, -41, 3, -54, 39, -3, 
    29, 7, 24, 36, -6, 47, 22, -35, 18, -19, 
    0, 40, 21, -12, -34, 48, 6, -18, 15, 5, 
    -3, 54, 16, -52, -37, 5, 3, 20, 29, 0, 
    -36, -21, 35, 11, 48, 5, -62, -4, 25, -59, 
    57, -21, 13, 70, 11, -14, 18, 40, 16, -29, 
    -46, 53, 25, -3, -3, 4, -58, 37, 16, -39, 
    0, -26, 3, -5, -34, 40, -74, 3, -17, 63, 
    -26, -21, 14, -50, -4, 20, 24, -28, -14, 5, 
    -28, -56, 0, -67, 56, 28, -26, -24, 27, 47, 
    -34, 64, -22, 30, 39, -24, 34, 39, 9, 17, 
    35, 21, 16, 32, 44, -8, -10, 25, 47, -31, 
    26, 9, 48, 19, -13, 17, -84, 38, 17, -34, 
    -47, -56, -57, 3, 11, -53, -65, 62, -12, -28, 
    -3, -51, 43, -17, -48, 41, 4, 16, 50, 48, 
    -39, 5, 2, 29, -25, -51, 41, 57, 45, -9, 
    -38, -4, -36, -7, 22, -62, -29, 12, -16, -7, 
    -21, -33, 47, 6, 45, 23, 43, -16, 5, -4, 
    -23, -20, 38, 63, -32, -50, 0, 41, 15, -33, 
    -66, -42, -53, -19, 17, -24, -84, -31, -55, -28, 
    34, -31, 66, 1, -11, 64, 56, 15, 1, 33, 
    -5, -2, -11, -35, 24, -49, 26, 12, -20, 9, 
    26, -54, -14, -3, 21, -29, 22, -2, 10, 17, 
    13, 42, 10, -75, -11, 40, -3, -18, -21, 27, 
    48, 26, 24, -7, -28, 45, 61, -32, -37, 17, 
    -45, 3, -27, -23, -11, 14, 14, -31, 30, -34, 
    -36, -3, 48, 49, 36, 11, 40, 14, -31, -25, 
    10, -7, -47, 37, 10, 50, -1, -29, 0, -15, 
    41, -39, -17, -18, 34, -17, -53, -2, 13, 13, 
    34, 45, 13, -16, -14, -37, -22, -64, 61, -44, 
    -34, -28, 18, 49, -7, 55, 48, -20, -6, 25, 
    5, 37, -50, -2, -1, 26, -30, -59, -19, 28, 
    1, -41, -1, -10, 10, -40, -25, -16, 6, 2, 
    -2, 40, 67, -26, -18, -50, 8, -18, 39, 25, 
    9, 46, 45, 7, 36, 17, -52, 11, 4, -64, 
    -29, -53, 80, -25, -65, -34, 52, -8, 13, -32, 
    2, 44, -4, -21, -24, -33, 0, -38, -45, 47, 
    -45, 12, 43, 50, -17, -4, -53, 33, -50, -62, 
    -12, 6, -26, -13, 37, 23, -60, -37, 38, 47, 
    -47, 17, 3, -28, -51, 10, -18, -38, 9, -50, 
    -26, -42, -42, -33, 26, 13, -21, -96, 19, 3, 
    -15, -8, 26, -61, 35, -20, -3, -26, -6, 24, 
    -7, -32, -18, 24, 16, -17, -50, 11, 11, -33, 
    -52, 1, 29, -28, -53, -65, 37, -18, 25, 10, 
    27, 11, 8, 41, -79, 52, 29, 26, -15, -4, 
    -28, 6, -38, -19, 12, 39, -75, 17, 18, 28, 
    39, -48, 42, 55, 33, -31, 22, -64, -9, 24, 
    29, -36, 20, -7, -28, 21, 59, -49, 75, -54, 
    32, -41, -34, -29, -21, 28, -49, 23, 39, 4, 
    7, 22, 34, 89, 51, 30, -27, 62, -54, -46, 
    28, -41, 5, -29, 35, -43, -17, -48, -26, -27, 
    37, 3, -23, -10, 21, 3, -66, 7, -29, 51, 
    34, -18, 61, -38, -31, 16, -39, 19, -30, 5, 
    -21, 36, -18, -37, 0, 24, 15, 46, -48, 11, 
    11, 17, -2, -62, 16, 39, 27, 14, -24, 38, 
    41, -30, 34, -50, 12, -58, 41, 18, 31, -16, 
    2, 20, 11, -55, 38, -4, 17, -59, -28, 38, 
    -64, 62, -27, -55, 78, 1, -16, 18, 0, -35, 
    16, -38, 1, 25, -28, -82, -52, 56, -21, -47, 
    -50, 51, 42, -24, 11, 10, -20, -20, -7, 50, 
    11, -5, -3, -48, -19, -16, -14, -12, -57, -3, 
    -45, 12, -4, 13, 48, -23, 3, 9, 55, 46, 
    50, -6, 19, 16, -50, -54, 58, 70, 36, -16, 
    -55, -58, -30, 4, 44, 40, -82, -18, 19, -29, 
    22, -23, 31, -12, 17, -17, -29, -48, 18, -18, 
    -7, 19, -4, 8, 16, -37, 16, -16, 1, 16, 
    -15, -37, 27, -52, -29, -18, -47, 43, 35, -24, 
    -18, 40, 13, 42, -19, -27, -5, 53, -43, 39, 
    23, 44, -80, 39, 26, -52, 48, -43, 54, -13, 
    27, -7, -8, 12, -15, 40, -65, 6, -53, 38, 
    68, 8, 44, -28, 1, -27, -21, 49, 35, 11, 
    57, -22, -7, -48, -42, -4, 65, -24, -27, -4, 
    40, 16, 63, 46, 7, 40, -63, 54, 21, -14, 
    -30, 57, 24, 16, -45, -37, 1, 15, 20, 37, 
    -35, 24, -36, 29, 22, 26, 17, -4, 50, 1, 
    17, 28, 25, -36, -1, 22, -85, -40, -16, -21, 
    46, 15, -35, -16, -31, 11, 5, -29, -14, 35, 
    -43, 3, 2, -2, 63, -36, 51, -9, -1, -23, 
    6, -10, 25, -44, 15, -22, 43, -19, 6, 37, 
    5, 57, 8, -40, 19, 20, 46, 16, -38, -30, 
    -2, 50, -13, -1, -34, 48, 48, -38, -13, -26, 
    14, -7, 1, -17, -31, -56, -47, 2, -19, -25, 
    -71, -72, -41, 21, -13, -28, -31, 66, -23, 2, 
    -41, -25, -30, -9, 18, 3, -93, 81, -28, 13, 
    -30, 5, 70, 32, -52, -31, -24, 20, -18, 6, 
    29, 67, 33, -13, 3, 22, 21, -5, 18, 19, 
    65, 40, -6, -33, -41, 12, 25, 26, -14, -19, 
    6, -47, 44, -2, 0, -40, -39, 9, 45, -11, 
    -5, -2, -23, 12, -20, 27, 7, -12, 67, 55, 
    -9, -26, -2, 38, -25, -31, -46, -22, 64, 6, 
    -17, -43, 10, -15, 22, 44, -23, 8, 11, -52, 
    47, -7, 26, 3, -19, -30, 10, 25, -54, -53, 
    6, -9, 25, -11, -45, 44, 1, -21, 43, 4, 
    -17, 57, 28, 26, 38, 39, -59, 44, -57, 40, 
    4, 8, 41, -52, 15, -51, -28, -19, -15, 23, 
    34, 29, 8, -9, 41, 18, 14, -11, -27, -41, 
    -36, 15, -39, -24, -28, 0, 3, 26, 4, -46, 
    27, 40, 2, -7, 2, 8, -32, 8, 16, 11, 
    -33, -24, 42, 26, -11, -15, 6, -40, 3, -1, 
    28, -11, 70, 3, -48, 11, 0, 27, 58, 60, 
    -15, -3, -24, 46, 11, 11, 22, 21, -37, -30, 
    57, 25, 16, 20, -22, -28, 22, -20, -17, -34, 
    -7, -14, 14, -5, -60, 18, -35, -31, 15, 24, 
    16, -40, -11, -38, 41, -28, 13, -9, -6, -2, 
    58, 15, 49, 55, 39, 9, 7, -20, 23, 43, 
    46, 13, 25, -15, -36, 15, -25, -66, 33, -39, 
    -27, -33, 31, 45, 14, 56, -53, 2, -56, -18, 
    2, -1, -3, 34, -1, -77, -6, -44, 54, 34, 
    9, 45, 4, 21, 3, 6, 17, 48, -30, -22, 
    4, 38, 52, -16, 13, -22, -19, 15, -46, 15, 
    -54, -48, 0, 36, 5, -16, 24, 47, -50, 14, 
    49, 37, -18, 11, 8, -43, 3, 49, -24, -43, 
    40, -26, -9, -8, 4, 25, -30, -60, -11, 18, 
    31, -24, -36, -11, 41, 69, 37, 4, -8, -37, 
    -12, 1, 55, -38, -1, 6, -84, 19, -7, -18, 
    -5, 7, 5, 45, -23, -2, 42, -22, -39, 37, 
    6, 23, 22, 0, 11, -40, 16, -29, 30, -56, 
    -1, -27, -33, 0, -13, -12, -44, -21, -43, -58, 
    -44, -31, -1, 12, 46, -27, 3, -21, -11, 63, 
    10, -27, -10, -28, -1, -36, -3, -76, -12, 19, 
    -11, -16, 16, -7, 3, -50, -50, 35, -46, 2, 
    -19, -4, 2, -22, -6, -17, -27, -62, 35, 47, 
    -43, -27, -44, 56, 9, 50, 68, 52, 14, -9, 
    9, -48, -8, -13, -35, 29, 14, -26, 4, 4, 
    15, 75, 15, -7, 29, -34, 15, 17, 44, -43, 
    -9, 6, -9, 10, 25, 21, -61, -59, -27, 9, 
    -11, -19, 60, 28, 44, 6, -49, 2, -35, 5, 
    22, -31, -44, 8, 9, 21, 32, 29, -37, 2, 
    8, -23, -41, -8, 27, 24, 33, -63, -39, -1, 
    -61, 22, -35, 24, 46, -13, 36, 2, 32, -14, 
    27, -24, -27, -28, 74, -12, 21, -34, 20, 17, 
    0, 44, -28, -44, 15, 45, 28, -61, -40, -36, 
    -29, -11, -50, -36, 29, 1, 16, 46, 37, -34, 
    4, -56, -35, -74, -59, 6, 34, -6, 41, -19, 
    -15, 59, -5, -45, 6, -32, -12, 27, -14, 20, 
    21, 53, -51, -47, 38, 20, -5, -35, 7, -5, 
    -16, 16, -6, -19, -9, -37, -47, -23, -27, -2, 
    13, 45, 19, -16, 11, 26, -13, -26, 30, 37, 
    38, -1, -58, 5, -13, 61, 57, 38, 5, 38, 
    9, 26, 37, 33, -5, 36, 
};
const TfArray<1, int> tensor_dimension15 = { 1, { 4096 } };
const ALIGN(8) int16_t tensor_data16[256] = { 
    12913, 12913, 12913, 12913, 12913, 12913, 12913, 12913, 12913, 12913, 
    12913, 12913, 12913, 12913, 12913, 12913, 2353, 2921, 3708, 1644, 
    4949, 1537, 2410, -1038, 2949, 2225, 2445, 2403, 317, 1856, 
    -491, 4183, 12913, 12913, 12913, 12913, 12913, 12913, 12913, 12913, 
    12913, 12913, 12913, 12913, 12913, 12913, 12913, 12913, 934, 2410, 
    -144, 2218, 2126, 3367, 2772, 3112, 2523, 4566, 3069, 2850, 
    1991, 1431, 2999, 4148, 12913, 12913, 12913, 12913, 12913, 12913, 
    12913, 12913, 12913, 12913, 12913, 12913, 12913, 12913, 12913, 12913, 
    2736, 2225, 4389, 1012, 1282, 3077, 807, -499, 2360, 2197, 
    1225, 4389, 1183, 2225, 353, 3701, 12913, 12913, 12913, 12913, 
    12913, 12913, 12913, 12913, 12913, 12913, 12913, 12913, 12913, 12913, 
    12913, 12913, 3318, 3821, 3155, 629, 1778, -640, 1856, 2828, 
    1608, 3800, 1906, 3098, 1885, 1651, 2999, 2076, 12913, 12913, 
    12913, 12913, 12913, 12913, 12913, 12913, 12913, 12913, 12913, 12913, 
    12913, 12913, 12913, 12913, 154, 395, 1878, 4332, 1594, 1949, 
    2218, 629, 1530, 1055, 2764, 3481, 700, 2211, 551, 4133, 
    12913, 12913, 12913, 12913, 12913, 12913, 12913, 12913, 12913, 12913, 
    12913, 12913, 12913, 12913, 12913, 12913, 1005, 1374, 1672, 2559, 
    2367, 878, 2637, 750, 3836, 1913, 2644, 3793, 4701, 1388, 
    4169, 104, 12913, 12913, 12913, 12913, 12913, 12913, 12913, 12913, 
    12913, 12913, 12913, 12913, 12913, 12913, 12913, 12913, 2757, 438, 
    1622, 800, 3836, 3495, 2218, 686, 2431, 870, 2530, 807, 
    3218, 3169, -598, -740, 12913, 12913, 12913, 12913, 12913, 12913, 
    12913, 12913, 12913, 12913, 12913, 12913, 12913, 12913, 12913, 12913, 
    4084, 970, 1154, 1601, 2679, 1204, -910, 1488, 2062, 3233, 
    1814, 1828, 3715, 2147, 2204, 2303, 
};
const TfArray<1, int> tensor_dimension16 = { 1, { 256 } };
const ALIGN(8) int16_t tensor_data17[256] = { 
    13191, 13191, 13191, 13191, 13191, 13191, 13191, 13191, 13191, 13191, 
    13191, 13191, 13191, 13191, 13191, 13191, 2488, 3067, 3872, 1763, 
    5140, 1654, 2546, -976, 3096, 2357, 2582, 2538, 408, 1980, 
    -418, 4357, 13191, 13191, 13191, 13191, 13191, 13191, 13191, 13191, 
    13191, 13191, 13191, 13191, 13191, 13191, 13191, 13191, 1038, 2546, 
    -63, 2350, 2256, 3524, 2915, 3263, 2661, 4748, 3219, 2995, 
    2118, 1546, 3147, 4321, 13191, 13191, 13191, 13191, 13191, 13191, 
    13191, 13191, 13191, 13191, 13191, 13191, 13191, 13191, 13191, 13191, 
    2879, 2357, 4567, 1118, 1393, 3227, 908, -425, 2495, 2328, 
    1335, 4567, 1292, 2357, 444, 3864, 13191, 13191, 13191, 13191, 
    13191, 13191, 13191, 13191, 13191, 13191, 13191, 13191, 13191, 13191, 
    13191, 13191, 3473, 3987, 3306, 727, 1901, -570, 1980, 2973, 
    1727, 3966, 2031, 3248, 2009, 1770, 3147, 2205, 13191, 13191, 
    13191, 13191, 13191, 13191, 13191, 13191, 13191, 13191, 13191, 13191, 
    13191, 13191, 13191, 13191, 241, 488, 2002, 4509, 1712, 2075, 
    2350, 727, 1647, 1162, 2908, 3640, 799, 2343, 647, 4306, 
    13191, 13191, 13191, 13191, 13191, 13191, 13191, 13191, 13191, 13191, 
    13191, 13191, 13191, 13191, 13191, 13191, 1111, 1488, 1792, 2698, 
    2502, 980, 2777, 850, 4002, 2038, 2785, 3959, 4886, 1502, 
    4343, 191, 13191, 13191, 13191, 13191, 13191, 13191, 13191, 13191, 
    13191, 13191, 13191, 13191, 13191, 13191, 13191, 13191, 2901, 531, 
    1741, 901, 4002, 3654, 2350, 785, 2567, 973, 2669, 908, 
    3372, 3321, -527, -672, 13191, 13191, 13191, 13191, 13191, 13191, 
    13191, 13191, 13191, 13191, 13191, 13191, 13191, 13191, 13191, 13191, 
    4256, 1075, 1263, 1720, 2821, 1314, -846, 1604, 2190, 3386, 
    1937, 1951, 3879, 2277, 2335, 2437, 
};
const TfArray<1, int> tensor_dimension17 = { 1, { 256 } };
const ALIGN(8) int16_t tensor_data18[256] = { 
    13995, 13995, 13995, 13995, 13995, 13995, 13995, 13995, 13995, 13995, 
    13995, 13995, 13995, 13995, 13995, 13995, 1995, 2610, 3463, 1226, 
    4808, 1110, 2056, -1680, 2640, 1856, 2095, 2048, -212, 1456, 
    -1088, 3978, 13995, 13995, 13995, 13995, 13995, 13995, 13995, 13995, 
    13995, 13995, 13995, 13995, 13995, 13995, 13995, 13995, 457, 2056, 
    -711, 1849, 1749, 3094, 2448, 2817, 2179, 4393, 2771, 2533, 
    1602, 995, 2694, 3940, 13995, 13995, 13995, 13995, 13995, 13995, 
    13995, 13995, 13995, 13995, 13995, 13995, 13995, 13995, 13995, 13995, 
    2410, 1856, 4201, 542, 834, 2779, 319, -1096, 2002, 1825, 
    772, 4201, 726, 1856, -173, 3455, 13995, 13995, 13995, 13995, 
    13995, 13995, 13995, 13995, 13995, 13995, 13995, 13995, 13995, 13995, 
    13995, 13995, 3040, 3586, 2863, 126, 1372, -1250, 1456, 2510, 
    1187, 3563, 1510, 2802, 1487, 1233, 2694, 1695, 13995, 13995, 
    13995, 13995, 13995, 13995, 13995, 13995, 13995, 13995, 13995, 13995, 
    13995, 13995, 13995, 13995, -389, -127, 1479, 4139, 1172, 1556, 
    1849, 126, 1103, 588, 2440, 3217, 203, 1841, 42, 3924, 
    13995, 13995, 13995, 13995, 13995, 13995, 13995, 13995, 13995, 13995, 
    13995, 13995, 13995, 13995, 13995, 13995, 534, 934, 1257, 2218, 
    2010, 396, 2302, 257, 3601, 1518, 2310, 3555, 4539, 949, 
    3963, -442, 13995, 13995, 13995, 13995, 13995, 13995, 13995, 13995, 
    13995, 13995, 13995, 13995, 13995, 13995, 13995, 13995, 2433, -81, 
    1203, 311, 3601, 3232, 1849, 188, 2079, 388, 2187, 319, 
    2932, 2879, -1203, -1357, 13995, 13995, 13995, 13995, 13995, 13995, 
    13995, 13995, 13995, 13995, 13995, 13995, 13995, 13995, 13995, 13995, 
    3870, 495, 695, 1180, 2348, 749, -1542, 1057, 1679, 2948, 
    1410, 1426, 3471, 1772, 1833, 1941, 
};
const TfArray<1, int> tensor_dimension18 = { 1, { 256 } };
const ALIGN(8) int16_t tensor_data19[256] = { 
    14822, 14822, 14822, 14822, 14822, 14822, 14822, 14822, 14822, 14822, 
    14822, 14822, 14822, 14822, 14822, 14822, 1118, 1769, 2673, 304, 
    4098, 182, 1183, -2774, 1802, 972, 1224, 1175, -1219, 548, 
    -2147, 3219, 14822, 14822, 14822, 14822, 14822, 14822, 14822, 14822, 
    14822, 14822, 14822, 14822, 14822, 14822, 14822, 14822, -510, 1183, 
    -1748, 963, 858, 2282, 1598, 1989, 1314, 3658, 1940, 1688, 
    703, 60, 1859, 3178, 14822, 14822, 14822, 14822, 14822, 14822, 
    14822, 14822, 14822, 14822, 14822, 14822, 14822, 14822, 14822, 14822, 
    1558, 972, 3455, -421, -111, 1949, -657, -2155, 1126, 939, 
    -176, 3455, -225, 972, -1178, 2665, 14822, 14822, 14822, 14822, 
    14822, 14822, 14822, 14822, 14822, 14822, 14822, 14822, 14822, 14822, 
    14822, 14822, 2225, 2803, 2038, -860, 459, -2318, 548, 1664, 
    263, 2779, 605, 1973, 581, 312, 1859, 801, 14822, 14822, 
    14822, 14822, 14822, 14822, 14822, 14822, 14822, 14822, 14822, 14822, 
    14822, 14822, 14822, 14822, -1406, -1129, 573, 3390, 247, 654, 
    963, -860, 174, -372, 1590, 2413, -779, 955, -950, 3162, 
    14822, 14822, 14822, 14822, 14822, 14822, 14822, 14822, 14822, 14822, 
    14822, 14822, 14822, 14822, 14822, 14822, -429, -5, 336, 1354, 
    1134, -575, 1444, -722, 2820, 613, 1452, 2771, 3813, 11, 
    3202, -1463, 14822, 14822, 14822, 14822, 14822, 14822, 14822, 14822, 
    14822, 14822, 14822, 14822, 14822, 14822, 14822, 14822, 1582, -1080, 
    279, -665, 2820, 2429, 963, -795, 1208, -584, 1322, -657, 
    2111, 2054, -2269, -2432, 14822, 14822, 14822, 14822, 14822, 14822, 
    14822, 14822, 14822, 14822, 14822, 14822, 14822, 14822, 14822, 14822, 
    3105, -470, -258, 255, 1493, -201, -2627, 125, 784, 2128, 
    499, 516, 2681, 882, 947, 1061, 
};
const TfArray<1, int> tensor_dimension19 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data20[4096] = { 
    8, -42, -53, 5, -31, -4, -25, 22, -33, -5, 
    -3, -41, -44, -27, -4, -94, -2, -15, -54, 29, 
    28, 20, 17, -27, 10, -69, 26, -44, -50, 87, 
    2, 33, -6, 6, 28, -4, -2, -11, -30, 12, 
    -39, 7, -5, -61, 47, 59, -24, 36, -26, -13, 
    -53, -22, -19, -66, 19, 64, -18, -7, 38, 1, 
    -22, -22, -51, -14, 0, -30, 9, 36, 43, -37, 
    13, -7, -72, 1, -26, 7, -80, 15, -31, -6, 
    24, 8, -33, 25, 57, -3, -47, -26, -43, 1, 
    57, -34, -29, 7, 31, -3, -17, 14, 52, 57, 
    -1, 37, -53, -74, 59, 30, -7, 4, 69, -79, 
    88, 54, 25, 44, 19, 11, -72, 8, 31, -24, 
    -12, 3, 25, -31, 8, 2, -23, -7, -9, 42, 
    17, -41, 30, 43, -36, 13, 13, -15, 3, -5, 
    3, -47, -55, -4, 29, 32, -37, -37, 5, 13, 
    -21, 23, -18, -25, 18, -2, 18, 15, -42, 6, 
    -78, 42, 18, 66, 3, 41, 15, -90, 24, 29, 
    -28, 38, 47, 78, 26, 10, -22, -17, -8, -16, 
    -22, -1, -11, 52, -8, -8, -32, 41, 35, -72, 
    2, -4, 16, 12, -24, -41, 25, -37, -35, -16, 
    16, -22, -41, -6, -11, 28, 19, -47, -39, 63, 
    -13, 10, -37, 27, -56, -29, -21, -20, 16, -63, 
    -32, 12, -50, -21, 30, 21, -16, 10, -1, 26, 
    2, -19, -2, -8, -14, -60, -70, -41, -36, -17, 
    16, 5, -26, -17, 40, -16, 31, -53, 68, 37, 
    66, 23, 16, 36, -18, -3, 42, -30, -39, -51, 
    42, -23, -24, 10, -17, 1, -37, -31, -72, -63, 
    13, -25, 41, 15, -54, 29, 63, -13, -60, -31, 
    46, -81, 26, -66, -46, 90, 91, -19, 10, -11, 
    0, -49, -29, -48, -22, -14, 50, -42, 7, -24, 
    45, -8, -68, 71, 29, 51, -13, 38, -14, -18, 
    22, 33, -6, -3, -23, 21, -38, 9, -4, -59, 
    -18, 45, 46, 5, -13, -53, -4, 24, 36, 13, 
    30, 13, 74, -24, -14, 29, 1, 19, 13, 54, 
    19, 33, -9, -6, 18, -7, 50, -18, 34, 18, 
    -31, 20, 11, 3, 43, 35, 32, -68, -43, 33, 
    41, -4, -17, -5, -19, 7, 34, -21, -20, 3, 
    22, 63, -23, -44, -3, 12, 49, 9, -22, 34, 
    -3, -19, 5, -20, -31, 11, -19, -25, -37, -15, 
    -34, 43, 12, 9, 15, -16, -28, 23, -42, -32, 
    -11, -1, -25, -10, 47, -8, -39, 3, -20, 25, 
    -16, -63, -39, 16, 67, -46, 39, -1, -17, 16, 
    37, -9, 35, -31, -8, 5, 5, -8, 3, 13, 
    69, 2, 51, -8, -2, -29, -46, -1, 15, 6, 
    -48, -51, -59, -7, -10, 38, 4, -76, 29, 63, 
    13, -48, 57, -42, -62, -40, 31, -9, -64, -46, 
    28, -56, 1, 33, 14, 30, -13, 54, -2, -56, 
    -3, 11, 9, 38, 17, 19, -42, 25, -31, -21, 
    14, -3, -20, 39, -38, 30, -50, -1, 2, 5, 
    16, -26, 78, -1, -12, 6, -36, 53, -3, -3, 
    17, -43, -9, -9, 22, 1, -9, 36, -16, -3, 
    -44, -24, -6, -11, 24, 96, 20, 38, 2, -10, 
    -32, -118, 10, 22, -4, -34, 28, 11, 44, 3, 
    10, 15, 12, 3, 28, -16, 30, 36, 41, 39, 
    -6, -30, -28, 28, -2, 10, -35, 52, -4, 39, 
    -8, -19, -59, 53, -16, 55, 37, -55, -8, 28, 
    -36, -38, -15, 16, -32, 41, 7, 9, -26, 45, 
    -45, 50, -1, -8, -62, 12, -33, -17, 5, -30, 
    -18, -17, 30, -4, -18, -17, 46, -36, 24, 9, 
    14, 14, 52, 9, 0, 28, -10, 24, 47, 47, 
    -39, -7, 10, -5, -4, 9, -21, -5, -23, 13, 
    1, 1, 47, 35, 38, 7, -11, 12, 10, 15, 
    43, 19, 28, 18, 14, -27, 43, 33, 20, -26, 
    7, -1, -35, 12, 28, 0, 4, -23, -33, -4, 
    24, 20, -4, -1, 15, 63, -28, 27, -54, 38, 
    5, 33, 62, 11, 21, 9, 17, 5, 19, 10, 
    35, 44, 38, -24, 18, -38, -19, -25, -30, 27, 
    18, 30, -31, 30, 4, -35, -30, 29, 16, 39, 
    -18, 9, -51, 7, -28, 41, -55, -45, -40, -63, 
    -13, 39, 22, 6, 40, -32, 42, -33, 47, -13, 
    8, 5, 36, -15, 53, -7, -3, 21, 4, 39, 
    41, -12, 19, 17, -23, 15, 0, -22, -19, 0, 
    -4, -35, -42, 16, 7, 4, -70, -31, -11, -1, 
    22, -50, 0, 25, 58, -40, 0, 9, -31, -19, 
    -2, -29, 60, 51, 6, 2, -73, 6, 25, -33, 
    -40, -12, 63, 3, -49, 19, 48, -11, 9, 0, 
    -44, -54, -8, -8, -7, 40, -65, -26, -42, -47, 
    10, -3, -43, 35, 34, 57, 42, 15, -63, 16, 
    -56, -5, 44, -12, 28, 22, -37, -35, 23, 14, 
    -59, 3, 13, 14, 3, -22, -20, 6, 45, -62, 
    -23, 9, -64, -3, 35, 14, 4, 75, 15, 30, 
    -22, -3, 14, -14, 16, -41, 1, 7, -36, -18, 
    12, -13, -27, -37, -52, 46, 13, -91, -56, 47, 
    -7, 26, 27, 39, -32, 27, 14, 51, -70, -7, 
    15, 46, -13, 25, -23, -8, -21, -23, -23, 17, 
    -34, 41, 12, -38, -5, 21, 17, -27, -46, -19, 
    4, -46, 28, 25, 45, -25, -13, 18, -9, -2, 
    27, 2, 42, 73, -42, 5, 40, -18, 17, 19, 
    14, -14, -26, 13, -44, 7, 44, -65, -43, -5, 
    -4, -65, 8, 16, 10, 62, 8, 32, 11, 38, 
    21, -36, 42, -15, -32, 11, -30, -60, 8, -57, 
    35, -11, 28, 42, -61, 4, -58, -16, -23, 34, 
    16, 12, -18, -8, 33, -32, -19, 35, -53, -9, 
    -3, 14, 19, 32, 22, 30, 20, -24, 58, 4, 
    17, 28, 78, 54, -10, -45, -46, 36, -20, 29, 
    49, 0, -10, 38, -4, 40, 11, 9, -7, -4, 
    13, 14, 3, 55, -25, 60, -52, 11, -15, -28, 
    33, 9, 15, -32, 38, -9, 39, -30, 2, 58, 
    42, -3, -46, -14, 26, -33, -73, 30, 6, -32, 
    -20, 28, -6, -29, -46, 12, 18, 6, 39, 33, 
    -30, -12, -62, 41, -20, -12, 2, -35, 14, -9, 
    -7, -8, 12, -41, -48, -58, 7, -2, 22, -40, 
    -13, 0, 16, -44, 61, -30, -43, 15, -2, 2, 
    -34, 39, -20, 30, -36, -30, -90, -17, -60, -53, 
    -57, 46, -27, 16, 68, -39, -34, -53, 8, 14, 
    -17, -77, -51, 46, 34, -56, 16, -23, 0, 1, 
    28, -18, -17, 15, -4, 14, -13, -15, 47, 34, 
    12, 31, 20, 8, 30, 7, -44, 49, 59, 3, 
    -21, -8, 15, -9, -12, -26, -45, -18, -25, -31, 
    -42, -10, 34, 11, 39, -68, -7, 49, 28, 5, 
    -5, 13, 0, -54, -41, 10, 2, -11, -11, -30, 
    4, -21, -2, -49, -23, 11, -6, 109, 35, -23, 
    3, 32, 22, 7, -77, -1, 43, -56, 43, 57, 
    67, 43, -33, 13, -2, 87, 17, -28, 62, -9, 
    -33, 28, 53, -2, 1, -3, -50, -13, 21, -8, 
    20, 43, 1, -5, -1, -15, 29, 23, -15, -19, 
    9, -13, 52, -14, -41, -16, -10, -21, 26, 8, 
    68, 26, -16, -25, -4, 24, 41, 37, -3, -2, 
    -20, 25, -28, 15, -35, -4, 19, -4, -68, 55, 
    -32, -1, -7, -12, -28, 9, -15, 35, -24, 31, 
    -25, -4, 28, -26, 23, 7, -41, -67, -55, 2, 
    6, -49, 10, 34, -50, 2, -7, -6, 20, -27, 
    2, 6, -19, 52, -7, 24, -13, 3, -4, 69, 
    10, -3, -19, -7, -14, 15, 30, 8, 49, -71, 
    27, -11, 16, -40, -19, -18, -53, -6, 14, 0, 
    -32, -8, 51, -19, -29, -37, 86, -30, -6, -13, 
    -1, 2, -9, 39, -26, 28, -5, 76, 25, -19, 
    -21, 2, 24, 17, 19, 31, 27, 5, -29, 39, 
    31, 68, 32, -33, -16, 37, -1, 42, 44, -34, 
    6, -3, -22, -61, -17, -30, -39, -13, -2, -20, 
    0, -6, 0, 9, 37, -86, 1, -50, -40, 37, 
    26, 1, 11, 21, 10, 4, 32, -10, 11, -14, 
    59, 43, -2, -36, -34, 53, -1, -5, -63, -29, 
    -2, 63, 52, -15, 66, -7, 17, -30, -28, -8, 
    -79, 7, 4, -2, -4, 16, -33, -61, 9, 64, 
    25, 24, -35, 34, 25, -4, -16, 25, -31, 18, 
    -51, 10, 49, 41, 1, 37, 31, -29, -21, 24, 
    -49, 10, 10, -75, 12, -55, 45, -13, 0, -6, 
    17, -8, -77, 23, 5, 20, -9, -5, 0, -64, 
    -29, -31, 9, 107, -17, 51, -19, -8, -1, -22, 
    67, -38, 8, 43, 12, 1, 10, -50, -6, 2, 
    -30, 20, 23, -14, -9, 43, 55, 21, -20, -12, 
    -127, 15, -8, -14, -44, -16, -15, 41, 16, -6, 
    -3, 21, -74, 12, 28, 0, -8, -25, 18, -24, 
    26, 14, -5, 24, 6, -11, 28, 76, 23, 6, 
    -52, 29, -10, -41, 59, 14, -9, 0, -28, 19, 
    -28, 43, -29, 24, -30, -2, 37, -38, -31, -5, 
    54, -65, 19, 13, -40, 9, 10, 18, -17, 32, 
    3, 40, -46, -22, -1, 1, 7, 24, -61, -32, 
    12, -12, 48, 52, -69, 2, 9, -68, 42, 48, 
    -23, 46, 1, -65, -57, 23, -3, 19, -20, -18, 
    15, 37, -35, 55, 8, 21, -1, -74, -2, 10, 
    8, 35, 1, 15, -37, -22, -4, -17, 22, -47, 
    -4, 18, -39, -9, 40, 25, -34, 24, -43, 15, 
    -21, 11, 87, 64, -34, 24, 20, 0, 22, -20, 
    63, 14, -12, -20, 56, -90, 72, 31, 29, 13, 
    -27, -27, -120, -11, 38, 13, -16, 16, -46, -20, 
    -27, 30, 42, 21, -36, 47, -1, 22, 12, 40, 
    32, -29, -29, -2, 30, -68, 80, -36, -71, 37, 
    28, 40, -17, 43, -2, 19, 6, -25, 0, 37, 
    -68, -18, -29, -27, -28, 14, 24, -2, 17, -67, 
    51, -2, 23, 16, 32, 21, -32, -36, -15, -17, 
    33, 11, 68, -18, -86, 32, -40, 2, -5, -7, 
    53, -13, -18, 17, -60, 52, 27, 9, 11, -22, 
    -37, 1, -6, 23, -18, 37, 31, 0, 12, 16, 
    -41, -53, -25, -2, 11, 49, 49, 4, 4, 34, 
    5, -9, -10, 13, 11, 16, -22, -27, -2, 4, 
    37, 2, -52, 26, 45, 29, -1, -40, 21, 14, 
    0, -4, -24, 15, -22, -50, -18, -17, -7, -5, 
    29, -17, -32, -20, 51, -49, -2, -24, 5, 3, 
    48, 9, -2, 62, -12, 4, 28, -3, -51, 58, 
    -30, -23, -8, 63, -12, -18, 37, 17, -50, -64, 
    34, -35, 37, -58, -71, 86, -16, -44, -6, 26, 
    -39, 15, -38, -9, -32, 48, 4, -34, 5, 7, 
    -6, 21, -16, -8, -58, 10, 49, 26, 4, -19, 
    -36, 11, -62, -42, 7, -44, 56, 29, 56, -15, 
    -14, 18, 28, 35, 3, 13, 32, 33, -10, 72, 
    -39, 12, -21, 17, 13, 34, 19, 55, 25, -6, 
    37, -10, 21, 43, -18, -30, 20, 40, 22, -38, 
    -16, 32, 41, -77, -54, 24, -7, -38, -33, 37, 
    29, 22, -40, 24, -21, 8, 20, -74, -10, 16, 
    -27, 33, -5, 1, -17, -5, -9, -46, 31, -8, 
    -8, 48, -1, -3, 66, -12, -47, -20, 35, -24, 
    -41, 41, -39, 21, -1, -31, -25, -28, -13, -40, 
    -32, 9, -63, 32, 11, -42, -49, -51, 4, -21, 
    56, -33, 2, 34, -2, 18, 29, -17, 31, 13, 
    52, -31, -22, 1, -23, 69, -9, -7, -60, -19, 
    -50, -57, 6, 45, -26, 63, -54, -2, -39, 18, 
    49, -1, 12, -47, -3, 5, 1, -62, -57, -65, 
    15, -30, -35, 33, 3, 33, 23, -70, 12, 89, 
    52, -3, -23, 29, 12, -52, -18, 25, -29, 22, 
    22, 45, -47, -48, -45, 7, -21, 4, -78, 2, 
    4, -41, -38, -19, 48, 42, 39, 4, -60, 63, 
    -31, 1, -18, -1, -1, -7, -12, 27, 22, -50, 
    -11, -13, 27, 43, -72, -7, -45, 8, -34, -8, 
    25, 21, -13, -24, 9, 1, -40, 20, 58, 13, 
    25, -23, -9, 0, 50, 5, 26, 37, -59, -41, 
    50, -16, -33, -27, 58, -4, 20, 32, -28, 19, 
    10, -38, -36, 5, 45, -12, 16, -20, 26, -23, 
    -24, 9, 49, -37, -26, -27, -6, -2, -17, 38, 
    26, -1, -6, -1, -27, -49, 10, -8, 46, 12, 
    -25, 31, -39, 41, 4, 17, 4, 48, 15, -37, 
    20, 8, 21, 38, 7, 43, 0, -19, 3, -9, 
    33, -8, -12, -32, 1, -52, 19, 77, 11, -6, 
    6, 2, 26, 6, 52, -13, 19, -24, -54, -3, 
    -37, -4, -11, 84, 37, 31, 18, 22, -33, 17, 
    -20, 14, 15, -29, -14, 24, 13, -2, -49, 52, 
    3, -54, -61, 5, -11, -35, -22, 1, -8, 47, 
    -23, -16, 28, -3, -14, -50, -10, -30, 1, -4, 
    37, -34, 58, 42, 48, 77, 21, 48, 4, -2, 
    4, -2, 23, 5, 17, 12, -33, 40, 41, -33, 
    -37, 110, -1, 4, -20, -15, 74, -7, -56, 25, 
    -6, 21, -15, 43, -30, -87, -2, -20, 4, 51, 
    -2, -1, 16, 1, -26, -16, 46, 25, 48, 34, 
    37, 10, 30, -4, -36, 29, 19, -3, 17, -13, 
    -17, -15, 71, -53, 56, 64, -39, -1, 24, 24, 
    -31, -37, 24, -43, 48, 41, 62, 8, -40, 10, 
    -58, 9, 59, -65, 7, 38, -10, -75, 15, -13, 
    6, 34, 23, 5, -12, -33, 47, -33, 14, -1, 
    -47, -2, -6, -11, -3, 15, -28, 42, -15, 37, 
    25, 5, -31, -12, 9, 15, -2, 1, 3, 44, 
    22, -45, -51, 11, 3, 41, -38, 23, 40, 66, 
    32, 53, 47, -14, -12, -29, 54, -73, -23, -15, 
    0, 35, -14, 1, 4, 41, 0, -52, -14, 22, 
    44, 1, 35, -46, -7, 5, -1, -12, 12, -37, 
    -4, 14, -8, -3, 17, 41, -33, 34, -40, 24, 
    -29, 12, 11, -5, -10, 14, -42, -12, -28, -13, 
    -50, 43, 12, -20, -35, -15, 46, -6, -17, -32, 
    12, -16, -56, -81, 28, -23, 21, -12, 22, -68, 
    -1, 24, 3, 6, -46, -47, -22, -1, -1, -50, 
    18, -21, -2, -27, -7, 20, 50, -19, 15, -32, 
    1, 40, 19, -1, -60, -52, -59, 16, -4, -91, 
    -64, 60, 12, -6, -38, -29, -36, -9, 35, -63, 
    -13, 21, -8, 15, 90, -36, 23, -20, -19, 34, 
    -2, 16, -27, -43, -1, -25, 31, 9, -19, -35, 
    20, 61, 14, -18, 3, -27, -23, 20, 46, 32, 
    3, -5, 2, -2, -48, 8, 12, 65, -18, -51, 
    20, -74, 34, 19, 11, 12, -21, -28, -6, 47, 
    55, 12, 2, -9, -9, 15, -25, -14, 49, 14, 
    -5, 37, 35, -12, 20, -25, 8, -5, 29, -3, 
    -8, -11, -46, -30, 14, 10, 9, 11, 28, 69, 
    -56, 12, -77, 0, -74, -46, 35, 48, -68, -9, 
    27, -4, -18, -49, -8, 27, 15, -69, 18, 111, 
    35, -10, -73, 1, 65, 18, -4, 3, 21, -28, 
    -11, 1, 17, 7, 75, 19, -25, 3, -53, -27, 
    -19, -44, -101, 58, 33, -24, -33, 28, -18, -2, 
    -7, -58, 2, 40, 7, 23, -74, -67, -20, -21, 
    0, 26, -11, 23, 37, -5, -40, 22, 16, -49, 
    -18, 6, -87, -9, 24, 4, -68, -24, 25, -24, 
    11, 5, -3, -25, -6, -80, -2, 27, 0, 30, 
    19, -76, 1, -54, 23, 6, 6, 39, 35, -3, 
    -6, 85, -14, -11, 6, -1, -13, 32, -58, -3, 
    50, 1, -5, 35, 0, -47, -7, -14, 18, 20, 
    38, -14, -2, -18, 39, -43, -26, -41, -84, -19, 
    1, 4, 35, -29, 9, 63, -6, 24, 62, -12, 
    -4, -53, 48, -5, 26, -35, -42, 15, 0, -49, 
    -46, 32, -16, 25, 2, -20, -4, 22, -18, -21, 
    11, 0, 52, 18, 4, 17, -29, -22, 0, 23, 
    -7, -32, 53, -2, -34, -49, -7, -29, 32, -37, 
    -18, -86, 59, 1, -59, -19, 11, -29, -44, -17, 
    5, -62, -45, 4, -45, -15, -69, 6, 41, 28, 
    -19, 29, 14, -68, 30, -29, 23, -22, 32, 9, 
    11, 28, -68, 3, 19, 27, 0, 11, 40, 0, 
    -37, 47, 3, 7, -36, -56, -42, -41, -58, -66, 
    21, 10, -49, 19, 35, -51, -36, -65, 59, -36, 
    20, 21, -15, -44, 34, -29, 1, 19, -32, 33, 
    -21, 34, 22, -27, 8, -53, -12, 49, 27, 13, 
    -1, -3, -10, -13, -6, -30, -30, 8, 8, -11, 
    -28, 15, 4, -28, 6, -2, -2, 74, -56, 33, 
    3, 9, 30, 59, 31, -52, -18, 51, 24, 2, 
    -20, 6, 25, -26, 26, -14, -15, -31, -18, -36, 
    13, -26, -45, 1, -32, 4, -20, 15, -3, -46, 
    -5, -57, -73, 18, 5, -6, 6, -38, 40, -40, 
    -75, -17, -9, 15, -9, -12, 18, 31, 36, 28, 
    -30, -32, 23, -33, 63, 2, -1, -23, -50, 36, 
    -11, -10, -19, -12, 6, -16, 6, -13, -4, 20, 
    -60, -42, -13, -23, -23, -4, 20, 53, 32, -10, 
    -8, -19, -28, 23, 40, -26, -21, -16, -58, 26, 
    -24, 21, 19, 1, 27, -38, -8, 19, 18, 45, 
    31, 38, 35, -27, 34, -18, 21, 5, -21, 1, 
    -75, 52, 22, 15, 50, -17, -41, -43, -51, 3, 
    17, -4, -19, 12, -5, 21, 25, -31, -32, 18, 
    30, -11, 5, 31, 44, -59, 12, -30, -9, 2, 
    -34, -4, 20, 13, 20, 10, 15, 3, 60, 21, 
    -34, -39, -24, -92, 13, -55, 47, 16, -10, -46, 
    47, -7, 3, -11, 29, -36, -34, 31, -1, 21, 
    -69, -16, -2, -42, 14, 0, 18, 1, 39, -34, 
    -36, -29, -67, 15, -6, -7, 6, 58, 7, 6, 
    -57, 16, 14, 3, -21, -35, -27, 12, -38, -2, 
    33, 46, 42, -8, 59, -66, -8, 5, 39, 61, 
    -1, 48, 14, -13, 27, -31, -13, 8, -18, 17, 
    -37, 2, 53, -16, 75, -9, 59, -15, -23, 73, 
    31, 20, -6, -49, -31, 18, -75, -3, -27, 25, 
    -39, 0, -113, -23, -80, -48, 39, -59, -10, 41, 
    8, 27, -8, -39, -18, 8, 3, -21, 22, -16, 
    -3, -6, 47, -38, -33, -63, -42, 13, -21, -24, 
    0, 10, 34, -12, 40, 29, 17, -19, 33, -3, 
    -3, -69, 4, 29, 5, -44, -28, -33, -6, -4, 
    -53, 58, -52, 37, -59, 84, 14, -10, -32, -8, 
    108, 26, 7, -44, -13, -60, -10, -4, -16, -35, 
    -60, -4, 8, 67, 45, -84, -29, 16, 6, -20, 
    -10, -47, 23, 0, 33, -9, -8, 27, -35, 42, 
    -38, 51, 17, -6, 30, -49, -10, 0, 35, -19, 
    52, 24, 24, 34, -45, -45, 5, 24, -16, -15, 
    5, 13, -35, -19, -17, 42, 67, -39, 30, 3, 
    53, -26, -1, 7, 52, 2, -2, -30, 22, 28, 
    -30, 6, 13, -6, -31, -43, 32, -41, 4, -10, 
    -1, 5, 46, -62, -46, 22, -37, -9, 33, 11, 
    -18, 21, -13, 24, 10, -35, -3, -77, 3, -52, 
    47, -20, -38, -23, -6, 30, -30, 9, 29, -14, 
    -2, 51, -44, -9, 5, -57, 25, 30, 40, 9, 
    46, -10, 40, 16, 5, -32, 55, -7, 28, -19, 
    38, 26, 25, 43, 7, -53, 24, 57, 13, -22, 
    -7, -23, -14, -14, -14, 66, 70, -54, -25, -53, 
    10, -37, -36, 20, 5, 58, -41, -20, -8, 30, 
    -54, -8, -31, 29, -9, -24, 42, 34, -18, -15, 
    8, 6, 4, 23, -65, 7, 32, -30, -11, -41, 
    -15, 30, 1, -6, 1, -98, -6, 13, 27, 12, 
    35, 19, 37, 58, -16, -12, 45, -39, -33, 1, 
    39, 6, 6, 13, -33, -2, 11, -49, -77, 71, 
    11, -36, -10, -12, 23, -16, -28, -6, 9, 0, 
    25, -12, -13, -18, -30, -47, 21, 21, 14, 38, 
    -14, -27, -99, -13, 127, 40, -12, -22, -28, -21, 
    40, -12, -38, 1, -30, -9, 5, 13, -40, 57, 
    -9, -18, 34, 34, 89, 15, 14, 48, -28, -35, 
    41, -83, 76, -30, -16, -25, -10, -12, 16, -50, 
    18, -10, 23, 49, 6, -10, -11, 7, 10, 14, 
    -38, 23, -6, 52, 8, -27, -82, 31, -28, -13, 
    65, 31, -14, -9, -57, -31, -45, -1, 11, -74, 
    19, -12, -54, 11, 9, -100, 45, -54, 49, 21, 
    24, -22, -77, -49, 20, 21, -6, -10, -85, 20, 
    -82, -83, 54, 30, -20, 26, 99, -19, -27, -1, 
    43, 7, -3, -41, -3, 14, 38, -42, 5, 35, 
    5, -1, -19, 0, -45, 53, 27, -23, -51, 23, 
    -70, -31, 1, -35, 20, 14, -19, 31, 22, 3, 
    -82, 57, 34, 5, -10, -35, -84, 58, 66, -24, 
    41, 23, 37, -31, 15, 36, 38, -27, 56, -22, 
    32, 45, 28, 8, 6, -2, 5, -13, -17, -25, 
    -3, -46, 49, -38, -25, 76, -8, -39, 37, -21, 
    19, -12, 3, -68, -18, 23, -6, -20, -24, -16, 
    50, 81, -71, -53, -61, -36, -59, -44, -16, 46, 
    -36, 64, 0, -6, 3, -16, 35, 46, 20, -28, 
    -41, 5, 37, -46, 13, 13, 36, -33, -8, -82, 
    -5, -5, 32, 3, 16, -14, -3, -18, 0, -7, 
    -12, 19, -18, 5, -4, -41, -22, -10, 40, 37, 
    30, 29, 10, 23, -47, -21, 37, -26, 68, -11, 
    -12, 42, -19, -13, -51, -8, -62, -23, -60, 13, 
    4, 3, -23, 35, -15, -29, 19, -24, -2, 66, 
    -17, 5, 11, -42, 36, -5, 39, -85, -62, -16, 
    29, 12, -19, -40, 22, -10, 14, 27, 5, -7, 
    31, -8, 15, 76, -3, -59, -24, -19, -35, -36, 
    24, -32, -9, -10, -2, -22, 3, 9, 5, -33, 
    20, -19, 61, -8, -23, 15, -51, 31, -19, 16, 
    15, 21, -3, 16, -31, 13, 5, 25, -32, 7, 
    1, 13, 6, -35, -31, -1, 14, 64, 10, -33, 
    5, -18, -28, -4, 52, 0, -52, -75, 29, -25, 
    -10, -14, 37, 53, 1, 6, 5, 36, -33, -35, 
    15, -24, -81, 21, -6, 12, -4, -44, -4, 42, 
    9, -75, -119, 31, -29, -28, -41, 11, -3, -13, 
    22, 12, -32, -12, 25, 27, 35, 30, 47, -62, 
    10, -33, 8, -62, 66, 17, 2, -40, -23, -27, 
    -32, 46, -5, -24, 86, 6, 13, -10, 1, 37, 
    -21, -20, -5, 48, -40, 3, 5, -22, -2, 32, 
    -26, -13, -6, -38, -33, -46, 0, 9, 40, 52, 
    -48, -34, 36, -48, -37, 21, 19, -38, -19, -13, 
    1, 10, 10, 21, -24, -45, 1, -3, -22, 9, 
    -46, 33, -15, -20, -65, -56, -1, 7, 59, 27, 
    -22, -55, -31, -42, 58, -52, 26, 21, 82, -16, 
    -14, -20, -37, -53, 5, 22, 7, 51, 6, 7, 
    -24, 14, -57, 28, 7, -36, -45, 1, -46, 4, 
    77, -17, -21, -42, -4, -23, -11, -68, -24, 40, 
    22, 8, 1, 71, -40, -34, -14, -25, -24, -16, 
    23, -19, -8, 3, -17, 54, 34, 6, -29, 18, 
    -37, 4, 30, 29, -48, -12, 19, -3, 29, -52, 
    -41, 52, 48, -40, -85, -72, -43, -22, -14, -28, 
    -9, 1, 33, 6, 5, 33, -28, 0, 13, 27, 
    -26, -36, -28, -30, -15, -3, 29, -38, 36, -58, 
    -31, -83, -15, 1, -11, -51, 22, -59, -39, 57, 
    -14, -19, -1, 41, 4, 71, 6, 7, 10, 2, 
    -9, -7, -34, -9, -48, 30, -32, -3, 13, -53, 
    -45, 15, 16, -79, -5, 48, 44, -57, -61, -70, 
    4, -30, 29, -7, 9, 33, -70, 24, -23, -49, 
    -33, -19, 11, -16, 20, 21, 13, -28, -9, -2, 
    0, 2, -10, -39, -11, 31, 40, 5, 83, -56, 
    28, -89, -6, -1, 67, 48, 16, -19, 17, 7, 
    -4, 11, 5, 6, -4, -5, -39, -1, -37, -11, 
    -12, 18, -5, -1, -23, 12, 49, 17, -43, 30, 
    -32, 13, 4, 21, -1, 22, 15, 13, -5, 49, 
    -25, 12, -1, 42, -34, -42, 10, 15, -59, 11, 
    -18, 31, 46, -23, 16, -31, -32, -11, 7, -37, 
    24, 8, 6, 27, 2, 1, -14, -73, 57, -64, 
    -32, -10, -18, 18, -18, 8, -40, 37, -39, -17, 
    -11, 47, 3, 46, -24, -32, -37, -30, 21, -70, 
    7, -2, -74, 4, 35, -16, 24, -30, 8, -20, 
    -3, 52, 34, -24, -24, 54, -49, 31, -14, -21, 
    -28, -24, 14, -55, -18, -21, -1, -8, -25, -37, 
    -31, -62, -15, -25, -54, 32, -33, -55, 18, 1, 
    21, -20, 31, 7, 27, 26, -4, 18, -8, -5, 
    -22, 69, -16, -19, 60, 16, 37, 15, -42, -50, 
    -23, -13, -11, 11, 24, 52, -45, 13, 50, -35, 
    -1, -70, -22, 17, -53, -8, 94, 24, -13, 31, 
    -10, 38, -34, 70, 47, -6, 1, 17, -19, -7, 
    40, 12, 6, -71, -21, -34, 9, 37, 37, 17, 
    21, -65, -4, -36, 37, 25, -1, -6, -33, 16, 
    -2, 50, 35, 34, 6, -59, 31, 18, -37, 30, 
    17, -32, -45, -10, 69, -33, 10, -20, -6, 16, 
    -17, 5, -56, -40, -43, 14, 1, -33, -13, -4, 
    15, 0, 1, 36, 10, 36, -30, -89, 20, 36, 
    -17, 24, 64, -12, 25, 5, -16, 39, -3, -1, 
    36, -58, -3, -6, 37, 30, 
};
const TfArray<1, int> tensor_dimension20 = { 1, { 4096 } };
const ALIGN(8) int16_t tensor_data21[256] = { 
    16516, 16516, 16516, 16516, 16516, 16516, 16516, 16516, 16516, 16516, 
    16516, 16516, 16516, 16516, 16516, 16516, 512, 512, 512, 512, 
    512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 
    512, 512, 16516, 16516, 16516, 16516, 16516, 16516, 16516, 16516, 
    16516, 16516, 16516, 16516, 16516, 16516, 16516, 16516, 512, 512, 
    512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 
    512, 512, 512, 512, 16516, 16516, 16516, 16516, 16516, 16516, 
    16516, 16516, 16516, 16516, 16516, 16516, 16516, 16516, 16516, 16516, 
    512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 
    512, 512, 512, 512, 512, 512, 16516, 16516, 16516, 16516, 
    16516, 16516, 16516, 16516, 16516, 16516, 16516, 16516, 16516, 16516, 
    16516, 16516, 512, 512, 512, 512, 512, 512, 512, 512, 
    512, 512, 512, 512, 512, 512, 512, 512, 16516, 16516, 
    16516, 16516, 16516, 16516, 16516, 16516, 16516, 16516, 16516, 16516, 
    16516, 16516, 16516, 16516, 512, 512, 512, 512, 512, 512, 
    512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 
    16516, 16516, 16516, 16516, 16516, 16516, 16516, 16516, 16516, 16516, 
    16516, 16516, 16516, 16516, 16516, 16516, 512, 512, 512, 512, 
    512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 
    512, 512, 16516, 16516, 16516, 16516, 16516, 16516, 16516, 16516, 
    16516, 16516, 16516, 16516, 16516, 16516, 16516, 16516, 512, 512, 
    512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 
    512, 512, 512, 512, 16516, 16516, 16516, 16516, 16516, 16516, 
    16516, 16516, 16516, 16516, 16516, 16516, 16516, 16516, 16516, 16516, 
    512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 
    512, 512, 512, 512, 512, 512, 
};
const TfArray<1, int> tensor_dimension21 = { 1, { 256 } };
const ALIGN(8) int16_t tensor_data22[256] = { 
    14664, 14664, 14664, 14664, 14664, 14664, 14664, 14664, 14664, 14664, 
    14664, 14664, 14664, 14664, 14664, 14664, -1024, -1024, -1024, -1024, 
    -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, 
    -1024, -1024, 14664, 14664, 14664, 14664, 14664, 14664, 14664, 14664, 
    14664, 14664, 14664, 14664, 14664, 14664, 14664, 14664, -1024, -1024, 
    -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, 
    -1024, -1024, -1024, -1024, 14664, 14664, 14664, 14664, 14664, 14664, 
    14664, 14664, 14664, 14664, 14664, 14664, 14664, 14664, 14664, 14664, 
    -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, 
    -1024, -1024, -1024, -1024, -1024, -1024, 14664, 14664, 14664, 14664, 
    14664, 14664, 14664, 14664, 14664, 14664, 14664, 14664, 14664, 14664, 
    14664, 14664, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, 
    -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, 14664, 14664, 
    14664, 14664, 14664, 14664, 14664, 14664, 14664, 14664, 14664, 14664, 
    14664, 14664, 14664, 14664, -1024, -1024, -1024, -1024, -1024, -1024, 
    -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, 
    14664, 14664, 14664, 14664, 14664, 14664, 14664, 14664, 14664, 14664, 
    14664, 14664, 14664, 14664, 14664, 14664, -1024, -1024, -1024, -1024, 
    -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, 
    -1024, -1024, 14664, 14664, 14664, 14664, 14664, 14664, 14664, 14664, 
    14664, 14664, 14664, 14664, 14664, 14664, 14664, 14664, -1024, -1024, 
    -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, 
    -1024, -1024, -1024, -1024, 14664, 14664, 14664, 14664, 14664, 14664, 
    14664, 14664, 14664, 14664, 14664, 14664, 14664, 14664, 14664, 14664, 
    -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, -1024, 
    -1024, -1024, -1024, -1024, -1024, -1024, 
};
const TfArray<1, int> tensor_dimension22 = { 1, { 256 } };
const ALIGN(8) int16_t tensor_data23[256] = { 
    14891, 14891, 14891, 14891, 14891, 14891, 14891, 14891, 14891, 14891, 
    14891, 14891, 14891, 14891, 14891, 14891, -1280, -1280, -1280, -1280, 
    -1280, -1280, -1280, -1280, -1280, -1280, -1280, -1280, -1280, -1280, 
    -1280, -1280, 14891, 14891, 14891, 14891, 14891, 14891, 14891, 14891, 
    14891, 14891, 14891, 14891, 14891, 14891, 14891, 14891, -1280, -1280, 
    -1280, -1280, -1280, -1280, -1280, -1280, -1280, -1280, -1280, -1280, 
    -1280, -1280, -1280, -1280, 14891, 14891, 14891, 14891, 14891, 14891, 
    14891, 14891, 14891, 14891, 14891, 14891, 14891, 14891, 14891, 14891, 
    -1280, -1280, -1280, -1280, -1280, -1280, -1280, -1280, -1280, -1280, 
    -1280, -1280, -1280, -1280, -1280, -1280, 14891, 14891, 14891, 14891, 
    14891, 14891, 14891, 14891, 14891, 14891, 14891, 14891, 14891, 14891, 
    14891, 14891, -1280, -1280, -1280, -1280, -1280, -1280, -1280, -1280, 
    -1280, -1280, -1280, -1280, -1280, -1280, -1280, -1280, 14891, 14891, 
    14891, 14891, 14891, 14891, 14891, 14891, 14891, 14891, 14891, 14891, 
    14891, 14891, 14891, 14891, -1280, -1280, -1280, -1280, -1280, -1280, 
    -1280, -1280, -1280, -1280, -1280, -1280, -1280, -1280, -1280, -1280, 
    14891, 14891, 14891, 14891, 14891, 14891, 14891, 14891, 14891, 14891, 
    14891, 14891, 14891, 14891, 14891, 14891, -1280, -1280, -1280, -1280, 
    -1280, -1280, -1280, -1280, -1280, -1280, -1280, -1280, -1280, -1280, 
    -1280, -1280, 14891, 14891, 14891, 14891, 14891, 14891, 14891, 14891, 
    14891, 14891, 14891, 14891, 14891, 14891, 14891, 14891, -1280, -1280, 
    -1280, -1280, -1280, -1280, -1280, -1280, -1280, -1280, -1280, -1280, 
    -1280, -1280, -1280, -1280, 14891, 14891, 14891, 14891, 14891, 14891, 
    14891, 14891, 14891, 14891, 14891, 14891, 14891, 14891, 14891, 14891, 
    -1280, -1280, -1280, -1280, -1280, -1280, -1280, -1280, -1280, -1280, 
    -1280, -1280, -1280, -1280, -1280, -1280, 
};
const TfArray<1, int> tensor_dimension23 = { 1, { 256 } };
const ALIGN(8) int16_t tensor_data24[256] = { 
    15196, 15196, 15196, 15196, 15196, 15196, 15196, 15196, 15196, 15196, 
    15196, 15196, 15196, 15196, 15196, 15196, -1408, -1408, -1408, -1408, 
    -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408, 
    -1408, -1408, 15196, 15196, 15196, 15196, 15196, 15196, 15196, 15196, 
    15196, 15196, 15196, 15196, 15196, 15196, 15196, 15196, -1408, -1408, 
    -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408, 
    -1408, -1408, -1408, -1408, 15196, 15196, 15196, 15196, 15196, 15196, 
    15196, 15196, 15196, 15196, 15196, 15196, 15196, 15196, 15196, 15196, 
    -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408, 
    -1408, -1408, -1408, -1408, -1408, -1408, 15196, 15196, 15196, 15196, 
    15196, 15196, 15196, 15196, 15196, 15196, 15196, 15196, 15196, 15196, 
    15196, 15196, -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408, 
    -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408, 15196, 15196, 
    15196, 15196, 15196, 15196, 15196, 15196, 15196, 15196, 15196, 15196, 
    15196, 15196, 15196, 15196, -1408, -1408, -1408, -1408, -1408, -1408, 
    -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408, 
    15196, 15196, 15196, 15196, 15196, 15196, 15196, 15196, 15196, 15196, 
    15196, 15196, 15196, 15196, 15196, 15196, -1408, -1408, -1408, -1408, 
    -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408, 
    -1408, -1408, 15196, 15196, 15196, 15196, 15196, 15196, 15196, 15196, 
    15196, 15196, 15196, 15196, 15196, 15196, 15196, 15196, -1408, -1408, 
    -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408, 
    -1408, -1408, -1408, -1408, 15196, 15196, 15196, 15196, 15196, 15196, 
    15196, 15196, 15196, 15196, 15196, 15196, 15196, 15196, 15196, 15196, 
    -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408, 
    -1408, -1408, -1408, -1408, -1408, -1408, 
};
const TfArray<1, int> tensor_dimension24 = { 1, { 256 } };
const ALIGN(8) int64_t tensor_data25[4] = { 
    1, 1, 1, 32, 
};
const TfArray<1, int> tensor_dimension25 = { 1, { 4 } };
const ALIGN(8) int64_t tensor_data26[2] = { 
    1, 1, 
};
const TfArray<1, int> tensor_dimension26 = { 1, { 2 } };
const TfArray<3, int> tensor_dimension27 = { 3, { 4,1,32 } };
const TfArray<1, float> quant27_scale = { 1, { 0.14543993771076202, } };
const TfArray<1, int> quant27_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,32 } };
const TfArray<1, float> quant28_scale = { 1, { 0.14543993771076202, } };
const TfArray<1, int> quant28_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,32 } };
const TfArray<1, float> quant29_scale = { 1, { 0.14543993771076202, } };
const TfArray<1, int> quant29_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,32 } };
const TfArray<1, float> quant30_scale = { 1, { 0.14543993771076202, } };
const TfArray<1, int> quant30_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfArray<2, int> tensor_dimension31 = { 2, { 1,32 } };
const TfArray<1, float> quant31_scale = { 1, { 0.14543993771076202, } };
const TfArray<1, int> quant31_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const TfArray<2, int> tensor_dimension32 = { 2, { 1,128 } };
const TfArray<1, float> quant32_scale = { 1, { 0.16938701272010803, } };
const TfArray<1, int> quant32_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const TfArray<2, int> tensor_dimension33 = { 2, { 1,128 } };
const TfArray<1, float> quant33_scale = { 1, { 0.16582357883453369, } };
const TfArray<1, int> quant33_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const TfArray<2, int> tensor_dimension34 = { 2, { 1,128 } };
const TfArray<1, float> quant34_scale = { 1, { 0.15629662573337555, } };
const TfArray<1, int> quant34_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const TfArray<2, int> tensor_dimension35 = { 2, { 1,128 } };
const TfArray<1, float> quant35_scale = { 1, { 0.14757797122001648, } };
const TfArray<1, int> quant35_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const TfArray<2, int> tensor_dimension36 = { 2, { 1,128 } };
const TfArray<1, float> quant36_scale = { 1, { 0.013279645703732967, } };
const TfArray<1, int> quant36_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const TfArray<2, int> tensor_dimension37 = { 2, { 1,128 } };
const TfArray<1, float> quant37_scale = { 1, { 0.17353564500808716, } };
const TfArray<1, int> quant37_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(8) int8_t tensor_data38[128] = { 
    -104, -125, -108, -115, -113, -103, -120, -124, -128, -119, 
    -99, -107, -107, -122, -107, -118, -108, -109, -93, -114, 
    -113, -111, -107, -116, -121, -105, -112, -103, -103, -104, 
    -93, -109, 102, 100, 98, 91, 86, 100, 91, 97, 
    88, 102, 102, 104, 115, 90, 100, 70, 113, 81, 
    115, 103, 115, 74, 88, 83, 105, 110, 91, 101, 
    105, 120, 116, 127, -117, -101, -104, -90, -117, -108, 
    -105, -116, -106, -109, -87, -108, -91, -120, -101, -98, 
    -103, -110, -90, -117, -121, -104, -97, -105, -103, -98, 
    -119, -99, -101, -118, -125, -101, -95, -97, -101, -111, 
    -116, -121, -110, -114, -119, -118, -94, -122, -92, -119, 
    -112, -107, -101, -102, -102, -112, -101, -115, -111, -117, 
    -113, -109, -101, -113, -112, -104, -103, -96, 
};
const TfArray<1, int> tensor_dimension38 = { 1, { 128 } };
const TfArray<1, float> quant38_scale = { 1, { 0.004841572605073452, } };
const TfArray<1, int> quant38_zero = { 1, { -106 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(8) int8_t tensor_data39[128] = { 
    -104, -125, -108, -115, -113, -103, -120, -124, -128, -119, 
    -99, -107, -107, -122, -107, -118, -108, -109, -93, -114, 
    -113, -111, -107, -116, -121, -105, -112, -103, -103, -104, 
    -93, -109, 102, 100, 98, 91, 86, 100, 91, 97, 
    88, 102, 102, 104, 115, 90, 100, 70, 113, 81, 
    115, 103, 115, 74, 88, 83, 105, 110, 91, 101, 
    105, 120, 116, 127, -117, -101, -104, -90, -117, -108, 
    -105, -116, -106, -109, -87, -108, -91, -120, -101, -98, 
    -103, -110, -90, -117, -121, -104, -97, -105, -103, -98, 
    -119, -99, -101, -118, -125, -101, -95, -97, -101, -111, 
    -116, -121, -110, -114, -119, -118, -94, -122, -92, -119, 
    -112, -107, -101, -102, -102, -112, -101, -115, -111, -117, 
    -113, -109, -101, -113, -112, -104, -103, -96, 
};
const TfArray<1, int> tensor_dimension39 = { 1, { 128 } };
const TfArray<1, float> quant39_scale = { 1, { 0.004841572605073452, } };
const TfArray<1, int> quant39_zero = { 1, { -106 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const TfArray<2, int> tensor_dimension40 = { 2, { 1,128 } };
const TfArray<1, float> quant40_scale = { 1, { 0.17395447194576263, } };
const TfArray<1, int> quant40_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const TfArray<2, int> tensor_dimension41 = { 2, { 1,32 } };
const TfArray<1, float> quant41_scale = { 1, { 0.17395447194576263, } };
const TfArray<1, int> quant41_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const TfArray<2, int> tensor_dimension42 = { 2, { 1,32 } };
const TfArray<1, float> quant42_scale = { 1, { 0.17395447194576263, } };
const TfArray<1, int> quant42_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const TfArray<2, int> tensor_dimension43 = { 2, { 1,32 } };
const TfArray<1, float> quant43_scale = { 1, { 0.17395447194576263, } };
const TfArray<1, int> quant43_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<2, int> tensor_dimension44 = { 2, { 1,32 } };
const TfArray<1, float> quant44_scale = { 1, { 0.17395447194576263, } };
const TfArray<1, int> quant44_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<2, int> tensor_dimension45 = { 2, { 1,32 } };
const TfArray<1, float> quant45_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<2, int> tensor_dimension46 = { 2, { 1,32 } };
const TfArray<1, float> quant46_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant46_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<2, int> tensor_dimension47 = { 2, { 1,32 } };
const TfArray<1, float> quant47_scale = { 1, { 11.758115768432617, } };
const TfArray<1, int> quant47_zero = { 1, { 93 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<2, int> tensor_dimension48 = { 2, { 1,32 } };
const TfArray<1, float> quant48_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<2, int> tensor_dimension49 = { 2, { 1,32 } };
const TfArray<1, float> quant49_scale = { 1, { 0.0078125, } };
const TfArray<1, int> quant49_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<2, int> tensor_dimension50 = { 2, { 1,32 } };
const TfArray<1, float> quant50_scale = { 1, { 0.0078430464491248131, } };
const TfArray<1, int> quant50_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<2, int> tensor_dimension51 = { 2, { 1,32 } };
const TfArray<1, float> quant51_scale = { 1, { 11.758837699890137, } };
const TfArray<1, int> quant51_zero = { 1, { 93 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<2, int> tensor_dimension52 = { 2, { 1,32 } };
const TfArray<1, float> quant52_scale = { 1, { 0.0078125, } };
const TfArray<1, int> quant52_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<2, int> tensor_dimension53 = { 2, { 1,32 } };
const TfArray<1, float> quant53_scale = { 1, { 0.0078431284055113792, } };
const TfArray<1, int> quant53_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<2, int> tensor_dimension54 = { 2, { 1,128 } };
const TfArray<1, float> quant54_scale = { 1, { 0.014957944862544537, } };
const TfArray<1, int> quant54_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<2, int> tensor_dimension55 = { 2, { 1,128 } };
const TfArray<1, float> quant55_scale = { 1, { 0.16835342347621918, } };
const TfArray<1, int> quant55_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<2, int> tensor_dimension56 = { 2, { 1,128 } };
const TfArray<1, float> quant56_scale = { 1, { 0.16877225041389465, } };
const TfArray<1, int> quant56_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<2, int> tensor_dimension57 = { 2, { 1,32 } };
const TfArray<1, float> quant57_scale = { 1, { 0.16877225041389465, } };
const TfArray<1, int> quant57_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<2, int> tensor_dimension58 = { 2, { 1,32 } };
const TfArray<1, float> quant58_scale = { 1, { 0.16877225041389465, } };
const TfArray<1, int> quant58_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<2, int> tensor_dimension59 = { 2, { 1,32 } };
const TfArray<1, float> quant59_scale = { 1, { 0.16877225041389465, } };
const TfArray<1, int> quant59_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<2, int> tensor_dimension60 = { 2, { 1,32 } };
const TfArray<1, float> quant60_scale = { 1, { 0.16877225041389465, } };
const TfArray<1, int> quant60_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<2, int> tensor_dimension61 = { 2, { 1,32 } };
const TfArray<1, float> quant61_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<2, int> tensor_dimension62 = { 2, { 1,32 } };
const TfArray<1, float> quant62_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant62_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<2, int> tensor_dimension63 = { 2, { 1,32 } };
const TfArray<1, float> quant63_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<2, int> tensor_dimension64 = { 2, { 1,32 } };
const TfArray<1, float> quant64_scale = { 1, { 0.0078125, } };
const TfArray<1, int> quant64_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<2, int> tensor_dimension65 = { 2, { 1,32 } };
const TfArray<1, float> quant65_scale = { 1, { 0.00784296914935112, } };
const TfArray<1, int> quant65_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<2, int> tensor_dimension66 = { 2, { 1,32 } };
const TfArray<1, float> quant66_scale = { 1, { 11.756279945373535, } };
const TfArray<1, int> quant66_zero = { 1, { 93 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<2, int> tensor_dimension67 = { 2, { 1,32 } };
const TfArray<1, float> quant67_scale = { 1, { 11.755796432495117, } };
const TfArray<1, int> quant67_zero = { 1, { 93 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<2, int> tensor_dimension68 = { 2, { 1,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.0078125, } };
const TfArray<1, int> quant68_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<2, int> tensor_dimension69 = { 2, { 1,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.0078431190922856331, } };
const TfArray<1, int> quant69_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<2, int> tensor_dimension70 = { 2, { 1,128 } };
const TfArray<1, float> quant70_scale = { 1, { 0.014729373157024384, } };
const TfArray<1, int> quant70_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<2, int> tensor_dimension71 = { 2, { 1,128 } };
const TfArray<1, float> quant71_scale = { 1, { 0.1572708785533905, } };
const TfArray<1, int> quant71_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfArray<2, int> tensor_dimension72 = { 2, { 1,128 } };
const TfArray<1, float> quant72_scale = { 1, { 0.15768970549106598, } };
const TfArray<1, int> quant72_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant72 = { (TfLiteFloatArray*)&quant72_scale, (TfLiteIntArray*)&quant72_zero, 0 };
const TfArray<2, int> tensor_dimension73 = { 2, { 1,32 } };
const TfArray<1, float> quant73_scale = { 1, { 0.15768970549106598, } };
const TfArray<1, int> quant73_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant73 = { (TfLiteFloatArray*)&quant73_scale, (TfLiteIntArray*)&quant73_zero, 0 };
const TfArray<2, int> tensor_dimension74 = { 2, { 1,32 } };
const TfArray<1, float> quant74_scale = { 1, { 0.15768970549106598, } };
const TfArray<1, int> quant74_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant74 = { (TfLiteFloatArray*)&quant74_scale, (TfLiteIntArray*)&quant74_zero, 0 };
const TfArray<2, int> tensor_dimension75 = { 2, { 1,32 } };
const TfArray<1, float> quant75_scale = { 1, { 0.15768970549106598, } };
const TfArray<1, int> quant75_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant75 = { (TfLiteFloatArray*)&quant75_scale, (TfLiteIntArray*)&quant75_zero, 0 };
const TfArray<2, int> tensor_dimension76 = { 2, { 1,32 } };
const TfArray<1, float> quant76_scale = { 1, { 0.15768970549106598, } };
const TfArray<1, int> quant76_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant76 = { (TfLiteFloatArray*)&quant76_scale, (TfLiteIntArray*)&quant76_zero, 0 };
const TfArray<2, int> tensor_dimension77 = { 2, { 1,32 } };
const TfArray<1, float> quant77_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant77_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant77 = { (TfLiteFloatArray*)&quant77_scale, (TfLiteIntArray*)&quant77_zero, 0 };
const TfArray<2, int> tensor_dimension78 = { 2, { 1,32 } };
const TfArray<1, float> quant78_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant78_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant78 = { (TfLiteFloatArray*)&quant78_scale, (TfLiteIntArray*)&quant78_zero, 0 };
const TfArray<2, int> tensor_dimension79 = { 2, { 1,32 } };
const TfArray<1, float> quant79_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant79_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant79 = { (TfLiteFloatArray*)&quant79_scale, (TfLiteIntArray*)&quant79_zero, 0 };
const TfArray<2, int> tensor_dimension80 = { 2, { 1,32 } };
const TfArray<1, float> quant80_scale = { 1, { 0.0078125, } };
const TfArray<1, int> quant80_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant80 = { (TfLiteFloatArray*)&quant80_scale, (TfLiteIntArray*)&quant80_zero, 0 };
const TfArray<2, int> tensor_dimension81 = { 2, { 1,32 } };
const TfArray<1, float> quant81_scale = { 1, { 0.0078429020941257477, } };
const TfArray<1, int> quant81_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant81 = { (TfLiteFloatArray*)&quant81_scale, (TfLiteIntArray*)&quant81_zero, 0 };
const TfArray<2, int> tensor_dimension82 = { 2, { 1,32 } };
const TfArray<1, float> quant82_scale = { 1, { 11.753501892089844, } };
const TfArray<1, int> quant82_zero = { 1, { 93 } };
const TfLiteAffineQuantization quant82 = { (TfLiteFloatArray*)&quant82_scale, (TfLiteIntArray*)&quant82_zero, 0 };
const TfArray<2, int> tensor_dimension83 = { 2, { 1,32 } };
const TfArray<1, float> quant83_scale = { 1, { 11.755406379699707, } };
const TfArray<1, int> quant83_zero = { 1, { 93 } };
const TfLiteAffineQuantization quant83 = { (TfLiteFloatArray*)&quant83_scale, (TfLiteIntArray*)&quant83_zero, 0 };
const TfArray<2, int> tensor_dimension84 = { 2, { 1,32 } };
const TfArray<1, float> quant84_scale = { 1, { 0.0078125, } };
const TfArray<1, int> quant84_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant84 = { (TfLiteFloatArray*)&quant84_scale, (TfLiteIntArray*)&quant84_zero, 0 };
const TfArray<2, int> tensor_dimension85 = { 2, { 1,32 } };
const TfArray<1, float> quant85_scale = { 1, { 0.0078431209549307823, } };
const TfArray<1, int> quant85_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant85 = { (TfLiteFloatArray*)&quant85_scale, (TfLiteIntArray*)&quant85_zero, 0 };
const TfArray<2, int> tensor_dimension86 = { 2, { 1,128 } };
const TfArray<1, float> quant86_scale = { 1, { 0.014433520846068859, } };
const TfArray<1, int> quant86_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant86 = { (TfLiteFloatArray*)&quant86_scale, (TfLiteIntArray*)&quant86_zero, 0 };
const TfArray<2, int> tensor_dimension87 = { 2, { 1,128 } };
const TfArray<1, float> quant87_scale = { 1, { 0.14960995316505432, } };
const TfArray<1, int> quant87_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant87 = { (TfLiteFloatArray*)&quant87_scale, (TfLiteIntArray*)&quant87_zero, 0 };
const TfArray<2, int> tensor_dimension88 = { 2, { 1,128 } };
const TfArray<1, float> quant88_scale = { 1, { 0.1500287801027298, } };
const TfArray<1, int> quant88_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant88 = { (TfLiteFloatArray*)&quant88_scale, (TfLiteIntArray*)&quant88_zero, 0 };
const TfArray<2, int> tensor_dimension89 = { 2, { 1,32 } };
const TfArray<1, float> quant89_scale = { 1, { 0.1500287801027298, } };
const TfArray<1, int> quant89_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant89 = { (TfLiteFloatArray*)&quant89_scale, (TfLiteIntArray*)&quant89_zero, 0 };
const TfArray<2, int> tensor_dimension90 = { 2, { 1,32 } };
const TfArray<1, float> quant90_scale = { 1, { 0.1500287801027298, } };
const TfArray<1, int> quant90_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant90 = { (TfLiteFloatArray*)&quant90_scale, (TfLiteIntArray*)&quant90_zero, 0 };
const TfArray<2, int> tensor_dimension91 = { 2, { 1,32 } };
const TfArray<1, float> quant91_scale = { 1, { 0.1500287801027298, } };
const TfArray<1, int> quant91_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant91 = { (TfLiteFloatArray*)&quant91_scale, (TfLiteIntArray*)&quant91_zero, 0 };
const TfArray<2, int> tensor_dimension92 = { 2, { 1,32 } };
const TfArray<1, float> quant92_scale = { 1, { 0.1500287801027298, } };
const TfArray<1, int> quant92_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant92 = { (TfLiteFloatArray*)&quant92_scale, (TfLiteIntArray*)&quant92_zero, 0 };
const TfArray<2, int> tensor_dimension93 = { 2, { 1,32 } };
const TfArray<1, float> quant93_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant93_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant93 = { (TfLiteFloatArray*)&quant93_scale, (TfLiteIntArray*)&quant93_zero, 0 };
const TfArray<2, int> tensor_dimension94 = { 2, { 1,32 } };
const TfArray<1, float> quant94_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant94_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant94 = { (TfLiteFloatArray*)&quant94_scale, (TfLiteIntArray*)&quant94_zero, 0 };
const TfArray<2, int> tensor_dimension95 = { 2, { 1,32 } };
const TfArray<1, float> quant95_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant95_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant95 = { (TfLiteFloatArray*)&quant95_scale, (TfLiteIntArray*)&quant95_zero, 0 };
const TfArray<2, int> tensor_dimension96 = { 2, { 1,32 } };
const TfArray<1, float> quant96_scale = { 1, { 0.0078125, } };
const TfArray<1, int> quant96_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant96 = { (TfLiteFloatArray*)&quant96_scale, (TfLiteIntArray*)&quant96_zero, 0 };
const TfArray<2, int> tensor_dimension97 = { 2, { 1,32 } };
const TfArray<1, float> quant97_scale = { 1, { 0.0078428881242871284, } };
const TfArray<1, int> quant97_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant97 = { (TfLiteFloatArray*)&quant97_scale, (TfLiteIntArray*)&quant97_zero, 0 };
const TfArray<2, int> tensor_dimension98 = { 2, { 1,32 } };
const TfArray<1, float> quant98_scale = { 1, { 11.754579544067383, } };
const TfArray<1, int> quant98_zero = { 1, { 93 } };
const TfLiteAffineQuantization quant98 = { (TfLiteFloatArray*)&quant98_scale, (TfLiteIntArray*)&quant98_zero, 0 };
const TfArray<2, int> tensor_dimension99 = { 2, { 1,32 } };
const TfArray<1, float> quant99_scale = { 1, { 11.757415771484375, } };
const TfArray<1, int> quant99_zero = { 1, { 93 } };
const TfLiteAffineQuantization quant99 = { (TfLiteFloatArray*)&quant99_scale, (TfLiteIntArray*)&quant99_zero, 0 };
const TfArray<2, int> tensor_dimension100 = { 2, { 1,32 } };
const TfArray<1, float> quant100_scale = { 1, { 0.0078125, } };
const TfArray<1, int> quant100_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant100 = { (TfLiteFloatArray*)&quant100_scale, (TfLiteIntArray*)&quant100_zero, 0 };
const TfArray<2, int> tensor_dimension101 = { 2, { 1,32 } };
const TfArray<1, float> quant101_scale = { 1, { 0.0078431218862533569, } };
const TfArray<1, int> quant101_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant101 = { (TfLiteFloatArray*)&quant101_scale, (TfLiteIntArray*)&quant101_zero, 0 };
const ALIGN(4) int32_t tensor_data102[1] = { 
    -190, 
};
const TfArray<1, int> tensor_dimension102 = { 1, { 1 } };
const TfArray<1, float> quant102_scale = { 1, { 2.306138958374504e-05, } };
const TfArray<1, int> quant102_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant102 = { (TfLiteFloatArray*)&quant102_scale, (TfLiteIntArray*)&quant102_zero, 0 };
const TfArray<4, int> tensor_dimension103 = { 4, { 1,1,1,32 } };
const TfArray<1, float> quant103_scale = { 1, { 0.0078431218862533569, } };
const TfArray<1, int> quant103_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant103 = { (TfLiteFloatArray*)&quant103_scale, (TfLiteIntArray*)&quant103_zero, 0 };
const ALIGN(8) int8_t tensor_data104[1*1*1*32] = { 
  /* [0][0][][] */ -127,-18,-78,-26,-52,7,5,58,-120,33,-71,4,-25,72,29,-116,-26,-95,-105,-102,37,19,-75,-76,-37,-33,51,-42,-66,105,29,-9, 
};
const TfArray<4, int> tensor_dimension104 = { 4, { 1,1,1,32 } };
const TfArray<1, float> quant104_scale = { 1, { 0.0029403329826891422, } };
const TfArray<1, int> quant104_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant104 = { (TfLiteFloatArray*)&quant104_scale, (TfLiteIntArray*)&quant104_zero, 0 };
const TfArray<4, int> tensor_dimension105 = { 4, { 1,1,1,1 } };
const TfArray<1, float> quant105_scale = { 1, { 0.012925502844154835, } };
const TfArray<1, int> quant105_zero = { 1, { -61 } };
const TfLiteAffineQuantization quant105 = { (TfLiteFloatArray*)&quant105_scale, (TfLiteIntArray*)&quant105_zero, 0 };
const TfArray<2, int> tensor_dimension106 = { 2, { 1,1 } };
const TfArray<1, float> quant106_scale = { 1, { 0.012925502844154835, } };
const TfArray<1, int> quant106_zero = { 1, { -61 } };
const TfLiteAffineQuantization quant106 = { (TfLiteFloatArray*)&quant106_scale, (TfLiteIntArray*)&quant106_zero, 0 };
uint8_t ALIGN(4) opdata0[150] = { 107, 116, 0, 109, 112, 0, 32, 96, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 248, 255, 255, 255, 72, 0, 0, 0, 0, 97, 103, 103, 112, 0, 8, 32, 0, 0, 0, 24, 0, 0, 0, 0, 111, 116, 112, 0, 8, 32, 0, 0, 0, 2, 0, 255, 255, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 1, 34, 20, 7, 83, 43, 125, 123, 72, 59, 56, 7, 1, 7, 87, 14, 1, 129, 77, 0, 64, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs0 = { 3, { 1,13,14 } };
const TfArray<1, int> outputs0 = { 1, { 27 } };
const ALIGN(4) uint8_t opdata1[8] = { 4, 0, 0, 0, 0, 0, 0, 0,  }; /* op type 88=UNPACK */
const TfArray<1, int> inputs1 = { 1, { 27 } };
const TfArray<4, int> outputs1 = { 4, { 28,29,30,31 } };
uint8_t ALIGN(4) opdata2[142] = { 107, 116, 0, 109, 112, 0, 8, 32, 0, 0, 0, 32, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 1, 0, 255, 255, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 7, 99, 43, 117, 115, 72, 59, 56, 7, 1, 7, 103, 14, 0, 121, 77, 0, 0, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs2 = { 3, { 28,15,16 } };
const TfArray<1, int> outputs2 = { 1, { 32 } };
uint8_t ALIGN(4) opdata3[142] = { 107, 116, 0, 109, 112, 0, 8, 32, 0, 0, 0, 32, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 1, 0, 255, 255, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 7, 99, 43, 117, 115, 72, 59, 56, 7, 1, 7, 103, 14, 0, 121, 77, 0, 0, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs3 = { 3, { 29,15,17 } };
const TfArray<1, int> outputs3 = { 1, { 33 } };
uint8_t ALIGN(4) opdata4[142] = { 107, 116, 0, 109, 112, 0, 8, 32, 0, 0, 0, 32, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 1, 0, 255, 255, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 7, 99, 43, 117, 115, 72, 59, 56, 7, 1, 7, 103, 14, 0, 121, 77, 0, 0, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs4 = { 3, { 30,15,18 } };
const TfArray<1, int> outputs4 = { 1, { 34 } };
uint8_t ALIGN(4) opdata5[142] = { 107, 116, 0, 109, 112, 0, 8, 32, 0, 0, 0, 32, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 1, 0, 255, 255, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 7, 99, 43, 117, 115, 72, 59, 56, 7, 1, 7, 103, 14, 0, 121, 77, 0, 0, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs5 = { 3, { 31,15,19 } };
const TfArray<1, int> outputs5 = { 1, { 35 } };
uint8_t ALIGN(4) opdata6[142] = { 107, 116, 0, 109, 112, 0, 8, 32, 0, 0, 0, 32, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 2, 0, 255, 255, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 7, 99, 43, 117, 115, 72, 59, 56, 7, 1, 7, 103, 14, 0, 121, 77, 0, 0, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs6 = { 3, { 0,20,21 } };
const TfArray<1, int> outputs6 = { 1, { 36 } };
const TfLiteAddParams opdata7 = { kTfLiteActNone };
const TfArray<2, int> inputs7 = { 2, { 32,36 } };
const TfArray<1, int> outputs7 = { 1, { 37 } };
const TfLiteAddParams opdata8 = { kTfLiteActNone };
const TfArray<2, int> inputs8 = { 2, { 37,38 } };
const TfArray<1, int> outputs8 = { 1, { 40 } };
const ALIGN(4) uint8_t opdata9[4] = { 4, 0, 0, 0,  }; /* op type 49=SPLIT */
const TfArray<2, int> inputs9 = { 2, { 3,40 } };
const TfArray<4, int> outputs9 = { 4, { 41,42,43,44 } };
uint8_t ALIGN(4) opdata10[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs10 = { 2, { 41,4 } };
const TfArray<1, int> outputs10 = { 1, { 45 } };
uint8_t ALIGN(4) opdata11[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs11 = { 2, { 42,4 } };
const TfArray<1, int> outputs11 = { 1, { 46 } };
const TfLiteMulParams opdata12 = { kTfLiteActNone };
const TfArray<2, int> inputs12 = { 2, { 46,2 } };
const TfArray<1, int> outputs12 = { 1, { 47 } };
uint8_t ALIGN(4) opdata13[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs13 = { 2, { 44,4 } };
const TfArray<1, int> outputs13 = { 1, { 48 } };
uint8_t ALIGN(4) opdata14[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs14 = { 2, { 43,5 } };
const TfArray<1, int> outputs14 = { 1, { 49 } };
const TfLiteMulParams opdata15 = { kTfLiteActNone };
const TfArray<2, int> inputs15 = { 2, { 45,49 } };
const TfArray<1, int> outputs15 = { 1, { 50 } };
const TfLiteAddParams opdata16 = { kTfLiteActNone };
const TfArray<2, int> inputs16 = { 2, { 47,50 } };
const TfArray<1, int> outputs16 = { 1, { 51 } };
uint8_t ALIGN(4) opdata17[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs17 = { 2, { 51,6 } };
const TfArray<1, int> outputs17 = { 1, { 52 } };
const TfLiteMulParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 48,52 } };
const TfArray<1, int> outputs18 = { 1, { 53 } };
uint8_t ALIGN(4) opdata19[142] = { 107, 116, 0, 109, 112, 0, 8, 32, 0, 0, 0, 32, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 2, 0, 255, 255, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 7, 99, 43, 117, 115, 72, 59, 56, 7, 1, 7, 103, 14, 0, 121, 77, 0, 0, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs19 = { 3, { 53,20,22 } };
const TfArray<1, int> outputs19 = { 1, { 54 } };
const TfLiteAddParams opdata20 = { kTfLiteActNone };
const TfArray<2, int> inputs20 = { 2, { 33,54 } };
const TfArray<1, int> outputs20 = { 1, { 55 } };
const TfLiteAddParams opdata21 = { kTfLiteActNone };
const TfArray<2, int> inputs21 = { 2, { 55,38 } };
const TfArray<1, int> outputs21 = { 1, { 56 } };
const ALIGN(4) uint8_t opdata22[4] = { 4, 0, 0, 0,  }; /* op type 49=SPLIT */
const TfArray<2, int> inputs22 = { 2, { 3,56 } };
const TfArray<4, int> outputs22 = { 4, { 57,58,59,60 } };
uint8_t ALIGN(4) opdata23[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs23 = { 2, { 57,7 } };
const TfArray<1, int> outputs23 = { 1, { 61 } };
uint8_t ALIGN(4) opdata24[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs24 = { 2, { 58,7 } };
const TfArray<1, int> outputs24 = { 1, { 62 } };
uint8_t ALIGN(4) opdata25[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs25 = { 2, { 60,7 } };
const TfArray<1, int> outputs25 = { 1, { 63 } };
uint8_t ALIGN(4) opdata26[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs26 = { 2, { 59,8 } };
const TfArray<1, int> outputs26 = { 1, { 64 } };
const TfLiteMulParams opdata27 = { kTfLiteActNone };
const TfArray<2, int> inputs27 = { 2, { 61,64 } };
const TfArray<1, int> outputs27 = { 1, { 65 } };
const TfLiteMulParams opdata28 = { kTfLiteActNone };
const TfArray<2, int> inputs28 = { 2, { 62,51 } };
const TfArray<1, int> outputs28 = { 1, { 66 } };
const TfLiteAddParams opdata29 = { kTfLiteActNone };
const TfArray<2, int> inputs29 = { 2, { 66,65 } };
const TfArray<1, int> outputs29 = { 1, { 67 } };
uint8_t ALIGN(4) opdata30[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs30 = { 2, { 67,6 } };
const TfArray<1, int> outputs30 = { 1, { 68 } };
const TfLiteMulParams opdata31 = { kTfLiteActNone };
const TfArray<2, int> inputs31 = { 2, { 63,68 } };
const TfArray<1, int> outputs31 = { 1, { 69 } };
uint8_t ALIGN(4) opdata32[142] = { 107, 116, 0, 109, 112, 0, 8, 32, 0, 0, 0, 32, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 2, 0, 255, 255, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 7, 99, 43, 117, 115, 72, 59, 56, 7, 1, 7, 103, 14, 0, 121, 77, 0, 0, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs32 = { 3, { 69,20,23 } };
const TfArray<1, int> outputs32 = { 1, { 70 } };
const TfLiteAddParams opdata33 = { kTfLiteActNone };
const TfArray<2, int> inputs33 = { 2, { 34,70 } };
const TfArray<1, int> outputs33 = { 1, { 71 } };
const TfLiteAddParams opdata34 = { kTfLiteActNone };
const TfArray<2, int> inputs34 = { 2, { 71,38 } };
const TfArray<1, int> outputs34 = { 1, { 72 } };
const ALIGN(4) uint8_t opdata35[4] = { 4, 0, 0, 0,  }; /* op type 49=SPLIT */
const TfArray<2, int> inputs35 = { 2, { 3,72 } };
const TfArray<4, int> outputs35 = { 4, { 73,74,75,76 } };
uint8_t ALIGN(4) opdata36[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs36 = { 2, { 73,9 } };
const TfArray<1, int> outputs36 = { 1, { 77 } };
uint8_t ALIGN(4) opdata37[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs37 = { 2, { 74,9 } };
const TfArray<1, int> outputs37 = { 1, { 78 } };
uint8_t ALIGN(4) opdata38[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs38 = { 2, { 76,9 } };
const TfArray<1, int> outputs38 = { 1, { 79 } };
uint8_t ALIGN(4) opdata39[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs39 = { 2, { 75,10 } };
const TfArray<1, int> outputs39 = { 1, { 80 } };
const TfLiteMulParams opdata40 = { kTfLiteActNone };
const TfArray<2, int> inputs40 = { 2, { 77,80 } };
const TfArray<1, int> outputs40 = { 1, { 81 } };
const TfLiteMulParams opdata41 = { kTfLiteActNone };
const TfArray<2, int> inputs41 = { 2, { 78,67 } };
const TfArray<1, int> outputs41 = { 1, { 82 } };
const TfLiteAddParams opdata42 = { kTfLiteActNone };
const TfArray<2, int> inputs42 = { 2, { 82,81 } };
const TfArray<1, int> outputs42 = { 1, { 83 } };
uint8_t ALIGN(4) opdata43[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs43 = { 2, { 83,6 } };
const TfArray<1, int> outputs43 = { 1, { 84 } };
const TfLiteMulParams opdata44 = { kTfLiteActNone };
const TfArray<2, int> inputs44 = { 2, { 79,84 } };
const TfArray<1, int> outputs44 = { 1, { 85 } };
uint8_t ALIGN(4) opdata45[142] = { 107, 116, 0, 109, 112, 0, 8, 32, 0, 0, 0, 32, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 2, 0, 255, 255, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 7, 99, 43, 117, 115, 72, 59, 56, 7, 1, 7, 103, 14, 0, 121, 77, 0, 0, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs45 = { 3, { 85,20,24 } };
const TfArray<1, int> outputs45 = { 1, { 86 } };
const TfLiteAddParams opdata46 = { kTfLiteActNone };
const TfArray<2, int> inputs46 = { 2, { 35,86 } };
const TfArray<1, int> outputs46 = { 1, { 87 } };
const TfLiteAddParams opdata47 = { kTfLiteActNone };
const TfArray<2, int> inputs47 = { 2, { 87,39 } };
const TfArray<1, int> outputs47 = { 1, { 88 } };
const ALIGN(4) uint8_t opdata48[4] = { 4, 0, 0, 0,  }; /* op type 49=SPLIT */
const TfArray<2, int> inputs48 = { 2, { 3,88 } };
const TfArray<4, int> outputs48 = { 4, { 89,90,91,92 } };
uint8_t ALIGN(4) opdata49[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs49 = { 2, { 90,11 } };
const TfArray<1, int> outputs49 = { 1, { 93 } };
uint8_t ALIGN(4) opdata50[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs50 = { 2, { 92,11 } };
const TfArray<1, int> outputs50 = { 1, { 94 } };
uint8_t ALIGN(4) opdata51[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs51 = { 2, { 89,11 } };
const TfArray<1, int> outputs51 = { 1, { 95 } };
uint8_t ALIGN(4) opdata52[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs52 = { 2, { 91,12 } };
const TfArray<1, int> outputs52 = { 1, { 96 } };
const TfLiteMulParams opdata53 = { kTfLiteActNone };
const TfArray<2, int> inputs53 = { 2, { 95,96 } };
const TfArray<1, int> outputs53 = { 1, { 97 } };
const TfLiteMulParams opdata54 = { kTfLiteActNone };
const TfArray<2, int> inputs54 = { 2, { 93,83 } };
const TfArray<1, int> outputs54 = { 1, { 98 } };
const TfLiteAddParams opdata55 = { kTfLiteActNone };
const TfArray<2, int> inputs55 = { 2, { 98,97 } };
const TfArray<1, int> outputs55 = { 1, { 99 } };
uint8_t ALIGN(4) opdata56[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs56 = { 2, { 99,6 } };
const TfArray<1, int> outputs56 = { 1, { 100 } };
const TfLiteMulParams opdata57 = { kTfLiteActNone };
const TfArray<2, int> inputs57 = { 2, { 94,100 } };
const TfArray<1, int> outputs57 = { 1, { 101 } };
const TfLiteReshapeParams opdata58 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs58 = { 2, { 101,25 } };
const TfArray<1, int> outputs58 = { 1, { 103 } };
const TfLiteConvParams opdata59 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs59 = { 3, { 103,104,102 } };
const TfArray<1, int> outputs59 = { 1, { 105 } };
const TfLiteReshapeParams opdata60 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs60 = { 2, { 105,26 } };
const TfArray<1, int> outputs60 = { 1, { 106 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension0, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension1, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1)) },},
  { kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2)) },},
  { kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 4, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 896, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 128, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 4096, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 512, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 512, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 512, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 512, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 4096, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 512, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 512, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 512, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 512, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt64, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 32, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt64, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 16, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension27, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27)) },},
  { kTfLiteInt8, tensor_arena + 224, (TfLiteIntArray*)&tensor_dimension28, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28)) },},
  { kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension29, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29)) },},
  { kTfLiteInt8, tensor_arena + 160, (TfLiteIntArray*)&tensor_dimension30, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension31, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31)) },},
  { kTfLiteInt8, tensor_arena + 640, (TfLiteIntArray*)&tensor_dimension32, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32)) },},
  { kTfLiteInt8, tensor_arena + 512, (TfLiteIntArray*)&tensor_dimension33, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33)) },},
  { kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension34, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34)) },},
  { kTfLiteInt8, tensor_arena + 256, (TfLiteIntArray*)&tensor_dimension35, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension36, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension37, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37)) },},
  { kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38)) },},
  { kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension40, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40)) },},
  { kTfLiteInt8, tensor_arena + 640, (TfLiteIntArray*)&tensor_dimension41, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41)) },},
  { kTfLiteInt8, tensor_arena + 224, (TfLiteIntArray*)&tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42)) },},
  { kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension43, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43)) },},
  { kTfLiteInt8, tensor_arena + 160, (TfLiteIntArray*)&tensor_dimension44, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension45, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension46, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46)) },},
  { kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension47, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47)) },},
  { kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension48, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48)) },},
  { kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension49, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension50, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50)) },},
  { kTfLiteInt8, tensor_arena + 640, (TfLiteIntArray*)&tensor_dimension51, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension53, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension55, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56)) },},
  { kTfLiteInt8, tensor_arena + 512, (TfLiteIntArray*)&tensor_dimension57, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57)) },},
  { kTfLiteInt8, tensor_arena + 224, (TfLiteIntArray*)&tensor_dimension58, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58)) },},
  { kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension59, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59)) },},
  { kTfLiteInt8, tensor_arena + 160, (TfLiteIntArray*)&tensor_dimension60, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension61, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61)) },},
  { kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension62, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62)) },},
  { kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension63, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64)) },},
  { kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension65, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension66, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66)) },},
  { kTfLiteInt8, tensor_arena + 512, (TfLiteIntArray*)&tensor_dimension67, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension68, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension69, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension71, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant71)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension72, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant72)) },},
  { kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension73, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant73)) },},
  { kTfLiteInt8, tensor_arena + 224, (TfLiteIntArray*)&tensor_dimension74, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant74)) },},
  { kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension75, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant75)) },},
  { kTfLiteInt8, tensor_arena + 160, (TfLiteIntArray*)&tensor_dimension76, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant76)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension77, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant77)) },},
  { kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension78, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant78)) },},
  { kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension79, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant79)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension80, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant80)) },},
  { kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension81, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant81)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension82, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant82)) },},
  { kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension83, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant83)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension84, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant84)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension85, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant85)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension86, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant86)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension87, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant87)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension88, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant88)) },},
  { kTfLiteInt8, tensor_arena + 256, (TfLiteIntArray*)&tensor_dimension89, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant89)) },},
  { kTfLiteInt8, tensor_arena + 224, (TfLiteIntArray*)&tensor_dimension90, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant90)) },},
  { kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension91, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant91)) },},
  { kTfLiteInt8, tensor_arena + 160, (TfLiteIntArray*)&tensor_dimension92, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant92)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension93, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant93)) },},
  { kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension94, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant94)) },},
  { kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension95, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant95)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension96, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant96)) },},
  { kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension97, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant97)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension98, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant98)) },},
  { kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension99, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant99)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension100, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant100)) },},
  { kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension101, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant101)) },},
  { kTfLiteInt32, (void*)tensor_data102, (TfLiteIntArray*)&tensor_dimension102, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant102)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension103, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant103)) },},
  { kTfLiteInt8, (void*)tensor_data104, (TfLiteIntArray*)&tensor_dimension104, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant104)) },},
  { kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension105, 1, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant105)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension106, 1, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant106)) },},
};
const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_XC_conv2d_v2, 150, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_UNPACK, 0, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_XC_conv2d_v2, 142, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_XC_conv2d_v2, 142, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_XC_conv2d_v2, 142, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_XC_conv2d_v2, 142, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_XC_conv2d_v2, 142, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_SPLIT, 0, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_XC_conv2d_v2, 142, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_SPLIT, 0, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, const_cast<void*>(static_cast<const void*>(&opdata27)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs28, (TfLiteIntArray*)&outputs28, const_cast<void*>(static_cast<const void*>(&opdata28)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs29, (TfLiteIntArray*)&outputs29, const_cast<void*>(static_cast<const void*>(&opdata29)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs30, (TfLiteIntArray*)&outputs30, const_cast<void*>(static_cast<const void*>(&opdata30)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs31, (TfLiteIntArray*)&outputs31, const_cast<void*>(static_cast<const void*>(&opdata31)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs32, (TfLiteIntArray*)&outputs32, const_cast<void*>(static_cast<const void*>(&opdata32)), OP_XC_conv2d_v2, 142, },
  { (TfLiteIntArray*)&inputs33, (TfLiteIntArray*)&outputs33, const_cast<void*>(static_cast<const void*>(&opdata33)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs34, (TfLiteIntArray*)&outputs34, const_cast<void*>(static_cast<const void*>(&opdata34)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs35, (TfLiteIntArray*)&outputs35, const_cast<void*>(static_cast<const void*>(&opdata35)), OP_SPLIT, 0, },
  { (TfLiteIntArray*)&inputs36, (TfLiteIntArray*)&outputs36, const_cast<void*>(static_cast<const void*>(&opdata36)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs37, (TfLiteIntArray*)&outputs37, const_cast<void*>(static_cast<const void*>(&opdata37)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs38, (TfLiteIntArray*)&outputs38, const_cast<void*>(static_cast<const void*>(&opdata38)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs39, (TfLiteIntArray*)&outputs39, const_cast<void*>(static_cast<const void*>(&opdata39)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs40, (TfLiteIntArray*)&outputs40, const_cast<void*>(static_cast<const void*>(&opdata40)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs41, (TfLiteIntArray*)&outputs41, const_cast<void*>(static_cast<const void*>(&opdata41)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs42, (TfLiteIntArray*)&outputs42, const_cast<void*>(static_cast<const void*>(&opdata42)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs43, (TfLiteIntArray*)&outputs43, const_cast<void*>(static_cast<const void*>(&opdata43)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs44, (TfLiteIntArray*)&outputs44, const_cast<void*>(static_cast<const void*>(&opdata44)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs45, (TfLiteIntArray*)&outputs45, const_cast<void*>(static_cast<const void*>(&opdata45)), OP_XC_conv2d_v2, 142, },
  { (TfLiteIntArray*)&inputs46, (TfLiteIntArray*)&outputs46, const_cast<void*>(static_cast<const void*>(&opdata46)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs47, (TfLiteIntArray*)&outputs47, const_cast<void*>(static_cast<const void*>(&opdata47)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs48, (TfLiteIntArray*)&outputs48, const_cast<void*>(static_cast<const void*>(&opdata48)), OP_SPLIT, 0, },
  { (TfLiteIntArray*)&inputs49, (TfLiteIntArray*)&outputs49, const_cast<void*>(static_cast<const void*>(&opdata49)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs50, (TfLiteIntArray*)&outputs50, const_cast<void*>(static_cast<const void*>(&opdata50)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs51, (TfLiteIntArray*)&outputs51, const_cast<void*>(static_cast<const void*>(&opdata51)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs52, (TfLiteIntArray*)&outputs52, const_cast<void*>(static_cast<const void*>(&opdata52)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs53, (TfLiteIntArray*)&outputs53, const_cast<void*>(static_cast<const void*>(&opdata53)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs54, (TfLiteIntArray*)&outputs54, const_cast<void*>(static_cast<const void*>(&opdata54)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs55, (TfLiteIntArray*)&outputs55, const_cast<void*>(static_cast<const void*>(&opdata55)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs56, (TfLiteIntArray*)&outputs56, const_cast<void*>(static_cast<const void*>(&opdata56)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs57, (TfLiteIntArray*)&outputs57, const_cast<void*>(static_cast<const void*>(&opdata57)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs58, (TfLiteIntArray*)&outputs58, const_cast<void*>(static_cast<const void*>(&opdata58)), OP_RESHAPE, 0, },
  { (TfLiteIntArray*)&inputs59, (TfLiteIntArray*)&outputs59, const_cast<void*>(static_cast<const void*>(&opdata59)), OP_CONV_2D, 0, },
  { (TfLiteIntArray*)&inputs60, (TfLiteIntArray*)&outputs60, const_cast<void*>(static_cast<const void*>(&opdata60)), OP_RESHAPE, 0, },
};

// Scratch buffer variables
int scratch_buffer_idx = 0;
const int scratch_buffer_offsets[9] = { 224, 0, 0, 0, 0, 0, 0, 0, 0 };
tflite::MicroContext mc;

// Xcore context and thread variables
xc_context_config_t xc_config;
constexpr int kStackWordsPerThread = 256;
uint64_t xc_stack[kStackWordsPerThread/2];

// Functions to be used as function pointers for TfLiteContext and MicroContext 
static void* AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes) {
  static uint8_t *AllocPtr = tensor_arena + sizeof(tensor_arena);

  AllocPtr -= bytes;
  return AllocPtr;
}

static TfLiteEvalTensor *GetEvalTensor(const struct TfLiteContext *context,
                                       int tensor_idx) {
  return &evalTensors[tensor_idx];
}

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext *context, size_t bytes,
                                       int *buffer_idx) {
  *buffer_idx = scratch_buffer_idx++;
  return kTfLiteOk;
};

static void *GetScratchBuffer(struct TfLiteContext *context,
                                       int buffer_idx) {
  return tensor_arena + scratch_buffer_offsets[buffer_idx];
}

static TfLiteTensor* AllocateTempInputTensor(const TfLiteNode* node, int index) {
      return &ctx.tensors[node->inputs->data[index]];
}

static TfLiteTensor* AllocateTempOutputTensor(const TfLiteNode* node, int index) {
      return &ctx.tensors[node->outputs->data[index]];
}

static void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
}

static void* external_context() {
  return &xc_config;
}

} // namespace

TfLiteStatus model_init(void *flash_data) {
  // Set flash data in xcore context config
  xc_config.flash_data = flash_data;

  // Setup microcontext functions
  mc.AllocateTempInputTensor = &AllocateTempInputTensor;
  mc.AllocateTempOutputTensor = &AllocateTempOutputTensor;
  mc.DeallocateTempTfLiteTensor = &DeallocateTempTfLiteTensor;
  mc.external_context = &external_context;

  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  
  // Set microcontext as the context ptr
  ctx.impl_ = (void*)&mc;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 107;
  for(size_t i = 0; i < 107; ++i) {
    tflTensors[i].data.data = tensorData[i].data;
    evalTensors[i].data.data = tensorData[i].data;
    tflTensors[i].type = tensorData[i].type;
    evalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    evalTensors[i].dims = tensorData[i].dims;
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
  }
  registrations[OP_XC_conv2d_v2] = *(tflite::ops::micro::xcore::Register_XC_conv2d_v2());
  registrations[OP_UNPACK] = tflite::ops::micro::Register_UNPACK();
  registrations[OP_ADD] = tflite::Register_ADD();
  registrations[OP_SPLIT] = tflite::ops::micro::Register_SPLIT();
  registrations[OP_XC_lookup] = *(tflite::ops::micro::xcore::Register_XC_lookup());
  registrations[OP_MUL] = tflite::Register_MUL();
  registrations[OP_RESHAPE] = tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = tflite::Register_CONV_2D();

  for(size_t i = 0; i < 61; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, nodeData[i].custom_initial_data_size);
    }
  }
  for(size_t i = 0; i < 61; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 1, 2, 
};
TfLiteTensor* model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  101, 99, 106, 
};
TfLiteTensor* model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus model_invoke() {
  thread_init_1(&xc_config.thread_info);
  xc_config.thread_info.nstackwords = kStackWordsPerThread;
  xc_config.thread_info.stacks = &xc_stack[kStackWordsPerThread/2 - 1];
  for(size_t i = 0; i < 61; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      thread_destroy(&xc_config.thread_info);
      return status;
    }
  }
  thread_destroy(&xc_config.thread_info);
  return kTfLiteOk;
}
