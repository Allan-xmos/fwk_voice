// This file is generated. Do not edit.
// Generated on: 26.10.2022 20:32:33


#include "../../api/xcore_config.h"
#include "tensorflow/lite/c/builtin_op_data.h"
#include "tensorflow/lite/c/common.h"
#include "tensorflow/lite/micro/kernels/conv.h"
#include "tensorflow/lite/micro/kernels/fully_connected.h"
#include "tensorflow/lite/micro/kernels/micro_ops.h"
#include "tensorflow/lite/micro/kernels/reduce.h"
#include "tensorflow/lite/micro/kernels/softmax.h"
#include "tensorflow/lite/micro/micro_context.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace tflite {
namespace ops {
namespace micro {
namespace xcore {
extern TfLiteRegistration *Register_XC_conv2d_v2(void);
extern TfLiteRegistration *Register_XC_lookup(void);
} // namespace xcore
}  // namespace micro
}  // namespace ops
}  // namespace tflite

namespace {

constexpr int kTensorArenaSize = 1536;
uint8_t tensor_arena[kTensorArenaSize] ALIGN(8);
template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_XC_conv2d_v2, OP_UNPACK, OP_SPLIT, OP_SPLIT_V, OP_ADD, OP_XC_lookup, OP_SUB, OP_MUL, OP_RESHAPE, OP_CONV_2D,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
  int custom_initial_data_size;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[42];
TfLiteEvalTensor evalTensors[42];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[20];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,32 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0078428527340292931, } };
const TfArray<1, int> quant0_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const TfArray<4, int> tensor_dimension1 = { 4, { 1,1,4,24 } };
const TfArray<1, float> quant1_scale = { 1, { 0.10270200669765472, } };
const TfArray<1, int> quant1_zero = { 1, { 127 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const int32_t tensor_data2[1] = { -1 };
const int tensor_dimension2 = 0; /* empty TfLiteIntArray */
const ALIGN(8) int32_t tensor_data3[3] = { 
    32, 32, -1, 
};
const TfArray<1, int> tensor_dimension3 = { 1, { 3 } };
const ALIGN(8) int8_t tensor_data4[256] = { 
    99, 103, 108, 111, 114, 117, 119, 120, 122, 123, 
    124, 125, 125, 126, 126, 126, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -127, -127, -127, -127, 
    -127, -126, -126, -126, -125, -125, -124, -123, -122, -120, 
    -119, -117, -114, -111, -108, -103, -99, -93, -86, -78, 
    -70, -60, -49, -38, -26, -13, 0, 13, 26, 38, 
    49, 60, 70, 78, 86, 93, 
};
const TfArray<1, int> tensor_dimension4 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data5[256] = { 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -127, -127, 
    -126, -125, -124, -121, -116, -109, -98, -82, -60, -32, 
    0, 32, 60, 82, 98, 109, 116, 121, 124, 125, 
    126, 127, 127, 127, 127, 127, 
};
const TfArray<1, int> tensor_dimension5 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data6[256] = { 
    -125, -122, -117, -108, -94, -71, -38, 0, 38, 71, 
    94, 108, 117, 122, 125, 126, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -127, -127, -126, 
};
const TfArray<1, int> tensor_dimension6 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data7[3072] = { 
    -50, 39, 42, 24, -8, 21, 17, 1, 12, -15, 
    0, 5, 25, -3, 5, 23, 13, -13, -28, -26, 
    17, -23, -13, -26, -50, 17, -8, -17, 9, -18, 
    -13, 14, -15, 23, -37, 41, 54, 13, -30, -43, 
    7, -25, 2, -13, 2, 9, 17, -24, -40, 12, 
    -10, -5, -14, -3, -10, -22, -21, 34, -10, 33, 
    -4, 7, 3, 7, -5, -23, -1, -25, -35, -47, 
    17, -1, -31, -25, -45, -9, -12, -18, 13, -25, 
    4, -12, -25, 18, 2, -6, -36, -23, 17, -29, 
    40, 17, -12, -1, 37, 15, 12, 17, 16, 22, 
    25, -4, -31, -23, -25, -17, -28, -5, 5, 38, 
    -8, -14, 18, 27, 15, -9, -3, -9, 12, 16, 
    -7, -4, -4, 6, -19, -29, 14, -7, 35, -2, 
    10, 26, -1, -27, 16, 20, 33, 7, 30, -8, 
    23, 44, 23, -6, 7, 45, 9, 28, -17, 12, 
    4, -2, 34, -26, -12, 13, -29, -44, -2, -11, 
    -8, -3, -40, -39, 2, -22, -37, -16, -8, 12, 
    29, 15, 6, 17, -11, 7, -16, -32, -18, -9, 
    16, 11, -13, -7, 22, -9, -40, -6, 34, 18, 
    -7, 13, -3, 7, 27, -3, -5, 20, -2, 18, 
    13, -6, 38, 47, 23, -11, -39, 28, -17, -49, 
    14, 10, -15, -15, -3, 32, -7, 38, 66, 25, 
    4, 32, -9, -28, 32, -11, -10, 27, 19, -33, 
    -24, 6, -6, 8, -12, -1, -2, 5, -38, 2, 
    7, 2, -17, 7, -19, 19, -5, -4, 18, -32, 
    -18, -18, -11, -20, -15, -13, 7, 5, -6, -9, 
    -15, -28, -31, -10, -31, 0, -23, 25, 25, 27, 
    -8, 43, -26, -17, 28, -26, 16, -37, 24, 8, 
    10, -8, 8, 21, 32, -10, -20, -14, -15, 32, 
    17, 22, -32, -21, 12, -28, -59, -28, -6, 9, 
    -23, -17, -15, -47, -22, 28, 7, -21, 25, 29, 
    -11, 8, 1, -8, -9, 7, -14, -45, 28, 13, 
    6, -16, -11, 4, 33, 4, -2, 16, 13, 10, 
    -7, 10, 12, -27, -20, 11, 26, -7, -5, -30, 
    -3, 24, -17, -28, 12, -10, 5, 14, 55, 24, 
    17, 20, 2, 33, 20, 39, 55, -21, -16, -24, 
    39, 16, 4, -7, -13, -17, -8, -1, 47, -34, 
    -8, -7, 18, -1, 13, 24, -4, 0, 25, 1, 
    -2, 5, -47, -9, 9, -23, -40, -19, -6, 5, 
    4, -6, 13, -17, 0, 17, 22, -26, 33, 55, 
    32, -33, 20, 4, 24, 16, -6, -3, -20, -11, 
    -17, -17, 10, 23, -11, 4, 6, 9, 20, 22, 
    60, 27, 0, -24, -12, -46, -13, 65, 19, -3, 
    25, -21, 3, -15, 0, 15, 11, -24, 6, 16, 
    6, 10, -19, 5, 43, 34, -21, 14, 10, -14, 
    -41, 4, 26, 45, 11, -14, -11, 14, 30, 37, 
    -13, 6, 3, -65, 10, -34, -24, -14, -41, 12, 
    22, -18, -12, 4, -4, 32, 15, 21, -32, -33, 
    -60, 8, 64, 61, -11, 26, -3, 10, 1, 17, 
    -12, -23, -12, -15, 25, 1, -10, 32, 4, 7, 
    6, -3, 28, 19, -87, 25, 35, 20, 13, 13, 
    -4, -37, 2, 1, 14, 17, 30, 6, 8, 21, 
    -18, 1, -1, 0, -15, -2, 15, 1, -56, 21, 
    -2, 20, 3, -19, -3, -41, 15, -18, -33, 19, 
    -8, -34, 11, 0, 20, 19, 12, -9, 13, 12, 
    33, 11, 5, 29, 4, 17, 15, -8, -20, 12, 
    -29, 49, -23, 28, 28, -26, 17, 1, -17, -3, 
    -21, 20, 6, -7, 44, 5, -13, 13, -4, 5, 
    8, -21, 6, 3, -27, -2, -24, 14, -29, -4, 
    13, 22, 11, 2, 27, 28, -21, 27, 53, -9, 
    22, 30, 26, -19, 23, 0, -21, -16, -14, 18, 
    -21, -33, 11, 39, -32, -15, -29, -32, -23, -3, 
    -32, 13, 9, 11, 4, 6, 22, 33, -26, -30, 
    -2, 29, 16, 21, -18, -33, 4, 62, 5, -26, 
    -3, -9, -25, -15, 8, -1, -32, -28, -7, -3, 
    25, 20, -24, 9, 10, 9, 54, -56, -22, -4, 
    -23, -34, -3, 36, 32, 24, -30, -48, -5, 32, 
    -2, -50, -2, 39, -12, 3, 16, -24, 5, 45, 
    -1, -12, 1, -34, 4, -12, -33, -4, -3, -24, 
    -11, 39, 66, 46, 3, 26, 23, 6, 17, 2, 
    -21, -9, -23, 43, 21, 17, 11, 0, -10, 7, 
    -34, 22, 27, -51, 3, 19, -20, -32, 19, -6, 
    -17, 1, 65, 6, -17, 44, 8, -6, 15, -30, 
    -44, -9, 5, -8, -29, 50, 27, -8, -6, -35, 
    11, -19, -15, 3, 21, -1, 13, -27, 6, 20, 
    -7, -3, 44, -46, -24, -10, -2, -16, -35, 22, 
    -7, 8, -6, -29, 14, 2, 7, 11, -15, 5, 
    -28, 30, 54, 21, 19, 2, 10, -6, 20, 0, 
    -33, 1, 22, 14, 8, 3, 15, 33, 22, 15, 
    -21, -3, 16, -15, -31, 3, 29, 6, 5, 16, 
    -36, 11, 37, 17, 10, 1, -28, 10, 0, 15, 
    37, -8, -13, 47, -10, -4, -22, -6, 27, 21, 
    -31, -17, 24, 16, 1, 1, -1, 29, -20, -36, 
    16, -10, -9, 10, -24, -4, -2, 10, -24, 33, 
    62, -32, 16, -6, 8, 22, -22, 17, -3, 14, 
    -18, -37, -20, 7, 0, 48, -21, 11, -54, -43, 
    -8, 12, 3, 59, 16, -36, -18, -3, 16, -2, 
    11, 9, 35, 11, -10, -12, -14, -30, 24, -12, 
    -7, -18, 2, -29, 31, -39, -26, 0, -15, 5, 
    -9, 28, 17, 13, 0, 33, -38, -30, -7, 49, 
    5, -12, 15, 2, -14, -1, 9, 17, -19, -22, 
    -4, 2, 4, -12, -20, -10, 18, 49, 7, -26, 
    -22, -39, -3, 64, 41, -23, -19, 43, 9, -3, 
    16, 7, -2, -38, 32, -32, 20, -8, 3, -30, 
    -29, 20, 8, -28, 11, 7, 25, 31, 44, 3, 
    15, -12, 36, 21, 36, -25, -48, -16, -28, -13, 
    -19, -21, 28, 18, 4, 6, 2, -7, -13, 31, 
    8, -15, -15, 27, 10, 4, -2, 4, -23, 41, 
    35, 5, -37, -42, -41, 11, 27, 35, -3, 16, 
    49, -32, 9, 13, -25, -42, 11, 27, 10, -28, 
    -21, 3, 12, -17, -10, -5, -9, -2, -103, 41, 
    56, 30, -17, 10, -6, -21, -3, 18, 0, 3, 
    -11, -5, 37, -40, -18, -8, 7, 22, 2, 15, 
    16, 11, -40, 6, 39, 25, 1, 5, 1, -15, 
    13, -1, -10, -13, 1, -26, -38, 28, -20, 24, 
    28, -5, 26, 20, 44, 37, -25, 30, 18, 4, 
    -10, 19, 4, -15, -4, 5, -36, -3, 21, -14, 
    -5, -7, -11, 17, 29, 20, 28, -13, 7, -42, 
    -26, -1, -21, -20, 17, 5, 3, -38, 30, 37, 
    -29, 3, 7, 13, 9, 33, -10, -15, -4, -35, 
    -23, 8, 37, 43, 8, 22, 32, 4, -9, 13, 
    -42, 24, 9, 24, -7, -30, -8, 0, -11, 5, 
    -31, -43, -9, -27, -16, 16, -47, -24, 1, -18, 
    -11, -8, -34, -29, 39, 56, 75, 42, 14, 0, 
    28, 58, -2, -40, -24, 0, 17, 36, 13, 26, 
    34, 31, 0, -4, -13, -13, -3, 0, -30, 12, 
    25, -41, -100, -44, -46, -43, 29, 33, 69, 59, 
    5, -8, -34, 24, -24, 1, 29, 31, -15, -19, 
    -19, -27, -5, -22, 21, 5, -38, 5, -3, 6, 
    -16, -19, 21, 2, -50, -17, 23, -30, -48, 17, 
    47, 49, -24, -59, -30, -70, -36, 0, 47, -16, 
    22, 26, 26, 45, 32, 0, -17, -17, -41, -29, 
    -16, 18, 9, 17, -33, 0, 39, -35, -55, 3, 
    -12, 7, -30, -33, -85, -15, 15, 9, 2, 69, 
    21, -15, 11, 28, 9, 9, 16, 17, 16, -9, 
    -23, -11, -3, 16, 26, -23, 37, -9, -81, -21, 
    -15, -46, -16, 28, 26, 28, -21, -14, 11, 26, 
    15, 26, 15, -9, 6, 20, 26, 11, -11, 22, 
    -12, -13, 2, -5, 27, 8, 6, 26, -23, -7, 
    -73, -89, -44, 18, -19, -22, -13, 3, 1, 45, 
    41, -10, 10, -34, -42, -16, -7, -7, -17, 4, 
    -23, -18, 37, 50, 42, -5, 44, 25, -5, -48, 
    -11, 17, 7, 59, -25, -15, 59, 35, 2, 3, 
    29, 20, -27, -25, -9, -25, 2, 10, -19, -27, 
    21, -5, -46, -73, 35, -44, 7, 3, 45, 19, 
    -16, 20, 4, -38, -53, -26, -25, -24, 27, 19, 
    33, -42, -70, -36, 25, 17, -5, 30, 66, 7, 
    -25, -29, 7, -21, -27, -23, 14, -21, -34, -7, 
    -13, -14, -23, -17, -22, -12, -28, -3, 24, -39, 
    -2, -16, 18, 2, 14, 34, -8, 9, 47, 19, 
    49, 18, -28, -4, 17, 8, 0, -5, -18, -32, 
    -18, -34, 16, -11, 5, -18, 13, 32, 19, 10, 
    30, 23, -7, -4, -18, -53, -50, 36, 10, -31, 
    20, 59, -8, -58, -18, 7, 9, -8, 22, 20, 
    -12, 33, -16, -23, -19, 8, -20, 16, -8, 3, 
    -33, -35, -6, -42, -46, -15, -12, 33, 23, -49, 
    -86, -82, -10, -19, -19, 58, 19, 1, 36, 50, 
    25, 20, -16, 27, 8, -11, 11, 17, -3, 14, 
    6, 16, -61, 39, 41, 16, -83, -44, -52, -41, 
    -25, -22, -33, -20, 49, -3, 19, 11, -9, 18, 
    17, 23, -3, -4, 5, -8, -3, -7, 17, 23, 
    3, 28, -127, -4, 86, 77, 38, -14, -24, 0, 
    22, 33, 15, -2, 23, 35, 26, -32, 4, 3, 
    -28, -23, 17, -24, 36, -8, -14, 6, 19, 18, 
    39, 17, -11, -2, -43, 11, -19, 12, 18, -23, 
    45, 14, -23, 13, -14, -3, 10, -1, -27, 24, 
    -2, 41, 42, 57, 37, 58, 25, 32, -4, 2, 
    14, -1, 20, 32, -20, -1, 3, 14, 31, 4, 
    14, 37, 43, 32, 31, 40, 1, -22, -16, 11, 
    -37, 23, 6, -1, 4, -17, 57, 59, 2, -18, 
    3, 31, 9, -8, 40, 27, -7, 3, 36, 16, 
    42, 16, -14, -23, -6, 1, -1, 20, -29, -24, 
    20, -7, 31, -37, 11, 5, 9, 6, -15, -14, 
    4, -12, 9, 10, 3, 40, -9, -4, 27, -5, 
    -8, -8, 3, -25, 16, 52, -6, 3, -15, 4, 
    -2, -4, 31, 23, 31, -3, 4, -9, -16, -17, 
    -42, -25, 16, -3, 31, 0, 19, 20, -17, 16, 
    10, -35, -13, -17, 11, -21, -10, -11, -32, -21, 
    -15, -11, 41, 9, 10, 13, 14, 17, 42, -24, 
    -3, -5, -50, 8, 30, 8, -6, 25, 20, -3, 
    7, 17, 53, 42, 11, 40, 52, 8, -3, -12, 
    -12, -26, -15, 38, -7, 31, 0, -11, -18, 0, 
    11, -28, -17, 9, -35, 21, 73, 9, 7, 13, 
    -13, 41, 12, 5, 8, 0, -2, 14, -20, 14, 
    43, 49, 21, 1, -7, 44, -21, -19, -7, -6, 
    -22, -11, 15, -27, 4, 23, 7, -12, 14, 0, 
    39, -32, 21, -25, 14, -17, -14, -4, -7, 9, 
    -5, -23, 4, -7, -34, -36, 13, 7, 20, 17, 
    9, 4, 2, -9, 13, -39, 13, 29, 1, -5, 
    12, 1, 1, 8, 3, -48, -18, 26, 15, -22, 
    -15, 29, 9, 29, -21, -41, -25, 2, 12, 15, 
    -35, -31, -15, 8, 12, 22, 3, -6, 17, -47, 
    -20, 24, -24, -4, -26, 8, -8, 14, 13, -38, 
    -5, 12, 18, -7, 21, 8, -2, -33, -7, 20, 
    -8, 19, -21, -26, 27, 6, -11, 22, -16, -1, 
    29, -8, 13, 0, 22, -2, 11, -15, -4, 5, 
    2, -1, 13, 9, -17, 24, 7, 4, -1, -8, 
    -9, -32, 12, 46, 5, 9, -2, -2, -2, -8, 
    2, 3, -41, -20, -7, -19, 14, -7, -31, 6, 
    25, -25, -10, -17, 16, -15, -10, 4, -18, 7, 
    43, -23, 20, 35, 32, -33, -18, 3, -17, -24, 
    28, -10, -31, -3, 15, 0, 12, 28, 20, 1, 
    1, -4, -34, -41, -25, 18, -25, -12, 11, -7, 
    1, -10, -9, 12, -22, 45, -31, -38, -41, -52, 
    -22, 2, 26, -6, -27, 32, 40, -20, 9, 62, 
    2, 29, 16, -18, 17, -10, -7, 9, -13, 15, 
    3, 24, -6, 20, -15, -30, -7, 22, 23, -4, 
    -10, -19, 13, 22, 17, -8, -1, -7, 54, 35, 
    37, -20, -37, -2, -5, -2, 19, 63, 20, -10, 
    -29, -18, 8, -15, 3, 4, 30, 36, 14, -3, 
    -20, 34, -1, 17, -16, -13, 3, -29, 0, -3, 
    0, 43, -10, -10, -21, -3, -17, 3, 22, 42, 
    6, -26, 20, 26, 20, 54, 17, -48, -6, 29, 
    -17, 15, 5, -26, -27, 8, 21, 4, 19, 10, 
    -21, 9, 31, 44, -37, -47, 1, 16, -49, -44, 
    26, 53, 0, -48, 1, 29, -25, 20, 12, 18, 
    -33, -18, -5, 0, -14, 60, 42, 27, 30, 57, 
    16, -20, -49, -51, -19, 31, 13, -37, 26, -2, 
    -7, 39, 17, 10, 10, 46, 11, -12, 4, -19, 
    14, 16, 5, -42, -1, 25, -16, 27, 12, -5, 
    28, 17, -24, 20, 0, 10, 52, 5, 4, 20, 
    12, -35, 8, 25, 7, -19, -26, -61, -8, -21, 
    -18, 19, 3, -1, 13, 25, 17, 8, -2, -9, 
    -7, -26, -18, 7, -64, -45, 3, -28, 17, -7, 
    -23, -63, 3, -21, -2, 0, -20, -34, -13, 13, 
    -22, 0, -12, 33, 10, 21, -27, 8, 0, -28, 
    -18, -4, -64, -44, -56, -67, 36, -3, -14, -16, 
    -15, -58, 8, 1, -20, -12, -32, -6, 19, -3, 
    6, 29, 2, -46, -43, -19, -9, 12, -7, 12, 
    -5, 40, 5, -10, 2, -26, -19, 12, 45, 13, 
    -23, 2, 24, 22, -6, 41, 10, -42, 10, 25, 
    12, 39, 22, 2, -51, -42, 15, 10, 7, -6, 
    -22, -39, -9, 23, -2, -10, -17, -12, -64, 19, 
    58, 48, -6, 2, 3, 28, 49, 3, -27, -26, 
    -8, 0, -8, -4, 0, 5, 24, -18, -42, 23, 
    -31, -36, -36, -8, -34, -32, 23, -42, -41, 13, 
    -8, -6, -13, -25, -2, 16, 35, -17, -24, 5, 
    -15, -30, 25, 23, 23, -37, -19, 16, -8, -44, 
    -11, 23, 1, 7, -3, -19, -18, 16, -4, -4, 
    35, 22, -12, -7, -11, 3, -5, 7, 20, -35, 
    -37, 33, 30, -45, 22, 36, 12, 8, -16, -21, 
    14, -17, 17, -11, 3, 12, -5, -31, -9, -12, 
    4, -22, -12, -33, 0, -13, -7, -27, 28, -2, 
    -16, -11, 6, -23, -10, 11, 26, 7, 17, 11, 
    -29, -11, 23, 3, -4, -14, 16, 9, -18, 23, 
    -7, -5, -28, 34, -8, 1, -33, -10, 19, 46, 
    25, 13, 43, 33, -42, -53, -22, -3, -3, 16, 
    25, -21, -49, -17, 20, -7, -2, 39, 21, -8, 
    -7, -2, -13, 31, 1, -1, -3, -11, 0, -14, 
    7, 27, -8, 59, 34, 15, -11, -4, -9, -53, 
    26, -7, -2, -1, -13, -15, 13, 38, 52, -29, 
    -21, 24, -15, 5, 3, 35, -28, 50, 80, 16, 
    25, 16, 4, 1, -3, -21, -26, 8, -21, -29, 
    20, 64, 42, 0, 25, 22, -14, -4, -5, 52, 
    35, 10, 17, -1, -31, -12, 19, -17, -20, -3, 
    65, 24, -12, 19, 10, 36, 42, -20, -18, 6, 
    5, -24, -5, 90, 22, 2, 17, -21, -30, -43, 
    10, -20, 26, 6, -2, -38, -9, 22, -1, 18, 
    22, -14, 18, -28, 1, 17, 2, -45, 12, 53, 
    30, 18, -28, -70, -47, 5, -21, 2, -40, -51, 
    -22, -10, -31, 0, 25, -3, 22, 22, 17, -10, 
    -12, 17, -4, -6, -31, -11, -35, -50, 8, 4, 
    15, 17, -19, -55, -16, 2, 8, -21, 27, 54, 
    10, -33, 8, 29, -7, -34, -5, 13, -19, 4, 
    -8, 17, 25, 19, -7, -21, 6, 47, -14, -36, 
    27, 42, 41, 14, -43, -60, 11, 56, 12, -17, 
    34, -15, 17, 1, -26, 16, -3, -28, -14, 59, 
    62, 65, 59, 54, 0, -23, -79, -76, -34, 42, 
    -29, -64, -3, 16, -18, -36, 33, 27, 13, -25, 
    35, -13, -39, -20, -33, -38, 5, 18, -17, 8, 
    -1, -40, -44, -52, -69, -23, -76, -50, 2, -3, 
    -10, -26, -47, 11, -10, -65, -21, 23, 25, 5, 
    2, 2, 18, 6, 6, 30, 9, -28, 11, 20, 
    -16, -45, -18, -11, -3, -10, 72, 2, -39, -4, 
    -23, 7, 0, 37, -20, -43, 46, 33, 41, 41, 
    23, 10, -23, -9, 8, -16, -23, -27, 21, 8, 
    -21, -7, -39, 6, -4, -11, -22, 2, -28, 29, 
    87, 80, 81, 55, 40, 15, 34, -2, -48, -1, 
    4, -26, -34, 13, -6, -11, -8, 25, 1, -3, 
    -19, -5, 5, 9, 41, -3, 41, -28, -11, 21, 
    -22, 28, 59, 27, -6, 9, -5, 6, 61, 56, 
    -13, 13, -19, 31, -4, 20, 5, 5, 30, 14, 
    -52, 3, 27, 21, 4, 18, -28, -18, -14, -17, 
    -66, -57, -75, -65, 3, -42, -40, -63, -26, 7, 
    43, 38, -1, -13, -33, -15, 25, 10, 29, 30, 
    8, 13, -24, 8, -3, -7, 7, 6, 6, -14, 
    32, -18, -7, 30, -42, -50, -28, -18, 23, 82, 
    30, -45, 15, 8, 35, -38, 16, 66, 32, 40, 
    32, -9, 22, 27, 19, 3, 42, 51, -16, 38, 
    29, -24, 29, -30, 14, -6, 48, -39, 22, -7, 
    21, -1, -16, -17, -2, 4, -19, -2, 11, 22, 
    -37, -22, -17, -32, -1, 9, 10, 11, -13, -1, 
    -18, -14, 4, 45, -23, 11, 53, 4, 32, 56, 
    -29, -30, 26, 19, 2, 1, 11, -25, 15, 53, 
    42, 0, 0, -6, -1, -11, 12, 32, 17, -11, 
    -24, -26, 4, -12, -30, 0, -40, 14, -7, -55, 
    -7, 32, 57, 56, 34, 69, 41, -6, -16, -21, 
    -38, 0, 8, 23, -10, -11, -12, 1, -18, -24, 
    -31, 35, -20, 18, 20, -4, 4, -15, 6, -14, 
    -8, 7, -11, -20, 40, 17, 18, 40, 56, 37, 
    -31, -4, -34, -35, -46, 39, 6, -40, -20, 9, 
    -25, -29, 63, -20, -15, 10, -11, -21, -9, 40, 
    -52, 49, 109, -7, -1, 7, 6, -21, -45, -45, 
    -30, 9, -37, -63, 1, 75, -19, -41, -6, -10, 
    -43, -5, -13, 11, 29, 13, 11, -12, 18, -12, 
    39, 5, -12, 15, -6, -75, -55, -2, -19, 22, 
    -10, -33, 3, -14, -40, -66, -39, 54, -9, -26, 
    -9, -5, 13, -34, 16, -2, -8, -19, 14, 2, 
    -3, 32, -16, 5, 17, -23, -27, -36, -51, 2, 
    -42, -15, 34, 71, 39, 12, -53, -65, -12, -18, 
    -11, 18, -31, -17, 42, 33, 9, 25, -16, 50, 
    14, 20, 16, -3, -13, 15, -3, -36, -34, -26, 
    -29, -30, -10, 32, 45, 54, -28, -63, -22, 15, 
    -19, -34, 41, 43, 42, 26, 13, 31, -8, -38, 
    -14, -27, 16, -15, -19, 5, -10, -16, -10, -21, 
    -12, 40, -55, -107, 17, 18, 6, 16, -28, -96, 
    27, 45, 13, 1, -14, -29, -3, 9, -7, -31, 
    21, -10, 
};
const TfArray<1, int> tensor_dimension7 = { 1, { 3072 } };
const ALIGN(8) int16_t tensor_data8[64] = { 
    16127, 16127, 16127, 16127, 16127, 16127, 16127, 16127, 16127, 16127, 
    16127, 16127, 16127, 16127, 16127, 16127, -4344, 5390, 2245, 3269, 
    708, 3109, 3484, 6757, 9424, -1064, 4153, 7387, 1639, 3363, 
    -554, -195, 16127, 16127, 16127, 16127, 16127, 16127, 16127, 16127, 
    16127, 16127, 16127, 16127, 16127, 16127, 16127, 16127, 2691, 8264, 
    5346, 4504, -1107, 3677, 484, 2743, 3097, 1631, 4233, -8172, 
    8516, 5857, 2352, -11209, 
};
const TfArray<1, int> tensor_dimension8 = { 1, { 64 } };
const ALIGN(8) int8_t tensor_data9[3072] = { 
    13, -20, -7, 4, 19, -7, -32, 23, -15, -1, 
    -59, 12, 39, -10, -20, 15, -7, -55, 88, -18, 
    -12, -11, -13, -37, -43, 18, -10, -7, 25, -4, 
    13, -18, 1, 8, 44, 4, 0, -29, -33, -22, 
    18, 2, 11, 2, 28, -7, -49, 30, -11, 8, 
    8, -1, -17, -6, -5, 12, 14, 10, 32, -8, 
    35, -11, 7, 24, -6, -15, 59, 6, -4, 19, 
    -1, 4, -32, -31, 4, 10, 23, -2, 9, 15, 
    -27, 41, 24, 54, 20, -18, -24, -27, -12, -13, 
    36, -20, 50, -40, 16, 6, -27, 5, -2, 38, 
    21, 18, 20, -17, 17, 37, -8, 18, 26, -14, 
    -18, -2, 20, 2, -55, -13, 4, -30, 3, 8, 
    -10, 17, -11, -12, 15, -7, -19, 7, -14, 37, 
    38, -15, -2, -1, 21, -13, 5, 5, 3, 21, 
    -19, -15, -19, 9, 25, 2, -37, -21, 23, -14, 
    -46, 3, -5, 19, 14, -13, -2, 2, -13, -13, 
    -11, 19, 11, -4, -39, -25, 10, 7, -22, 16, 
    43, 45, -38, 4, -12, -6, 19, -11, -24, -21, 
    38, -17, -28, 17, 22, 26, 8, -25, 4, -20, 
    -6, 4, -10, 19, 12, 5, -23, -10, 23, -10, 
    2, 1, 13, 8, -20, -5, -26, 9, -3, 3, 
    -20, -3, 17, -23, 7, 6, 5, 15, -8, -9, 
    13, -10, 12, -13, -9, 8, 6, 17, 7, 12, 
    33, 12, 8, -5, 18, -18, 30, 11, -11, 18, 
    -32, 20, -12, 4, -12, -35, -2, 10, -23, 16, 
    25, 10, 42, 3, -14, 0, 2, -3, 22, -9, 
    18, 11, 10, 0, -27, 3, 10, 18, 20, -11, 
    -2, 11, -35, 19, 17, 5, -19, -21, 9, 41, 
    3, 0, 20, 14, 59, 17, -1, 10, -18, 8, 
    -9, 16, 9, -41, -18, 8, -7, -39, -32, 0, 
    -29, 23, 14, 0, -31, -26, 33, -15, 25, 19, 
    -55, -9, -21, 49, -19, -20, 4, -19, 25, 21, 
    15, -7, 25, -24, -48, -36, -1, 9, 14, -19, 
    45, 24, 19, 3, 25, 32, -52, 25, 41, 9, 
    41, 16, -4, -26, 2, 31, -9, -6, 12, -24, 
    13, -9, -16, 56, -25, -24, 9, -10, -48, -24, 
    18, 15, 18, 4, -23, -10, 5, -51, 43, -39, 
    33, 13, 6, -3, -16, -15, 23, -37, 42, -22, 
    -19, 45, -20, 2, -5, -7, 9, 12, 20, -21, 
    -4, -30, 3, 10, 12, -4, 19, 10, -25, -13, 
    4, -12, -10, 0, 7, -25, 5, 4, -4, 5, 
    1, -8, 17, 2, 10, 10, -2, 25, -2, 1, 
    -12, 11, -14, -3, -15, 8, -21, 14, -31, -7, 
    2, 3, 22, -5, 22, -9, -1, 2, 5, -6, 
    -2, -3, 27, -22, 1, 13, 2, 0, 6, 1, 
    -13, -2, -2, -51, -14, -25, 27, -52, -43, -33, 
    8, 25, 13, -5, -12, -11, 18, 12, -51, 12, 
    -30, -22, 5, 14, 53, -13, -8, -15, 7, 23, 
    -5, 3, -6, 15, 4, 1, 2, -4, 2, -6, 
    -5, -5, 9, -9, -19, -7, 7, 14, -3, -2, 
    -5, 1, 9, 17, -5, -1, 5, -7, 15, 12, 
    -7, 10, -1, -1, -3, 9, 17, -10, -27, -19, 
    -12, -3, 1, -4, 3, -1, -25, 10, -15, -3, 
    -3, -27, 4, 2, 0, -9, -8, 11, -13, -18, 
    15, -13, -22, -7, 7, 9, -1, 7, 6, -51, 
    26, 6, -6, -28, 19, 11, 5, -7, 43, 12, 
    -32, 1, 22, 17, -16, 46, 24, 39, 25, -1, 
    20, 3, 24, 20, 17, 19, 0, -10, -8, 18, 
    5, 6, -2, -36, -30, -26, 28, -1, 26, 21, 
    -28, -27, -22, -31, 2, -4, -15, 17, 21, 14, 
    13, -7, -4, -4, 20, -22, -1, 1, 20, 3, 
    0, 18, -13, 13, -8, 0, -11, -12, -17, 0, 
    -7, -22, -14, -27, -3, -17, 2, -29, 2, -5, 
    -1, -2, 15, -13, -28, -22, 20, -6, 6, -8, 
    -6, 10, -9, -25, -15, -4, -14, 16, -3, -6, 
    -3, 13, 1, 16, 20, 5, 14, -17, 21, 2, 
    -4, -10, 3, -8, 4, -27, -9, -1, 1, -8, 
    18, 2, 6, 1, -10, 5, -4, 5, -12, -25, 
    22, 1, -6, -1, 0, -3, -6, -10, 13, -5, 
    -18, 3, 3, 8, -14, 15, 8, -13, 14, 1, 
    6, 1, -1, -11, 10, 28, -32, 2, 6, -6, 
    1, 16, 1, 22, -1, 1, 10, -29, -7, 0, 
    2, 5, -17, 23, 1, -4, -16, -2, 9, -16, 
    29, -3, -1, 28, 3, 10, 6, -5, 19, 15, 
    -5, 10, -8, -6, 8, 12, -25, 2, -1, -10, 
    -2, 3, -6, 10, 42, -4, -1, 5, -20, -15, 
    2, -25, 16, 6, 18, -3, 5, -19, -3, 3, 
    4, 2, 0, 3, -1, -1, -4, 7, -2, -11, 
    13, 12, 0, -9, 0, -5, -2, 3, -8, -5, 
    12, -2, 0, 13, 1, -15, 7, -6, 5, 1, 
    -2, 10, 31, -3, 5, -7, -6, -3, -10, 1, 
    -10, -4, 4, 32, -19, 3, 4, 13, 9, 14, 
    8, -2, -15, -34, -2, 2, 31, 2, -40, -10, 
    -2, -12, 5, 6, -12, -2, -13, 3, -4, 4, 
    13, -12, -9, 14, 0, -5, -7, 11, -13, -3, 
    4, 12, -5, 11, 6, 4, -4, -8, -8, -7, 
    11, 5, -21, 1, 20, 0, 5, 10, 20, -48, 
    -3, 25, -24, -53, -52, 30, -46, 24, 25, -11, 
    -47, -53, 61, -3, -9, -6, -9, -22, -3, 27, 
    40, -6, -23, 42, -10, -23, 10, 13, -51, 8, 
    -9, -6, -7, 7, 13, -5, -19, -4, -15, -24, 
    14, 10, 0, -26, 1, -4, -26, 19, -4, -4, 
    -12, -7, 4, -14, 13, 19, -10, 15, -4, -7, 
    34, 7, 28, -11, 13, -7, 24, -6, 4, 16, 
    12, -2, -24, 26, -9, 8, -17, -7, 4, 3, 
    -4, 16, -8, 9, 11, 16, -3, 7, -2, 6, 
    -3, 11, -24, 8, -8, 31, 1, -11, 13, 13, 
    -4, 13, -1, -2, -10, -5, -6, -9, -10, -8, 
    7, -41, 14, -6, 0, 4, -1, -3, -15, 7, 
    0, -9, 43, 24, 24, -15, 32, -41, -9, -5, 
    17, 34, -19, -11, -3, 16, 2, -1, -49, 25, 
    9, -1, -9, -31, 22, 4, 10, -41, -25, 20, 
    26, 14, -47, -41, -7, -38, 19, 71, 11, -16, 
    -23, -32, -12, 20, -21, 9, 30, 11, -6, -72, 
    47, -31, -27, -2, -1, -5, 23, -12, -20, -46, 
    11, -40, 33, -20, -5, 2, 12, -11, -16, 6, 
    12, -3, -46, 13, -43, -6, -46, 25, 25, 44, 
    -18, -34, 13, -47, -55, 36, 32, 56, -57, -23, 
    51, 46, -20, -2, 2, -41, 48, -26, 46, -11, 
    -93, 11, 38, 33, -44, -24, -14, -18, 20, -40, 
    -52, -13, -13, 50, -31, 1, -58, -3, -27, 63, 
    -15, -75, 9, -25, 40, -4, 36, -14, -67, 12, 
    -13, -7, 91, -46, 7, 27, 28, -36, -17, 8, 
    36, 39, -42, 40, -24, 4, 3, 40, 55, 46, 
    -7, 49, 32, 42, 8, -3, -52, 1, 11, 38, 
    5, -50, 44, 95, -12, 20, -10, 39, -65, -47, 
    -28, -45, 54, -69, -28, -6, 23, -53, 1, -55, 
    1, -96, -40, 52, -13, -43, 13, -41, -38, 27, 
    22, 75, 15, 32, -17, -106, 19, 19, 21, -8, 
    -38, -10, -13, -29, 26, 50, 1, 19, -15, 39, 
    -6, -34, 11, 45, 44, 42, 3, -3, 0, 10, 
    -6, 23, 24, -45, -34, 19, -6, -27, -14, 8, 
    13, 8, 31, -10, 11, -2, 0, 26, 26, 17, 
    2, 26, -11, -4, 19, 24, 52, -27, 25, 7, 
    -1, 27, 19, -4, -13, -27, -13, -11, -31, 26, 
    -65, 24, 34, -40, 10, 11, 27, 40, -60, -8, 
    -9, -30, -89, -15, -11, -37, -28, -10, 67, -2, 
    -82, -22, 2, -37, 34, 12, 9, -52, -10, 7, 
    -1, -28, -68, 34, -38, 52, -46, -26, -9, 7, 
    8, -74, -17, 13, -71, 30, 49, 61, -58, 42, 
    15, -1, -53, 17, 59, -10, 48, -37, 36, -75, 
    -44, 19, -85, 36, -24, 10, -37, 75, 9, -13, 
    28, 34, 25, 20, 5, 25, -52, -61, 21, -60, 
    -18, 1, 5, -21, -13, 27, -12, -29, 44, -15, 
    46, 30, -59, -14, 57, -36, -25, 8, 15, -38, 
    1, 25, 27, 18, 26, -5, -21, 2, 2, 105, 
    13, 15, 49, 29, -13, -13, 53, -34, -12, 9, 
    24, 25, -56, -4, 33, 5, -10, -59, -28, -5, 
    -5, -13, -10, 97, 35, 6, 20, -2, 16, -33, 
    -8, 4, -33, -49, -53, -6, -10, -69, -38, -28, 
    0, -42, 15, -27, 17, -20, 25, 4, -42, 0, 
    -1, 26, 6, -8, -6, 3, -52, 35, -18, 15, 
    37, 28, -3, -49, 37, -50, -11, -4, 27, 33, 
    25, -7, -10, 21, -9, -22, 7, -3, -1, -29, 
    3, 30, 28, 2, 0, 15, -22, -34, 11, 78, 
    7, 40, -63, -55, -19, 14, 52, -15, 15, 31, 
    20, 40, -48, -69, 9, 17, 125, -23, -27, 18, 
    37, 9, 31, 7, 37, -13, -6, -63, 42, 17, 
    -17, -50, -28, 30, -7, 47, 34, 9, -66, 10, 
    82, -14, -68, 51, 53, 27, -7, 0, -2, -20, 
    -3, 48, 53, 21, -36, -1, 41, 48, 1, -4, 
    -30, 44, 6, 15, -20, -44, -16, 23, 43, -19, 
    1, -7, 37, 21, -14, -13, -7, -57, -16, 31, 
    31, -24, 14, 6, 5, -22, 49, 4, 2, 3, 
    -39, -54, -10, 57, 54, -32, -23, -11, -26, -18, 
    -10, -6, 9, -29, 26, 79, -11, -1, -3, -36, 
    36, -127, -25, -31, 29, -29, 29, -43, 2, -45, 
    71, -85, -23, -13, 15, -77, 8, -46, 52, 59, 
    51, 55, 5, 40, -28, 39, 30, 40, -17, 86, 
    79, 8, 20, -16, 5, -42, 28, -13, 7, -30, 
    30, 21, 1, -7, 49, 15, 62, -7, 5, 26, 
    -24, -36, 16, 5, 42, 71, -2, 85, -10, -1, 
    7, 7, -4, -16, -23, 10, 34, -41, -24, 26, 
    8, -41, -8, -43, 6, -55, 11, 18, 49, -9, 
    -6, 3, -23, 16, -41, -13, -15, 39, -22, 55, 
    11, 27, -18, -36, 9, -15, -7, 39, 45, -25, 
    -45, 12, -46, 42, 4, 1, 18, 7, -4, -12, 
    -36, 101, 16, -18, -17, 21, -2, 17, 0, -25, 
    11, -25, -2, -32, 22, 32, -15, -29, -72, 10, 
    -10, -12, -21, -8, -44, -17, 18, -30, -58, -18, 
    21, -42, 18, -44, 13, -58, 8, -16, 11, 42, 
    -45, 1, -61, -67, -19, -64, -4, -5, 6, 22, 
    31, -37, -90, -10, 23, -1, -80, -48, 32, -25, 
    3, 23, 15, -1, 35, 5, -28, -28, 39, -38, 
    7, 43, 5, -12, 11, -43, 23, -30, -1, 10, 
    30, 62, 6, 1, -44, -14, 19, 7, 25, -19, 
    -57, 38, -25, 50, 43, 52, -2, -23, -26, -45, 
    32, 42, -34, -28, 20, -52, -51, 6, -76, -27, 
    -35, 34, -15, 15, -26, 17, -45, -47, 45, 24, 
    -6, -15, 14, -7, -66, 49, -11, -41, 17, -11, 
    -98, -25, -7, -18, 86, -7, -35, -20, -48, -64, 
    1, -63, 10, 39, -26, 21, -1, -4, -75, -56, 
    -11, -30, -10, -61, -86, 24, 30, -9, -50, -6, 
    -8, -7, 11, -6, 15, 11, -2, 6, -26, 0, 
    27, 1, 56, -8, -43, -56, -39, -1, 20, 73, 
    -47, 3, -27, 10, -23, 0, -3, -17, -15, -1, 
    -9, 2, 6, -2, 0, -6, -5, 13, 0, 6, 
    -6, -1, -17, 0, -5, 10, 6, 10, 19, 5, 
    -4, -6, -4, 4, 33, 1, -17, -9, -13, 3, 
    -23, 20, 29, 19, 31, -81, -4, -57, 56, 12, 
    -2, 13, 36, 52, 19, -23, 69, 47, -22, 39, 
    61, -10, -28, 5, 18, -36, 6, 25, 3, -4, 
    42, 2, -51, -6, -19, -19, 3, -67, -2, -49, 
    29, 3, 5, 32, 8, 0, -35, -65, -48, -2, 
    -46, 44, 14, 16, -36, -3, -82, 31, 51, 0, 
    -87, 28, 30, -35, -15, -13, -14, -29, -40, -81, 
    49, 20, 17, -35, 18, 19, -3, 87, -14, -20, 
    -17, -11, -5, 12, -14, 5, 4, 43, 17, 41, 
    5, -6, -46, 19, 3, 36, 20, -65, 8, 30, 
    27, -54, 32, -11, 54, 16, -25, -6, -51, 7, 
    26, -8, 70, -8, 8, 22, -24, -9, 79, -18, 
    -43, -47, -2, 52, -31, 16, 30, 13, 33, -6, 
    -10, 22, 17, -14, -8, -19, -9, 21, 6, 38, 
    13, 7, 0, 26, 40, 55, -4, 13, 37, -3, 
    2, 13, 44, -15, -25, 33, 7, 2, -5, 6, 
    -17, -11, -12, -4, 3, 38, 6, 3, 18, -10, 
    5, 10, 29, 15, 17, -36, 31, 37, 8, 2, 
    8, -16, 9, -25, -7, 10, -7, -54, 12, -17, 
    8, -4, 33, 4, -9, -8, -23, 2, 13, 15, 
    23, 2, 11, -2, -22, 37, -13, 15, 29, -5, 
    -8, -9, -3, 7, -3, -7, 18, 34, 12, 3, 
    2, 16, 10, 39, -26, 12, -8, -53, -26, -28, 
    10, 38, -44, -15, -27, 12, -54, -2, 21, -67, 
    -11, -20, -26, -6, -32, 26, 18, -1, -4, -2, 
    -19, 49, -43, -22, 25, -14, -20, 27, 25, 50, 
    -5, 38, 3, 31, -3, 8, 18, -2, 19, 23, 
    31, 19, -52, 17, 28, -37, -4, -9, -19, 10, 
    -18, -2, 26, -34, -18, 14, 3, 51, 20, -9, 
    16, 1, -49, 81, 36, -47, 32, 10, -9, -24, 
    28, 16, -4, 29, 1, 4, -9, -7, -42, 7, 
    -11, 10, -2, -26, -57, 11, 28, -23, 15, 20, 
    0, 18, 17, -18, -28, 36, 26, -15, -12, 19, 
    4, -24, -10, 7, 4, 26, -16, -17, 5, -10, 
    -29, 2, -2, -15, -51, -18, 25, 6, 19, -18, 
    0, 11, 19, -4, -5, 15, 15, -10, 19, 1, 
    8, 8, -7, -13, -5, -10, 21, 22, 17, 5, 
    2, -5, -17, -15, -5, 11, -19, -12, 7, 5, 
    15, -3, 10, 4, -18, 10, 19, 10, -1, 40, 
    28, -16, 15, -8, -19, -25, -2, 26, -22, 29, 
    -33, 11, -34, -32, 18, -10, 4, -9, 40, -5, 
    1, 7, -2, -23, -59, -24, 18, 16, -23, 13, 
    -33, 20, 27, 9, 53, 48, 2, 3, 5, -37, 
    9, 9, 60, 40, -22, 19, -1, 5, -14, 6, 
    30, 47, 22, 5, 21, -4, 47, 50, -13, 11, 
    63, -44, 11, 21, -7, -13, -24, -22, -10, -5, 
    -2, -22, 1, -23, 9, -7, 4, 9, 14, 11, 
    -13, 13, -54, -12, 0, 25, 30, -16, 12, 13, 
    -70, 58, 53, 18, -6, 30, -12, 37, -33, -24, 
    -1, 21, -18, -16, 26, -35, -39, 1, 4, -40, 
    -67, 19, -24, -18, 37, 21, -34, -2, -22, 11, 
    -40, -13, 21, 6, -5, -11, 19, 3, -22, -4, 
    -8, 7, 10, -24, 31, 20, -29, 9, 30, 29, 
    16, 23, 20, -8, 1, -7, -52, 20, 35, -36, 
    36, -14, -2, -18, 5, 3, 15, -8, -9, -14, 
    9, 17, 0, 4, 3, -9, -2, -1, 3, 1, 
    3, -6, 5, -5, 9, 5, -7, -1, -1, 15, 
    15, 7, 12, 10, -3, -8, 2, -13, -20, -17, 
    -1, -19, 9, -10, 7, -14, 6, -11, -5, 32, 
    5, 0, -10, -2, -12, -1, -4, 24, -4, -8, 
    1, 12, -25, -7, -14, -9, 23, 8, -1, -7, 
    -11, -8, 5, 3, -31, -23, -48, -8, 1, -16, 
    20, -12, -12, 0, -13, -32, -32, 12, -22, -8, 
    10, 9, 33, 27, -4, 5, 21, 19, -2, -13, 
    -7, 22, -7, 10, -8, 0, 25, 19, 23, -8, 
    27, -6, -7, 38, -10, -26, 26, -22, -6, -21, 
    -1, -24, -16, -18, 23, 16, 8, -8, 12, 14, 
    -17, 12, 1, 6, 3, 9, -1, -18, -8, 14, 
    -4, -15, 31, 22, 11, 18, 0, -1, 3, 26, 
    -25, -29, -3, 16, -9, 14, 18, -15, -13, 1, 
    31, -11, 6, 7, 16, 5, 14, -43, 24, 0, 
    -7, -32, 15, 7, -12, 21, 27, -8, -39, -3, 
    18, -11, -23, 69, 67, 21, 8, 6, 16, 0, 
    2, 30, 23, 5, -1, 4, 7, 3, -5, 1, 
    -5, 7, 9, 1, -12, -8, -11, -3, 0, -2, 
    3, 23, 3, -8, 7, -14, -8, 7, 1, -2, 
    -13, 21, -5, 4, 8, 14, -7, -1, 10, 3, 
    0, -3, 0, -4, -29, -6, -12, 0, 14, -10, 
    2, -14, 3, -11, -5, -37, 4, -6, -10, -29, 
    12, -8, -37, -17, -10, -11, -8, -2, 16, 4, 
    0, 15, -1, -10, -36, -33, 14, 1, 19, 4, 
    19, -1, -7, 21, -27, -26, -7, -18, 10, -2, 
    -7, 14, -25, 36, -1, 29, 15, -6, -17, -21, 
    -2, -1, -35, 1, 6, 27, -9, -19, 8, 15, 
    -10, -2, -3, 0, -13, -18, 32, 1, -18, 0, 
    -3, -9, -22, 20, 18, -9, 47, 2, -2, 1, 
    19, -19, 16, -2, -3, -6, 0, 8, -21, -5, 
    -11, 16, 3, 4, -9, -5, 8, -1, -1, -18, 
    21, -9, -1, -1, 15, 5, 0, 4, -8, 2, 
    -10, -2, 2, -13, 8, 2, 1, 5, -9, -4, 
    4, 1, -11, 9, 1, -15, -2, 5, 1, -4, 
    8, 3, 10, 1, 3, -5, -5, 1, 1, -5, 
    0, 3, 10, 0, -7, -6, 9, 0, -27, 0, 
    0, -1, 8, -10, 10, -21, -13, -14, -10, -23, 
    -5, 7, -16, 4, -5, -6, -1, -2, -24, 17, 
    4, -5, -33, 11, 16, 38, -42, -16, -2, 3, 
    18, -8, -9, 7, -30, 18, 35, 23, 0, 10, 
    8, 1, -13, 6, -33, 30, 38, 9, -26, -41, 
    -13, 6, -11, 22, 12, 6, 11, 24, 25, -24, 
    -2, 0, 1, 1, 1, 2, 1, 3, -6, 0, 
    3, -2, 1, 1, 5, -5, 3, -3, 1, 1, 
    -1, 4, 4, -1, -2, 2, 2, 5, -1, -3, 
    1, -3, -10, 23, -4, -6, 12, -33, 46, 13, 
    -18, -34, -34, -23, -26, 18, 5, -20, -28, -29, 
    24, -28, 8, 17, 3, 9, 6, 37, 32, 15, 
    1, 17, 2, 10, -31, 14, -25, 17, -10, -28, 
    13, 22, -2, -2, -17, -8, 14, -14, 17, -6, 
    -4, -26, -19, -17, -12, -5, -12, -26, -12, 9, 
    43, 5, 24, -4, 2, 31, -41, 9, 20, -1, 
    9, 24, 0, 17, 38, -30, -16, 28, -23, -3, 
    -10, 37, -18, 18, 12, -10, -7, -6, -11, 1, 
    -5, 1, 12, 19, -4, 7, 9, -12, 0, 9, 
    5, -4, 4, -16, 6, 12, 1, 2, -2, -2, 
    -9, 3, -6, -10, 6, 1, 9, -5, 2, 22, 
    -3, 4, -2, 7, 11, -25, 21, 5, -3, 0, 
    27, -1, 12, -1, -18, 17, -3, -9, -8, -16, 
    0, 12, -14, -17, -1, 30, 20, -6, -1, 22, 
    14, 6, -2, -11, -11, 2, 49, -26, -5, 4, 
    44, 20, 
};
const TfArray<1, int> tensor_dimension9 = { 1, { 3072 } };
const ALIGN(8) int16_t tensor_data10[192] = { 
    17751, 17751, 17751, 17751, 17751, 17751, 17751, 17751, 17751, 17751, 
    17751, 17751, 17751, 17751, 17751, 17751, -2485, 144, -2223, -1985, 
    -1214, -3876, -186, -4686, -3748, -1846, -1984, -1571, -2536, -3572, 
    -3398, -254, 17751, 17751, 17751, 17751, 17751, 17751, 17751, 17751, 
    17751, 17751, 17751, 17751, 17751, 17751, 17751, 17751, -1726, -1444, 
    -3618, -737, -585, -1865, -1840, -2164, -2353, -2921, -1679, -1781, 
    104, -978, -5738, 98, 17751, 17751, 17751, 17751, 17751, 17751, 
    17751, 17751, 17751, 17751, 17751, 17751, 17751, 17751, 17751, 17751, 
    -2702, -5067, -4990, -1797, 1728, -5775, -1325, 51, 2213, -4352, 
    -2784, 64, -6094, 1630, -1058, -202, 17751, 17751, 17751, 17751, 
    17751, 17751, 17751, 17751, 17751, 17751, 17751, 17751, 17751, 17751, 
    17751, 17751, -6781, -3391, -2118, 1982, -5451, -1918, -96, 5181, 
    587, -3713, 5480, -346, -1649, -5875, -5541, 366, 17751, 17751, 
    17751, 17751, 17751, 17751, 17751, 17751, 17751, 17751, 17751, 17751, 
    17751, 17751, 17751, 17751, -2938, -805, -571, -2973, -2995, -935, 
    -2469, -5609, -2253, -2992, -1584, -2939, -4320, 1570, -4268, -2781, 
    17751, 17751, 17751, 17751, 17751, 17751, 17751, 17751, 17751, 17751, 
    17751, 17751, 17751, 17751, 17751, 17751, -3927, -2814, -3022, -1151, 
    -2121, -2311, -3607, -468, -2172, -1934, -2123, -1866, 879, -2559, 
    -5106, -2940, 
};
const TfArray<1, int> tensor_dimension10 = { 1, { 192 } };
const ALIGN(8) int8_t tensor_data11[3072] = { 
    -11, 17, 3, -24, -14, -20, 4, 9, 23, 8, 
    1, 14, 31, -6, 1, 24, 7, -11, -1, 12, 
    2, -7, -11, -33, 24, 5, 23, -11, -3, -9, 
    2, 6, -3, 14, 0, -9, -6, 6, -2, 8, 
    -3, 1, 5, -6, 10, -4, -7, -3, -12, -7, 
    -10, 7, -14, -4, -7, -12, -1, 8, 18, -18, 
    1, 12, -1, 5, -16, -4, 36, -23, 4, 7, 
    9, 4, -23, 7, 3, 6, 10, 60, 2, -31, 
    5, 1, 3, 4, 8, 10, -8, -41, 9, 7, 
    -7, -8, 8, 10, -13, 2, -7, 9, 13, -1, 
    -3, 12, -4, 14, -6, -1, -4, 1, -24, -15, 
    5, -3, 2, -8, -10, 15, -7, -10, -4, -19, 
    -3, 9, 8, -19, 6, 8, 0, 5, -3, 17, 
    -9, -9, 22, -10, 11, 29, 14, 10, 2, -9, 
    29, -13, -4, 0, 32, 6, 17, 15, -11, 20, 
    2, -47, 27, -2, 17, -16, 5, -2, -4, 5, 
    11, 13, 14, 2, 4, -2, -4, 14, 2, -19, 
    -31, 1, 2, -21, 8, 14, 10, 7, 1, 2, 
    4, 13, 22, -6, 10, 2, -6, 7, -27, 16, 
    15, -15, 11, 10, 4, 6, -2, -3, -6, -1, 
    -7, -24, 12, 9, -3, -6, 5, 2, 21, -6, 
    -11, -3, 1, 5, 6, -21, -1, -8, -3, 4, 
    -7, 2, -2, -2, -25, 9, 16, -20, 9, -12, 
    13, 16, 22, 14, -16, 10, -5, 3, -23, -15, 
    14, 0, 16, -11, 12, -28, -9, -45, 15, -15, 
    12, -29, 3, -11, 0, 22, -15, 0, 19, -31, 
    -3, 1, 0, -14, 0, 4, 10, -6, -4, -16, 
    0, -6, 3, 2, -8, 19, -5, 20, -5, -23, 
    -4, -4, 4, -5, -4, 4, -20, 3, -5, 1, 
    15, 4, -9, -2, -45, 11, -5, 6, 0, 13, 
    1, -2, 11, 4, -19, 8, 7, 4, -15, -1, 
    6, -31, 9, -6, 13, -3, 15, 10, 10, -8, 
    -12, 10, -3, -1, -10, 35, -19, 1, -1, 3, 
    12, -2, -7, -13, 5, 6, -7, 0, -6, 7, 
    4, 13, 3, -54, 10, 8, 22, 0, 13, 24, 
    4, 5, 8, -5, 11, -11, 14, -4, 2, 8, 
    -1, 1, 8, 1, -2, -24, 6, 15, 3, 6, 
    -3, -3, -8, 0, 1, -47, 13, 5, 13, 1, 
    9, -2, 2, -2, -17, 4, 15, 23, 0, -5, 
    2, 5, 2, 14, -2, -4, 4, 9, -1, 3, 
    10, 2, 11, -4, 9, 11, -16, -23, 9, -15, 
    7, 2, 4, -8, 7, -4, 3, -5, -23, -2, 
    0, 11, -11, 1, -14, -13, 4, -1, -7, -13, 
    -9, -5, -3, -1, -4, 4, -12, -2, 2, -41, 
    5, -4, 4, -2, -4, 19, -4, -12, -6, -22, 
    3, 2, -12, -3, 0, 1, -4, 7, 20, 4, 
    6, -15, -6, -1, 3, -10, 4, -3, -18, 0, 
    8, 5, 6, -10, 10, -9, 12, 1, 8, 5, 
    4, -1, 3, -8, 4, 0, -1, -8, 1, -1, 
    4, 4, 0, -4, 6, 7, -5, -6, -8, -2, 
    -1, -2, -2, -12, 12, 6, -5, -4, 8, -1, 
    0, 6, -12, -2, 2, -12, 0, -5, -1, 3, 
    -6, -1, 2, 0, 1, 2, -4, 7, -1, 6, 
    13, 2, 0, 9, 10, -19, 3, -7, 15, -1, 
    -3, 10, 2, -6, -19, -8, 9, -20, -11, 0, 
    6, 5, -29, 8, -1, -11, 0, -8, -7, -19, 
    -5, -8, -3, -7, -10, -17, 7, -24, 18, 6, 
    1, -20, 6, 8, -13, 13, -8, 1, -2, 6, 
    2, -13, 2, -5, 10, -2, 2, 7, -10, 1, 
    0, -4, 12, -6, 17, 2, 5, 12, 5, -32, 
    9, -51, -3, -5, 15, 14, 10, 10, -9, 4, 
    17, 1, -6, 2, -3, -12, 0, 9, 13, 10, 
    -5, -9, 15, 23, 1, -1, 5, 0, 0, -7, 
    7, -17, 13, -24, -4, -3, -13, -15, 5, -4, 
    -18, 11, 0, -11, -15, -4, 1, 6, 1, 11, 
    16, 16, 17, -23, 13, 22, -2, 0, 5, 6, 
    7, 25, 2, -21, 23, 6, 14, 22, 14, 2, 
    9, 19, -5, -2, 0, -24, 9, 9, -2, -1, 
    -4, -5, -2, -4, -6, -7, -2, -7, 5, 1, 
    -13, -8, 1, -23, 1, -13, -2, 6, -29, -7, 
    -9, 12, -10, 12, -25, 0, 20, -19, -9, -16, 
    7, 17, -1, 26, 2, 19, -5, -4, -6, -3, 
    -7, -1, 11, -3, 15, 19, -3, -75, 9, -8, 
    33, -14, 2, -16, -1, 6, -20, 3, 4, -15, 
    -3, -4, 7, 11, 0, 16, -6, -6, 10, 8, 
    -1, -5, -12, 1, 8, 8, 9, 14, 0, -56, 
    1, -18, 24, -10, 10, -9, -8, 18, -9, -4, 
    0, -16, -2, 7, -2, -4, 1, -13, 0, 0, 
    -11, -7, 5, -1, 13, -7, -2, -3, -4, -30, 
    5, 11, 1, 1, -9, -7, -9, 9, -9, 6, 
    -18, 3, 11, -13, -8, -24, 7, 19, 7, 14, 
    14, 3, 2, -19, 13, 12, 9, -4, 4, 6, 
    -2, 10, 26, -64, 9, -5, 32, -19, 4, 20, 
    17, 13, 4, -2, -18, -9, 6, 13, 0, 3, 
    -9, -32, -11, -10, 1, -9, -15, -2, -8, 6, 
    -8, 1, -7, -38, -7, 16, 5, 14, -6, -14, 
    -5, 32, -13, 18, 4, 2, 3, -6, -14, -25, 
    10, 6, 9, 24, 2, 3, 5, 6, -4, 29, 
    -17, -6, 0, 11, -21, 20, 7, -48, 15, -13, 
    18, 6, 6, 7, 13, -14, -1, 9, -3, -11, 
    4, 7, 0, 8, -10, 4, -7, -2, -4, -19, 
    15, 14, -10, -7, -20, -15, -5, -3, 4, -29, 
    14, 0, -1, 4, 18, -4, -5, 5, -20, 5, 
    -1, -30, -1, -8, 4, 22, 10, 17, 0, 2, 
    4, -3, -12, -4, 24, -3, 28, 10, 1, 10, 
    18, -56, 22, -10, 26, -26, -9, 0, -15, 6, 
    0, 7, 8, -8, 0, 7, 3, 1, -4, -3, 
    10, -8, -6, 7, 7, 17, 4, -1, -2, 7, 
    -1, -1, -5, -18, -7, 5, 1, 1, 1, 19, 
    6, -5, -14, 5, 3, -14, 6, 7, 9, -11, 
    -18, 0, 18, -26, 16, 7, -8, -14, 51, -4, 
    -10, 20, -8, 13, -12, -9, 7, 13, -3, -3, 
    0, 17, -11, 7, 2, 7, 4, 4, 1, -20, 
    7, 4, -4, 14, 17, -1, 5, -19, 3, 14, 
    -3, 4, 3, 7, 3, -3, 11, -25, -8, 0, 
    10, -15, 9, -13, 1, 2, -10, 15, 22, -27, 
    -6, 3, -1, -1, -11, 23, 6, 7, 5, -6, 
    -12, -11, -13, -1, 3, 6, -10, -7, -8, -35, 
    -12, -8, 9, 2, 21, -10, -5, 20, -8, 14, 
    10, -23, -14, 14, -14, -16, -9, 3, 9, -12, 
    -2, -30, 4, -3, -15, 4, -15, 23, -3, 5, 
    -2, -59, -5, -1, 16, -6, 22, 13, -18, 0, 
    -8, 0, 25, -25, -13, -10, -3, -21, -18, 13, 
    13, -7, -11, -25, 13, 2, -14, -2, -18, 19, 
    -18, 0, -1, -30, 0, 12, 12, 4, 10, 8, 
    -20, 9, 15, 12, -19, 5, -8, -12, -2, -1, 
    -4, 0, -9, 7, 0, 15, -8, 8, 13, 8, 
    2, 0, -1, 1, -1, 7, 12, -8, -3, 0, 
    -27, -1, -6, -12, -4, 16, 10, -9, -8, -3, 
    -6, -4, -4, 3, -3, 3, 10, -14, 13, -14, 
    2, -3, -29, 27, -8, 24, -12, -54, -2, 19, 
    11, 6, 2, 4, 1, 3, -2, 16, 25, -7, 
    -18, 8, 2, 12, -3, -15, 21, 17, -9, -44, 
    10, 8, -25, -14, 6, 28, -10, 6, 14, -81, 
    -1, 22, 21, -5, 29, -2, 15, -4, 7, -4, 
    29, -5, 23, -20, -11, 0, -29, 3, 1, -14, 
    10, 20, 6, -21, 12, 5, 1, -25, -2, 6, 
    7, -30, -2, 12, 6, 3, -14, -4, -12, -10, 
    -3, 12, -10, -13, -3, -13, -26, 8, 3, 11, 
    16, -8, -3, -13, 5, 0, -6, -7, -13, 10, 
    -4, -16, -6, -35, -13, 14, 4, -12, 3, -10, 
    -5, 10, -2, -13, -32, 15, 24, 2, 27, 14, 
    -6, -22, -36, 32, -32, 5, -5, 0, 2, -8, 
    15, -19, 15, -19, 3, 40, -9, -14, -22, 2, 
    -7, 1, 3, 5, 2, 6, 7, -11, 14, -5, 
    1, -10, -15, 3, 16, -13, -8, 11, 12, -5, 
    21, 3, -18, -7, -4, -33, -16, 10, 6, 9, 
    -27, -7, -11, 4, -10, 6, 15, -31, -32, 24, 
    -20, -2, -12, -2, 4, -22, -23, 3, -25, 10, 
    -7, 10, 15, 1, 9, 0, 1, -2, 3, 19, 
    12, 1, -12, 6, -15, 0, -2, -13, -5, 10, 
    -2, -32, -14, -6, 16, 5, -4, 8, 0, -8, 
    12, -8, 2, 10, -1, 1, -11, 8, 8, -18, 
    14, 15, 4, 2, 1, 9, 15, -18, 13, 9, 
    -7, 18, -5, -21, 12, -20, -7, 19, 3, 14, 
    4, 4, 16, 5, 0, 0, -6, 18, -7, 3, 
    15, 2, -16, -36, -8, 10, 2, -12, 10, -8, 
    -8, 2, -11, -8, 25, -21, -16, 26, 16, -13, 
    -14, 6, 2, -9, 10, 3, 10, -5, -11, 14, 
    -16, 6, -5, 9, -18, -21, 9, 5, 3, -17, 
    14, 11, -33, 11, -9, -12, -24, 6, -6, 4, 
    -3, 6, 9, -18, -16, 1, -13, -6, -37, -17, 
    -15, -11, 12, -12, 18, -10, -8, 19, -28, -13, 
    -3, -7, -1, -13, -4, -5, -10, -16, 0, -13, 
    15, -18, 13, 7, 0, 6, 1, 7, -10, 19, 
    -4, -8, 14, 10, 3, 5, 5, -32, -7, 12, 
    25, 4, -5, -3, 0, -25, -11, 10, 3, 11, 
    -1, -12, -1, 4, 7, 0, -4, -4, 15, 10, 
    15, -16, 2, 8, -11, 4, 10, -5, -7, -28, 
    12, -15, -3, 9, 6, -4, 17, -9, -19, 4, 
    10, 2, 4, 11, -5, -3, 27, -18, 11, -13, 
    -10, 12, 13, 6, -31, 2, 20, 11, -10, -5, 
    -1, -1, -1, 15, 16, 12, -7, 8, 6, -13, 
    15, -14, 28, -21, -35, 26, 13, 9, -12, -13, 
    3, -24, -35, 0, -12, 14, -33, -6, -2, 14, 
    -24, -18, 20, 18, -23, 20, -12, 13, -23, 10, 
    2, -4, -11, -29, 6, -12, -20, 6, 19, 7, 
    -14, -1, -16, -16, -11, -10, -17, 19, 5, -3, 
    0, 18, -25, -15, -12, 13, -1, 13, -12, -5, 
    -4, -6, -25, 6, -10, -3, 0, 20, 23, -16, 
    3, 1, -11, 7, 8, 4, 19, 10, 8, -10, 
    18, 4, -24, 0, 4, 3, -18, -23, 4, -41, 
    11, -9, -43, -5, 6, 18, 4, 16, -9, -6, 
    -8, -13, -12, 0, 30, -5, 17, -4, 44, 7, 
    -15, -7, -7, 8, 27, -7, 10, -9, -15, -70, 
    22, 24, 19, -8, -15, -11, 22, -18, -10, 10, 
    1, -39, -18, 11, 13, 26, -23, 22, -10, -13, 
    -19, 13, -33, 7, 3, 4, -4, 4, 16, -18, 
    -11, -15, -15, 66, 33, -5, -3, -2, -17, -2, 
    -14, 2, 3, 3, 10, -14, 11, -12, -9, 7, 
    -4, 3, 15, 11, 4, -11, 15, 13, -4, 6, 
    5, 1, -2, -12, 22, 26, 10, 11, -2, 0, 
    5, 0, -11, 8, 8, -12, -1, 1, 25, 13, 
    -21, -1, -14, -8, -26, -20, -2, 7, 10, -8, 
    -4, 11, -6, -8, 11, -20, -20, 21, -1, -7, 
    -14, 3, -28, 22, -35, -8, -14, 29, 19, -12, 
    -23, -9, 20, 10, 6, 18, 22, 6, 34, -31, 
    24, 28, -13, -12, 18, 29, 14, -40, 18, -92, 
    26, -25, 32, 5, 28, 2, 3, 1, -5, 6, 
    -2, -23, 12, 3, 9, -2, -8, -3, -9, -10, 
    -6, -6, -5, -11, 18, 6, 9, -13, 15, -39, 
    -9, 38, 0, 15, -30, -9, 20, -6, -3, 9, 
    -3, 16, 30, -27, -24, -14, -1, -18, 4, -2, 
    30, -3, 20, 2, 6, 9, 12, 12, -5, -41, 
    -4, -15, 3, -46, 18, -5, -3, -11, 8, 11, 
    2, -6, 14, 13, -14, 3, 19, 5, 5, 9, 
    19, -10, -7, 7, -4, -9, 5, 11, 2, -5, 
    32, -3, 7, -14, 18, 49, -1, 10, -22, 17, 
    6, 3, 7, -11, 6, 7, 24, -32, 4, -8, 
    3, 1, -18, 13, 13, 0, 13, 2, 25, 5, 
    -20, 19, -7, -9, -4, -10, -1, -21, -8, 9, 
    -5, -1, -5, -4, 5, 7, -10, 15, 18, -14, 
    0, 8, -11, 6, -23, 14, 14, -3, -1, -43, 
    14, -13, -24, -14, -2, 4, -4, -1, 0, -39, 
    -18, -11, 24, -16, 33, 1, -8, 9, 11, 12, 
    -11, -18, -21, -16, 14, 6, 15, -1, 15, 15, 
    11, -10, 16, 23, -1, 11, 16, 7, 13, -33, 
    54, 57, 21, -6, -2, 20, -6, 12, 18, 3, 
    -4, 1, 14, -14, 9, 0, -5, 4, -19, 11, 
    -1, -9, -1, 25, -30, -23, 16, 9, -14, -7, 
    10, 21, -23, -23, -23, -7, -9, -14, -11, -10, 
    -21, 17, -2, -10, -22, 30, 19, -14, 4, 9, 
    4, -13, -12, -7, -1, 18, -18, -1, 12, -10, 
    18, -27, -12, -9, 0, 60, 6, -3, -7, -8, 
    -22, -12, 24, 18, -9, 33, 27, -37, -6, 5, 
    -4, -20, -7, 7, 20, -8, -44, -16, -7, 4, 
    -17, 3, -15, 15, -10, -4, -5, -55, 8, 3, 
    19, -3, 17, -6, -9, 3, 49, -18, -26, 14, 
    36, -16, -7, 25, 35, -3, -7, -12, 36, -58, 
    63, 17, -16, -3, 4, 8, -9, 1, 4, 2, 
    4, 17, -16, 38, -29, 17, 18, -36, 1, 36, 
    63, -21, -22, -24, 4, 6, 15, 9, -12, 10, 
    -4, -6, 15, 25, -12, 3, -2, 27, 16, 48, 
    11, -79, 11, 6, 17, 12, 1, -21, 7, 0, 
    -6, 27, 70, -17, -31, -22, 20, -11, 7, -38, 
    37, 17, -1, -14, 5, 19, -15, 0, 0, 16, 
    3, -8, 5, -44, -14, 6, 15, -7, -8, -7, 
    14, 7, 38, -16, -19, -10, 20, -21, 29, -2, 
    -15, -9, -14, 7, -7, -6, 19, 33, 1, 30, 
    -4, -11, 22, -31, 7, 52, 46, 2, -49, 25, 
    -23, 12, -7, -13, 5, 2, 2, -27, -3, -16, 
    10, -24, 6, 4, 13, 14, -19, -43, 14, 12, 
    -6, 2, 1, 12, 6, -23, -3, -21, -31, 14, 
    -8, -1, 2, -16, -19, 3, 19, -8, 0, 9, 
    -1, 9, -27, 4, 14, -6, -5, 25, -21, -3, 
    8, -2, -9, 1, 22, 6, -4, -72, 22, 72, 
    -2, -8, -31, 5, -16, -4, -4, -7, 1, 10, 
    -11, 17, -5, -29, -9, 8, 18, -6, -6, 6, 
    4, -25, 1, 13, -4, -4, 15, 14, 22, 30, 
    8, -9, -11, -21, 18, -1, 9, -9, 27, -6, 
    -23, 3, -6, -11, -28, 29, -41, -28, 1, -18, 
    4, -40, 2, 28, -30, -18, 9, 2, -27, 19, 
    -14, 24, -28, -12, -22, -27, 50, -19, 17, -6, 
    -25, 10, 4, -4, -9, -30, 3, 8, -4, -10, 
    -13, 4, -2, -13, -5, 6, -11, -13, 12, 2, 
    -7, -11, 9, -37, -3, 72, -8, 9, -24, 4, 
    -13, 2, -14, 9, 4, -3, -46, -12, 38, -12, 
    7, -10, -7, 6, -9, -22, -5, 24, -12, -23, 
    13, 19, -34, -5, 15, 35, -48, -5, -19, 31, 
    -26, -24, -9, -5, -13, 14, -10, -34, 32, -31, 
    -17, -2, 2, -10, 12, 15, 0, -4, 7, -6, 
    -11, 1, -2, 9, -15, -7, -19, 1, -13, -85, 
    9, -14, 14, -12, 13, -12, -23, -1, -51, 7, 
    -13, 11, 4, -6, 9, -9, 7, 0, -5, 2, 
    5, 5, -11, -3, 9, 7, -4, 0, 7, 29, 
    -12, -12, 6, -1, 6, 10, -2, 7, 4, -11, 
    -41, 8, 22, -6, -1, -4, -6, -2, 7, 24, 
    -1, 6, -2, -6, -24, -3, -7, -5, -1, -2, 
    9, 38, -26, -42, 4, -28, 16, -23, 26, -16, 
    2, 2, 3, 18, -9, -24, 0, 27, 29, -14, 
    5, -5, -11, -8, -6, 2, -20, 0, 12, -3, 
    2, -4, -1, -34, 4, 9, 19, 4, 0, -7, 
    2, 1, -32, 12, -26, 8, 42, 8, -18, 0, 
    -8, 3, -10, 22, 24, 8, 6, -5, -10, -14, 
    -8, 2, -8, 15, 0, 47, -5, -75, -10, -15, 
    42, -12, 1, -32, -2, -1, 28, -14, -9, -7, 
    -7, 11, -3, -18, 0, -17, -4, -14, -9, -7, 
    25, 15, 19, 10, -5, -10, 2, -38, 1, 64, 
    7, -10, -27, 16, -45, 5, -9, -20, 9, 6, 
    5, -6, 7, -21, 8, 21, 8, 14, 4, 6, 
    12, -23, 30, 11, -10, -5, 17, -2, 0, 23, 
    11, 4, 2, 14, -15, 1, -20, 9, 9, -5, 
    -9, 21, 28, -32, -5, -20, -10, -11, 3, 6, 
    1, -6, 5, -18, -11, 5, -9, 20, 2, 7, 
    -15, -2, 6, -72, 7, 3, -49, -16, 8, -5, 
    24, 8, -18, 14, 9, 2, -5, -15, -7, 22, 
    8, 18, 12, -5, -6, -18, -5, -4, -35, -3, 
    10, 12, 1, 56, -8, -127, -6, -21, 18, -9, 
    25, -31, 5, -3, 24, -8, -18, -6, 9, 11, 
    -4, 9, 5, -30, -21, -1, -17, 8, 11, -5, 
    8, 4, 6, -19, -4, -87, 14, 110, -30, 18, 
    -51, 12, -37, 14, -13, 0, 12, -2, -17, 53, 
    16, 8, -10, -9, 0, -22, -9, 1, -1, 16, 
    -3, -12, 5, -15, -15, 2, 4, 31, -17, -27, 
    0, -3, -15, 13, -18, -7, 24, -1, 23, 26, 
    -8, -7, -8, -10, -12, 31, 23, -22, -8, -15, 
    18, -7, 28, 17, -4, 5, 30, 11, 3, -16, 
    3, -13, 14, -17, 23, 17, -18, 2, -1, -22, 
    14, -21, -26, -14, 3, 16, -4, -26, -24, -15, 
    -19, -15, -15, 43, -48, -15, 38, 5, -37, -16, 
    -6, -79, -29, 45, -35, 34, -33, -19, -14, 21, 
    -32, 24, -12, 10, 6, -15, -8, 29, 18, -25, 
    -35, -8, -15, -20, 12, 7, -13, -22, 24, 0, 
    -8, -23, -24, -44, -5, 83, 2, -4, -14, -25, 
    1, 2, -8, 17, 14, 34, 19, -29, -20, -17, 
    -3, -17, -8, 0, 3, -19, 24, 13, -7, -14, 
    23, 13, -23, -51, 15, 31, -12, -25, 12, 3, 
    4, 0, -18, 20, 1, -6, -41, -8, -12, -28, 
    -6, -9, 4, -31, -10, 29, -13, -15, 6, 22, 
    -37, -31, 29, -19, -32, -14, 2, -29, 6, 38, 
    2, 19, 11, -24, 2, -13, -8, 44, -4, -3, 
    9, 20, -12, -26, 12, 7, 14, 11, 7, 14, 
    2, -16, -16, 10, -16, -47, 8, 4, -8, 4, 
    16, -21, 15, -8, 15, 0, 15, -14, 12, -9, 
    7, -40, -27, 13, 31, -2, 7, -13, 9, -19, 
    -27, 2, -4, 37, 7, 2, 3, 10, 6, -33, 
    9, -10, -11, 75, 29, 12, -42, 16, 2, 3, 
    -23, -10, 
};
const TfArray<1, int> tensor_dimension11 = { 1, { 3072 } };
const ALIGN(8) int16_t tensor_data12[192] = { 
    11685, 11685, 11685, 11685, 11685, 11685, 11685, 11685, 11685, 11685, 
    11685, 11685, 11685, 11685, 11685, 11685, 2868, 2341, 2198, 2934, 
    2670, 2803, 2214, 3918, 3754, 2517, 2216, 3408, 2594, 3840, 
    2748, 3317, 11685, 11685, 11685, 11685, 11685, 11685, 11685, 11685, 
    11685, 11685, 11685, 11685, 11685, 11685, 11685, 11685, 3105, 2529, 
    4328, 3171, 2353, 2354, 3598, 3452, 3250, 3726, 3284, 3045, 
    3154, 2868, 3350, 2575, 11685, 11685, 11685, 11685, 11685, 11685, 
    11685, 11685, 11685, 11685, 11685, 11685, 11685, 11685, 11685, 11685, 
    1912, 3450, 3177, 2696, 1477, 2934, 1691, 2750, 2525, 2644, 
    2681, 1957, 3332, 3245, 3476, 2571, 11685, 11685, 11685, 11685, 
    11685, 11685, 11685, 11685, 11685, 11685, 11685, 11685, 11685, 11685, 
    11685, 11685, 2713, 3269, 1671, 3275, 3035, 3065, 2528, 3064, 
    1880, 2278, 2838, 2235, 1840, 2282, 2869, 3080, 11685, 11685, 
    11685, 11685, 11685, 11685, 11685, 11685, 11685, 11685, 11685, 11685, 
    11685, 11685, 11685, 11685, 2304, 3820, 3094, 1819, 2866, 1707, 
    1830, 3107, 2264, 3184, 3316, 1293, 3345, 1339, 2762, 2756, 
    11685, 11685, 11685, 11685, 11685, 11685, 11685, 11685, 11685, 11685, 
    11685, 11685, 11685, 11685, 11685, 11685, 1869, 1825, 2786, 3198, 
    2772, 2467, 2079, 69, 1565, 2836, 3493, 2435, 2281, 2575, 
    2794, 3539, 
};
const TfArray<1, int> tensor_dimension12 = { 1, { 192 } };
const ALIGN(8) int64_t tensor_data13[4] = { 
    1, 1, 1, 32, 
};
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const ALIGN(8) int64_t tensor_data14[2] = { 
    1, 1, 
};
const TfArray<1, int> tensor_dimension14 = { 1, { 2 } };
const TfArray<3, int> tensor_dimension15 = { 3, { 1,1,32 } };
const TfArray<1, float> quant15_scale = { 1, { 0.37061214447021484, } };
const TfArray<1, int> quant15_zero = { 1, { 24 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,32 } };
const TfArray<1, float> quant16_scale = { 1, { 0.37061214447021484, } };
const TfArray<1, int> quant16_zero = { 1, { 24 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<2, int> tensor_dimension17 = { 2, { 1,96 } };
const TfArray<1, float> quant17_scale = { 1, { 0.49877169728279114, } };
const TfArray<1, int> quant17_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<2, int> tensor_dimension18 = { 2, { 1,32 } };
const TfArray<1, float> quant18_scale = { 1, { 0.49877169728279114, } };
const TfArray<1, int> quant18_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<2, int> tensor_dimension19 = { 2, { 1,32 } };
const TfArray<1, float> quant19_scale = { 1, { 0.49877169728279114, } };
const TfArray<1, int> quant19_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,32 } };
const TfArray<1, float> quant20_scale = { 1, { 0.49877169728279114, } };
const TfArray<1, int> quant20_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,96 } };
const TfArray<1, float> quant21_scale = { 1, { 0.07085929811000824, } };
const TfArray<1, int> quant21_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,32 } };
const TfArray<1, float> quant22_scale = { 1, { 0.07085929811000824, } };
const TfArray<1, int> quant22_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<2, int> tensor_dimension23 = { 2, { 1,32 } };
const TfArray<1, float> quant23_scale = { 1, { 0.07085929811000824, } };
const TfArray<1, int> quant23_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<2, int> tensor_dimension24 = { 2, { 1,32 } };
const TfArray<1, float> quant24_scale = { 1, { 0.07085929811000824, } };
const TfArray<1, int> quant24_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<2, int> tensor_dimension25 = { 2, { 1,32 } };
const TfArray<1, float> quant25_scale = { 1, { 0.20393255352973938, } };
const TfArray<1, int> quant25_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<2, int> tensor_dimension26 = { 2, { 1,32 } };
const TfArray<1, float> quant26_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const int8_t tensor_data27[1] = { 127 };
const int tensor_dimension27 = 0; /* empty TfLiteIntArray */
const TfArray<1, float> quant27_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,32 } };
const TfArray<1, float> quant28_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,32 } };
const TfArray<1, float> quant29_scale = { 1, { 0.50526481866836548, } };
const TfArray<1, int> quant29_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,32 } };
const TfArray<1, float> quant30_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfArray<2, int> tensor_dimension31 = { 2, { 1,32 } };
const TfArray<1, float> quant31_scale = { 1, { 0.069128178060054779, } };
const TfArray<1, int> quant31_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const TfArray<2, int> tensor_dimension32 = { 2, { 1,32 } };
const TfArray<1, float> quant32_scale = { 1, { 0.31015703082084656, } };
const TfArray<1, int> quant32_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const TfArray<2, int> tensor_dimension33 = { 2, { 1,32 } };
const TfArray<1, float> quant33_scale = { 1, { 0.0078125, } };
const TfArray<1, int> quant33_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const TfArray<2, int> tensor_dimension34 = { 2, { 1,32 } };
const TfArray<1, float> quant34_scale = { 1, { 0.0078431377187371254, } };
const TfArray<1, int> quant34_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const TfArray<2, int> tensor_dimension35 = { 2, { 1,32 } };
const TfArray<1, float> quant35_scale = { 1, { 0.0078405151143670082, } };
const TfArray<1, int> quant35_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const TfArray<2, int> tensor_dimension36 = { 2, { 1,32 } };
const TfArray<1, float> quant36_scale = { 1, { 0.0078431377187371254, } };
const TfArray<1, int> quant36_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(4) int32_t tensor_data37[1] = { 
    8118, 
};
const TfArray<1, int> tensor_dimension37 = { 1, { 1 } };
const TfArray<1, float> quant37_scale = { 1, { 1.4937642845325172e-05, } };
const TfArray<1, int> quant37_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const TfArray<4, int> tensor_dimension38 = { 4, { 1,1,1,32 } };
const TfArray<1, float> quant38_scale = { 1, { 0.0078431377187371254, } };
const TfArray<1, int> quant38_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(8) int8_t tensor_data39[1*1*1*32] = { 
  /* [0][0][][] */ 81,-11,-53,-79,14,17,-6,-21,-30,-30,-15,-21,-18,34,-40,-23,25,40,-26,-20,-6,-80,-35,127,-38,43,-50,-21,-34,23,-29,79, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 1,1,1,32 } };
const TfArray<1, float> quant39_scale = { 1, { 0.0019045493099838495, } };
const TfArray<1, int> quant39_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const TfArray<4, int> tensor_dimension40 = { 4, { 1,1,1,1 } };
const TfArray<1, float> quant40_scale = { 1, { 0.007163497619330883, } };
const TfArray<1, int> quant40_zero = { 1, { -42 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const TfArray<2, int> tensor_dimension41 = { 2, { 1,1 } };
const TfArray<1, float> quant41_scale = { 1, { 0.007163497619330883, } };
const TfArray<1, int> quant41_zero = { 1, { -42 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
uint8_t ALIGN(4) opdata0[142] = { 107, 116, 0, 109, 112, 0, 8, 96, 0, 0, 0, 96, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 32, 0, 0, 0, 2, 0, 255, 255, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 1, 34, 20, 7, 99, 43, 117, 115, 72, 59, 56, 7, 1, 7, 103, 14, 0, 121, 77, 0, 0, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs0 = { 3, { 1,7,8 } };
const TfArray<1, int> outputs0 = { 1, { 15 } };
const ALIGN(4) uint8_t opdata1[8] = { 1, 0, 0, 0, 0, 0, 0, 0,  }; /* op type 88=UNPACK */
const TfArray<1, int> inputs1 = { 1, { 15 } };
const TfArray<1, int> outputs1 = { 1, { 16 } };
uint8_t ALIGN(4) opdata2[142] = { 107, 116, 0, 109, 112, 0, 8, 32, 0, 0, 0, 32, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 96, 0, 0, 0, 1, 0, 255, 255, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 1, 34, 20, 7, 99, 43, 117, 115, 72, 59, 56, 7, 1, 7, 103, 14, 0, 121, 77, 0, 0, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs2 = { 3, { 16,9,10 } };
const TfArray<1, int> outputs2 = { 1, { 17 } };
const ALIGN(4) uint8_t opdata3[4] = { 3, 0, 0, 0,  }; /* op type 49=SPLIT */
const TfArray<2, int> inputs3 = { 2, { 2,17 } };
const TfArray<3, int> outputs3 = { 3, { 18,19,20 } };
uint8_t ALIGN(4) opdata4[142] = { 107, 116, 0, 109, 112, 0, 8, 32, 0, 0, 0, 32, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 96, 0, 0, 0, 1, 0, 255, 255, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 1, 34, 20, 7, 99, 43, 117, 115, 72, 59, 56, 7, 1, 7, 103, 14, 0, 121, 77, 0, 0, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs4 = { 3, { 0,11,12 } };
const TfArray<1, int> outputs4 = { 1, { 21 } };
const ALIGN(4) uint8_t opdata5[4] = { 3, 0, 0, 0,  }; /* op type 102=SPLIT_V */
const TfArray<3, int> inputs5 = { 3, { 21,3,2 } };
const TfArray<3, int> outputs5 = { 3, { 22,23,24 } };
const TfLiteAddParams opdata6 = { kTfLiteActNone };
const TfArray<2, int> inputs6 = { 2, { 18,22 } };
const TfArray<1, int> outputs6 = { 1, { 25 } };
uint8_t ALIGN(4) opdata7[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs7 = { 2, { 25,4 } };
const TfArray<1, int> outputs7 = { 1, { 26 } };
const TfLiteSubParams opdata8 = { kTfLiteActNone };
const TfArray<2, int> inputs8 = { 2, { 27,26 } };
const TfArray<1, int> outputs8 = { 1, { 28 } };
const TfLiteAddParams opdata9 = { kTfLiteActNone };
const TfArray<2, int> inputs9 = { 2, { 19,23 } };
const TfArray<1, int> outputs9 = { 1, { 29 } };
uint8_t ALIGN(4) opdata10[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs10 = { 2, { 29,5 } };
const TfArray<1, int> outputs10 = { 1, { 30 } };
const TfLiteMulParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 30,24 } };
const TfArray<1, int> outputs11 = { 1, { 31 } };
const TfLiteAddParams opdata12 = { kTfLiteActNone };
const TfArray<2, int> inputs12 = { 2, { 20,31 } };
const TfArray<1, int> outputs12 = { 1, { 32 } };
uint8_t ALIGN(4) opdata13[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs13 = { 2, { 32,6 } };
const TfArray<1, int> outputs13 = { 1, { 33 } };
const TfLiteMulParams opdata14 = { kTfLiteActNone };
const TfArray<2, int> inputs14 = { 2, { 28,33 } };
const TfArray<1, int> outputs14 = { 1, { 34 } };
const TfLiteMulParams opdata15 = { kTfLiteActNone };
const TfArray<2, int> inputs15 = { 2, { 26,0 } };
const TfArray<1, int> outputs15 = { 1, { 35 } };
const TfLiteAddParams opdata16 = { kTfLiteActNone };
const TfArray<2, int> inputs16 = { 2, { 35,34 } };
const TfArray<1, int> outputs16 = { 1, { 36 } };
const TfLiteReshapeParams opdata17 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs17 = { 2, { 36,13 } };
const TfArray<1, int> outputs17 = { 1, { 38 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 38,39,37 } };
const TfArray<1, int> outputs18 = { 1, { 40 } };
const TfLiteReshapeParams opdata19 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs19 = { 2, { 40,14 } };
const TfArray<1, int> outputs19 = { 1, { 41 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteInt8, tensor_arena + 288, (TfLiteIntArray*)&tensor_dimension0, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension1, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1)) },},
  { kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 4, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 12, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 3072, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 128, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 3072, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 3072, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt64, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt64, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 16, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension15, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15)) },},
  { kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension16, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension17, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension18, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18)) },},
  { kTfLiteInt8, tensor_arena + 256, (TfLiteIntArray*)&tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19)) },},
  { kTfLiteInt8, tensor_arena + 224, (TfLiteIntArray*)&tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension21, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21)) },},
  { kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension22, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22)) },},
  { kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension23, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23)) },},
  { kTfLiteInt8, tensor_arena + 160, (TfLiteIntArray*)&tensor_dimension24, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension25, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26)) },},
  { kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 1, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27)) },},
  { kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension28, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension29, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29)) },},
  { kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension30, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension31, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31)) },},
  { kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension33, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33)) },},
  { kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension34, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension35, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35)) },},
  { kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension36, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36)) },},
  { kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38)) },},
  { kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39)) },},
  { kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension40, 1, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension41, 1, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41)) },},
};
const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_XC_conv2d_v2, 142, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_UNPACK, 0, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_XC_conv2d_v2, 142, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SPLIT, 0, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_XC_conv2d_v2, 142, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_SPLIT_V, 0, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_SUB, 0, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_RESHAPE, 0, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_CONV_2D, 0, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_RESHAPE, 0, },
};

// Scratch buffer variables
int scratch_buffer_idx = 0;
const int scratch_buffer_offsets[3] = { 0, 0, 0 };
tflite::MicroContext mc;

// Xcore context and thread variables
xc_context_config_t xc_config;
constexpr int kStackWordsPerThread = 256;
uint64_t xc_stack[kStackWordsPerThread/2];

// Functions to be used as function pointers for TfLiteContext and MicroContext 
static void* AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes) {
  static uint8_t *AllocPtr = tensor_arena + sizeof(tensor_arena);

  AllocPtr -= bytes;
  return AllocPtr;
}

static TfLiteEvalTensor *GetEvalTensor(const struct TfLiteContext *context,
                                       int tensor_idx) {
  return &evalTensors[tensor_idx];
}

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext *context, size_t bytes,
                                       int *buffer_idx) {
  *buffer_idx = scratch_buffer_idx++;
  return kTfLiteOk;
};

static void *GetScratchBuffer(struct TfLiteContext *context,
                                       int buffer_idx) {
  return tensor_arena + scratch_buffer_offsets[buffer_idx];
}

static TfLiteTensor* AllocateTempInputTensor(const TfLiteNode* node, int index) {
      return &ctx.tensors[node->inputs->data[index]];
}

static TfLiteTensor* AllocateTempOutputTensor(const TfLiteNode* node, int index) {
      return &ctx.tensors[node->outputs->data[index]];
}

static void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
}

static void* external_context() {
  return &xc_config;
}

} // namespace

TfLiteStatus model_init(void *flash_data) {
  // Set flash data in xcore context config
  xc_config.flash_data = flash_data;

  // Setup microcontext functions
  mc.AllocateTempInputTensor = &AllocateTempInputTensor;
  mc.AllocateTempOutputTensor = &AllocateTempOutputTensor;
  mc.DeallocateTempTfLiteTensor = &DeallocateTempTfLiteTensor;
  mc.external_context = &external_context;

  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  
  // Set microcontext as the context ptr
  ctx.impl_ = (void*)&mc;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 42;
  for(size_t i = 0; i < 42; ++i) {
    tflTensors[i].data.data = tensorData[i].data;
    evalTensors[i].data.data = tensorData[i].data;
    tflTensors[i].type = tensorData[i].type;
    evalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    evalTensors[i].dims = tensorData[i].dims;
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
  }
  registrations[OP_XC_conv2d_v2] = *(tflite::ops::micro::xcore::Register_XC_conv2d_v2());
  registrations[OP_UNPACK] = tflite::ops::micro::Register_UNPACK();
  registrations[OP_SPLIT] = tflite::ops::micro::Register_SPLIT();
  registrations[OP_SPLIT_V] = tflite::ops::micro::Register_SPLIT_V();
  registrations[OP_ADD] = tflite::Register_ADD();
  registrations[OP_XC_lookup] = *(tflite::ops::micro::xcore::Register_XC_lookup());
  registrations[OP_SUB] = tflite::ops::micro::Register_SUB();
  registrations[OP_MUL] = tflite::Register_MUL();
  registrations[OP_RESHAPE] = tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = tflite::Register_CONV_2D();

  for(size_t i = 0; i < 20; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, nodeData[i].custom_initial_data_size);
    }
  }
  for(size_t i = 0; i < 20; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 1, 
};
TfLiteTensor* model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  36, 41, 
};
TfLiteTensor* model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus model_invoke() {
  thread_init_1(&xc_config.thread_info);
  xc_config.thread_info.nstackwords = kStackWordsPerThread;
  xc_config.thread_info.stacks = &xc_stack[kStackWordsPerThread/2 - 1];
  for(size_t i = 0; i < 20; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      thread_destroy(&xc_config.thread_info);
      return status;
    }
  }
  thread_destroy(&xc_config.thread_info);
  return kTfLiteOk;
}
