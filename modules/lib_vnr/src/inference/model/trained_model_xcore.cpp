// This file is generated. Do not edit.
// Generated on: 26.10.2022 16:42:54


#include "../../api/xcore_config.h"
#include "tensorflow/lite/c/builtin_op_data.h"
#include "tensorflow/lite/c/common.h"
#include "tensorflow/lite/micro/kernels/conv.h"
#include "tensorflow/lite/micro/kernels/fully_connected.h"
#include "tensorflow/lite/micro/kernels/micro_ops.h"
#include "tensorflow/lite/micro/kernels/reduce.h"
#include "tensorflow/lite/micro/kernels/softmax.h"
#include "tensorflow/lite/micro/micro_context.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace tflite {
namespace ops {
namespace micro {
namespace xcore {
extern TfLiteRegistration *Register_XC_conv2d_v2(void);
extern TfLiteRegistration *Register_XC_lookup(void);
} // namespace xcore
}  // namespace micro
}  // namespace ops
}  // namespace tflite

namespace {

constexpr int kTensorArenaSize = 1536;
uint8_t tensor_arena[kTensorArenaSize] ALIGN(8);
template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_XC_conv2d_v2, OP_UNPACK, OP_ADD, OP_SPLIT, OP_XC_lookup, OP_MUL, OP_RESHAPE, OP_CONV_2D,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
  int custom_initial_data_size;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[40];
TfLiteEvalTensor evalTensors[40];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[19];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,32 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0078417863696813583, } };
const TfArray<1, int> quant0_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const TfArray<4, int> tensor_dimension1 = { 4, { 1,1,4,24 } };
const TfArray<1, float> quant1_scale = { 1, { 0.10071022063493729, } };
const TfArray<1, int> quant1_zero = { 1, { 127 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const TfArray<2, int> tensor_dimension2 = { 2, { 1,32 } };
const TfArray<1, float> quant2_scale = { 1, { 11.76453685760498, } };
const TfArray<1, int> quant2_zero = { 1, { 93 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const int32_t tensor_data3[1] = { 1 };
const int tensor_dimension3 = 0; /* empty TfLiteIntArray */
const ALIGN(8) int8_t tensor_data4[256] = { 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -127, -126, -122, -108, -70, 0, 70, 108, 122, 126, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, 
};
const TfArray<1, int> tensor_dimension4 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data5[256] = { 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -126, -108, 0, 108, 126, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, 
};
const TfArray<1, int> tensor_dimension5 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data6[256] = { 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, 0, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, 
};
const TfArray<1, int> tensor_dimension6 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data7[3072] = { 
    -75, 37, 38, 9, 17, 1, -6, 4, 8, -13, 
    -13, 9, 1, -22, 38, 23, 1, -6, 9, 8, 
    -4, -19, 17, 16, -73, 38, 34, 10, 15, 17, 
    -21, -6, 4, -18, 9, -19, -5, -2, 34, 44, 
    1, -9, -13, 9, 1, 0, 8, 1, 8, 12, 
    2, 20, 9, 25, -9, 4, 13, -11, -3, -24, 
    -2, 4, 30, 17, 17, -24, -29, -7, -10, 9, 
    16, 1, -29, -7, -1, -9, 2, 13, 15, -8, 
    29, -16, 2, -10, 2, 3, 6, 12, 16, -29, 
    -17, -9, -3, 9, 27, 0, -20, -1, -16, -45, 
    6, 1, 2, 2, 1, 4, -30, 0, 4, -32, 
    8, 25, 27, -6, -20, 2, 15, -10, -2, -4, 
    -9, 10, 7, 8, 26, 29, -16, 13, -13, 17, 
    8, -19, 8, -2, 26, 12, -12, 15, 0, 16, 
    -10, -2, 16, -12, 9, 15, 5, 13, 7, -22, 
    -21, 2, -3, 3, 20, -3, -11, 1, 40, 14, 
    5, 24, 26, 38, 58, 24, -13, 35, 20, 24, 
    33, 20, -10, -12, 13, -11, 2, 4, -11, -22, 
    -19, -22, -19, -18, 8, 10, 4, 16, 20, 13, 
    -41, -5, 16, -7, -5, 19, 17, -13, 2, 21, 
    -8, 4, 23, 5, -39, -11, -5, 8, 21, 23, 
    -2, -10, -5, 8, 12, 14, 1, 0, -5, 8, 
    -1, -28, -17, -2, -3, 11, -29, 37, 10, -16, 
    -5, 36, 24, -7, -9, -5, 6, 6, -6, -27, 
    0, 12, -14, -5, -24, 4, 26, 10, 0, -11, 
    -24, 27, -5, -16, -10, 21, -1, 0, 17, 27, 
    -22, 10, -18, -7, -5, -21, -19, 11, 0, -19, 
    32, 3, -26, -9, -3, -21, -10, -14, 18, 7, 
    6, -7, 21, 38, -21, -21, -18, -11, -4, 13, 
    9, 19, -18, -54, -11, 16, -35, -29, -17, -7, 
    -19, -9, 8, -55, -35, -20, 3, 7, 6, 19, 
    3, 14, -2, 12, 9, 16, -17, -62, 3, -2, 
    -13, 32, 13, 19, 57, 2, 58, 54, 9, 5, 
    26, 23, -8, -1, 17, 10, 24, 13, 9, 6, 
    20, 4, 5, 0, 2, 13, -13, 12, 8, -12, 
    26, 29, -2, -5, 32, 45, 11, 13, -8, -13, 
    -19, 8, -18, -40, -12, 3, -21, -20, 3, 40, 
    25, 7, 15, 12, 11, 0, -1, 0, 9, -8, 
    -7, 5, -6, -22, 1, -15, -19, -24, -36, -20, 
    0, 26, 46, 44, 32, 5, -7, 2, -37, -10, 
    5, -17, 19, 25, -1, -24, 16, 19, 1, 2, 
    14, 7, -8, 14, -23, 32, -10, 11, -23, 10, 
    -10, -30, -4, 5, 24, 16, -20, -30, 0, -33, 
    3, 21, 6, -13, 16, -2, 20, -14, -5, 28, 
    -8, 33, -20, 15, -3, 14, -6, 15, 3, 2, 
    30, 66, 15, 8, 32, -31, -4, 46, 3, 28, 
    51, 1, 1, 27, 8, -3, -22, -1, 6, -12, 
    -4, -2, -2, 6, -7, 10, -22, -7, 10, -31, 
    4, -3, -38, -12, -21, -15, 28, 24, 9, 8, 
    22, 20, -25, -29, 10, -21, 10, 26, -1, 12, 
    11, 11, -11, -20, -5, -7, -35, -14, -11, 10, 
    17, 9, 1, 6, -7, 16, 15, -13, 26, 21, 
    -6, -4, -6, -8, 21, 5, -4, 6, -81, 49, 
    38, 16, 13, 8, -28, -9, 15, -14, -19, 12, 
    -10, 3, 11, -4, -24, -25, 24, 46, 17, 8, 
    -20, -32, -23, 11, -22, -1, -16, 0, -26, 15, 
    20, -21, -2, -20, -30, -22, 17, 0, -47, -44, 
    22, 30, 30, 23, -15, -39, -18, 1, -15, -23, 
    -11, 5, 15, 19, 8, -30, -25, -10, -15, 3, 
    23, -4, 17, -29, -21, 0, -7, 2, 14, -7, 
    -16, 13, 15, -24, -19, 6, 3, 29, 10, -11, 
    -7, 7, -4, -13, 17, 47, 21, 6, -1, -23, 
    -7, -3, 16, -20, -12, 26, 28, 4, 28, 37, 
    -25, -11, 10, -20, -24, 18, -5, -42, 6, 50, 
    1, 4, 6, 33, -7, -7, 0, 7, -4, -1, 
    -2, -17, 4, -32, -21, -5, -19, 14, 14, -4, 
    -7, 19, 55, 11, 9, 4, 46, 63, -1, -14, 
    -9, -1, 10, 1, 11, 10, -5, -1, 2, -29, 
    -1, -4, -3, -21, -2, -10, -24, -12, -5, 4, 
    -19, -2, 28, -6, -55, 7, -13, -5, 10, 29, 
    1, 6, 13, -16, 3, -5, 17, 10, -39, -11, 
    13, -2, 17, 7, -2, -36, -13, 24, 10, 20, 
    13, -17, -9, -9, -8, -37, -20, 3, -28, -13, 
    30, 8, -24, -2, 10, -21, -1, -11, 5, -2, 
    22, -4, -17, -17, 11, 20, 4, -2, -42, 12, 
    24, -8, 9, 10, -3, 18, 12, -29, -28, 4, 
    9, -24, 1, 17, 16, -18, -22, -29, 9, 8, 
    -11, 29, -10, -35, 28, 29, -29, 12, -8, -17, 
    -7, -5, 19, -11, 5, -7, 24, 16, -19, -22, 
    -32, -27, 12, 16, 17, 18, -12, -21, 31, 2, 
    -41, -16, -4, -9, -30, 6, -12, -54, -15, -13, 
    -11, 31, 5, 1, 14, -1, -5, -7, -15, -23, 
    -25, -61, -8, 5, -44, -35, 3, 35, -14, -2, 
    -9, -10, -13, 10, 13, 28, -18, -19, 10, 0, 
    2, 27, 6, 3, 9, 0, 14, -4, -5, 24, 
    -2, 16, 16, 13, 39, 39, -17, -2, 31, 40, 
    -24, 7, -4, -20, -4, 18, -21, -37, -23, 1, 
    1, -22, -20, 19, 18, 4, 20, 7, -4, -4, 
    10, -15, 3, -7, -41, -4, 0, -34, 9, 27, 
    2, -41, -27, 8, -4, -24, 39, 7, 36, 3, 
    5, 25, -18, -12, -17, -18, 0, 23, -6, -23, 
    15, 9, 0, -1, 30, 45, 18, 49, 9, 30, 
    29, -14, 11, -5, 22, 23, 1, 7, 30, -5, 
    -12, -9, 4, -11, 9, 25, -7, 4, -5, -18, 
    2, -4, 4, 6, -12, 37, -9, -4, 0, 28, 
    24, 8, 4, -1, -28, -6, 6, -25, -2, 36, 
    -11, 1, -13, 3, 35, -27, -28, 20, 5, -21, 
    -15, -19, 0, 3, 4, -2, 2, -8, -4, 0, 
    -31, -17, 22, -41, -23, 6, -29, 10, 24, -49, 
    -33, 24, -20, 2, 24, 2, -42, -51, 6, 5, 
    -5, 21, 0, 2, 9, -5, -10, 0, 1, 0, 
    -51, 4, -4, -22, -7, -2, -13, -3, 19, 12, 
    -48, -47, 22, -20, 5, -12, 14, -11, -7, -11, 
    10, 4, -125, 15, 74, 10, 26, 6, -26, -19, 
    -9, -15, -11, 28, -3, -27, 7, 7, 5, -9, 
    -13, -5, 3, 1, 8, 22, -32, -27, 3, 0, 
    -27, 5, -22, 8, 9, -3, 74, 58, -1, -45, 
    25, 12, -52, -64, -24, 40, 31, 23, -13, 6, 
    -6, 8, 23, 45, 18, -13, -18, -4, 25, -32, 
    -30, -18, -15, -2, 23, 15, 18, -21, 10, 18, 
    39, 28, 0, 17, -4, 12, 15, -26, -7, 18, 
    27, 23, 26, -46, -31, -27, -23, -2, 44, 19, 
    36, -6, 0, -11, 15, 3, -15, -9, -21, 41, 
    38, 6, 48, 38, -55, -42, -33, -65, -28, 14, 
    -20, -68, 5, 49, -2, -43, -18, -32, -17, -25, 
    -2, 4, -19, 14, -13, -13, -18, -31, -32, 2, 
    -16, 12, 33, -13, -12, 19, 43, 2, -23, -6, 
    30, 35, -4, -28, -17, -14, -20, 5, 3, 21, 
    -5, -15, -2, 12, -10, 9, -4, -7, 0, 4, 
    -21, -10, 0, -31, -80, -19, 28, -66, -107, -45, 
    -16, -34, -14, -2, -6, 25, 65, 3, 20, 59, 
    32, 14, 32, 25, 21, 6, 10, -2, -20, -27, 
    -17, 4, 11, 2, -6, -1, 27, 50, 29, -23, 
    41, 9, -2, 3, 50, 44, -20, 8, 26, 12, 
    14, 18, -36, -44, -43, -8, -17, 12, 2, 6, 
    -7, -3, -37, 10, 2, 13, 1, -2, -37, 10, 
    45, -21, -27, 12, 8, -10, 3, 37, 27, 23, 
    -5, -32, 17, 44, -6, 1, -37, -3, 12, 15, 
    -5, -12, -8, -4, 12, 7, 2, 10, -23, 5, 
    20, -17, -44, -19, -10, -4, 38, 55, 58, 40, 
    0, -56, -3, 7, -26, -22, -5, -11, 7, 2, 
    20, 25, 17, 25, 7, 13, -11, 1, 6, 4, 
    -5, 5, 13, 13, 59, 37, 127, 95, 7, 19, 
    36, 92, 19, 2, 28, 9, 27, 32, 8, 16, 
    -27, -27, -26, -14, 10, -2, -1, 9, 24, 15, 
    8, -6, -6, -5, -67, -49, -61, -84, -36, -23, 
    -82, -69, -33, 4, -23, -16, -14, -34, -30, -31, 
    -15, -21, -12, -1, -27, -13, -24, 7, -15, 3, 
    7, 15, 1, -2, -9, -29, 8, 15, -57, 15, 
    41, 31, 51, 80, 21, -10, 26, 55, 22, -24, 
    -6, 21, -9, -29, -12, -4, -14, -4, -20, -31, 
    3, 6, -19, -33, -4, -1, -3, 13, 8, -14, 
    -67, -41, -47, -39, -38, -94, -59, -53, 11, 32, 
    34, 30, -4, -29, 2, 20, -11, 3, 15, 11, 
    17, -12, 8, -5, -3, -18, -7, 9, -19, 3, 
    -50, -29, -10, 22, 15, 4, -3, -31, -19, 23, 
    25, -38, -16, 25, 19, -15, -20, -25, -7, 4, 
    21, 17, 5, -12, -14, -9, -5, 12, -16, -17, 
    -1, -15, 0, 6, -62, -22, 45, -30, 20, 46, 
    2, 23, 0, -42, -40, 20, 17, 24, 12, 18, 
    20, 20, 21, 0, 0, 13, -4, 15, 9, 1, 
    -15, -30, -8, 32, 18, 75, 63, -4, -21, -29, 
    -39, 10, 48, -3, -57, -46, 20, 10, 34, 43, 
    17, 23, 15, 7, 13, -20, 8, 18, 13, 20, 
    10, -13, -24, -29, 19, -8, 28, 0, 28, 20, 
    -29, 27, -5, -8, -5, -3, 18, 11, 13, 10, 
    8, 11, 0, 9, 9, -28, -10, -15, -5, 24, 
    17, 10, 16, 39, 24, -10, -20, -17, 1, -11, 
    -10, 56, 42, 27, 7, 17, 6, 2, 15, -22, 
    11, 12, -13, 20, -10, -18, -13, 2, -20, -15, 
    12, -12, -14, 10, 3, -26, -27, 11, -43, -81, 
    -22, 22, 36, 36, 32, 37, 17, 6, 19, 21, 
    -24, 3, -12, -17, 11, -6, 7, 36, 29, 8, 
    -9, 22, -4, 18, 11, 35, 17, 2, -10, 26, 
    4, 1, 10, 16, 5, 15, 26, 12, 32, -8, 
    -9, -3, 0, -4, 21, 2, -5, 15, 32, 1, 
    10, -18, 11, 34, 6, 8, -21, -5, 2, 3, 
    -55, -13, 23, -1, 4, -23, -2, -27, 5, 23, 
    -19, -22, 28, 1, 10, 30, 2, 9, 0, 12, 
    11, 7, -12, 0, -24, -3, 3, 16, 25, 84, 
    12, -11, 31, -20, -32, 7, -4, -10, 5, 26, 
    -18, -30, -16, -8, -6, -1, -8, 5, -8, -1, 
    0, 12, 0, 29, -1, -33, 20, 3, -17, 0, 
    -29, -10, -21, -18, 10, 19, 16, 26, 6, 14, 
    -2, 4, 5, -16, -14, 12, 0, -15, -3, -8, 
    6, -5, -31, 8, -16, -13, -3, -17, 32, 22, 
    -25, 35, -33, -62, -26, 26, 7, 6, 2, -13, 
    -12, -1, 12, 17, 12, 4, -1, -21, -13, -26, 
    -9, -23, -18, -6, -19, 20, -18, -24, -20, 6, 
    8, 15, 5, -14, 18, -1, 2, 2, -28, -21, 
    -14, -14, 1, -8, 34, 43, 45, -12, -20, 9, 
    -11, 8, -1, 7, -4, 8, 18, -8, 64, 33, 
    22, 21, -13, -21, 17, -30, -20, -7, -5, -13, 
    3, -19, -15, -18, -28, -16, -2, 14, 3, 22, 
    18, -5, 14, 13, -8, -25, -14, 7, 20, -27, 
    -3, 15, -9, -21, -6, 7, 0, 7, 2, 16, 
    -7, -8, -6, -58, -33, -24, 0, -29, 24, 17, 
    25, -33, 3, 54, 30, 27, -3, 20, 0, 4, 
    7, 6, -10, 19, -16, 0, -25, -48, -1, -17, 
    -20, -9, 19, 0, 4, 39, 19, -8, -3, 11, 
    4, 17, 1, -12, -12, 0, -5, 9, 31, -2, 
    -1, -25, 15, -35, -24, 5, 11, 13, -13, 27, 
    8, 18, -3, 38, -18, 9, 30, -10, -12, 22, 
    -25, -6, 25, 0, 21, -26, -22, -17, 17, 30, 
    17, 5, -23, -14, -2, 3, -3, 28, -8, -3, 
    1, -13, 9, -21, -12, 1, -19, 25, 4, -14, 
    8, 18, 13, 9, 7, -37, 26, 6, -22, 10, 
    4, 2, -1, -21, 6, 2, 4, -6, -4, 5, 
    10, 23, 4, -5, 17, -14, 3, -12, 47, -15, 
    -8, 12, -3, -15, 3, 12, -4, 3, 16, -2, 
    9, 10, 7, -10, -2, 5, -27, 1, 20, -13, 
    1, -11, 36, 0, -31, 30, 17, 19, 41, 41, 
    20, 55, 1, -13, -8, -2, -20, -5, 3, -10, 
    -41, 18, -5, 18, 10, -2, 25, -7, 13, 0, 
    2, -8, 21, -10, -4, 20, -1, -20, 9, -2, 
    -23, -46, 19, 28, -26, 13, -16, -27, -1, -15, 
    -20, -4, -13, 6, -6, -14, -30, 5, 6, -26, 
    -2, 27, 20, -18, -11, -52, 29, 35, -2, -7, 
    -15, -15, -2, -17, -8, 36, 3, -4, -30, -4, 
    19, 16, -5, 4, 12, -7, -8, 16, -33, -48, 
    -8, -26, -32, -37, -19, -25, 7, -25, -29, 2, 
    3, -43, -32, -46, -7, 2, 14, 34, 40, 18, 
    -11, -20, 18, 1, 1, -9, -1, -11, 1, -5, 
    0, 39, 6, -23, -8, 14, -18, -11, -6, 10, 
    -15, -18, -2, -24, 2, -17, -22, 10, -27, -11, 
    17, 28, 35, 2, -7, -9, -19, 12, 8, -4, 
    4, 0, 14, -20, 2, -34, -7, 20, 12, -15, 
    -26, -44, -30, 3, 12, 31, 22, -18, 7, 1, 
    3, -31, -16, 32, -22, 1, 39, 9, 32, 26, 
    16, -15, -12, 27, -21, -11, -6, -25, -45, -14, 
    -17, -37, -13, 13, 15, -20, 11, 40, -26, 15, 
    1, -39, -10, 12, -9, -14, 0, 18, 15, 26, 
    2, 17, -6, -6, -12, 14, -18, 37, -9, -33, 
    57, 16, -24, 20, -3, -39, -14, 30, -11, -24, 
    3, 27, 10, 19, -3, -12, 20, -13, 11, 26, 
    7, 3, 4, -15, -4, 1, -24, -7, -23, -12, 
    -8, -9, 15, 9, 11, 27, -4, 24, 13, -13, 
    18, -9, 21, 6, 7, 9, 2, 33, 1, 17, 
    16, -1, 12, -23, -11, -9, 1, 12, -15, 42, 
    14, 12, 17, 33, 21, 27, 24, 15, -2, 5, 
    5, 2, 21, 12, 12, 16, 10, -6, -4, 8, 
    7, -22, -25, 28, -17, -15, -22, -7, 2, 25, 
    19, -8, 59, 13, 19, 21, 0, -29, 4, 19, 
    20, -30, -38, -14, -4, -14, -27, -28, -23, -15, 
    28, 35, 16, 29, 31, 1, -4, 1, 3, -10, 
    -19, 21, 28, -26, -13, -10, -3, -30, 25, -6, 
    -31, -30, -56, -15, 43, 34, 0, 27, -18, 13, 
    -15, -19, -18, 32, 34, -30, -14, 16, -3, -14, 
    2, 0, 9, -10, 1, -12, -9, 22, -7, -30, 
    -14, -31, -5, 40, -3, -37, -16, 17, 11, -47, 
    7, -4, -34, -3, -7, 11, 17, 15, 0, -24, 
    3, -4, 38, 7, -17, -18, 15, -22, -19, 9, 
    -7, -7, -46, 11, 22, -18, -20, -43, -5, 10, 
    15, 23, -31, 5, -25, 1, 27, 24, -11, -20, 
    -9, -32, 4, 24, -2, -15, -3, -14, 13, 10, 
    -34, -1, -6, 20, 15, -13, -33, -17, -36, -4, 
    56, 34, 13, -37, 0, -3, 27, 37, 25, -4, 
    7, 9, -9, 14, 20, 10, 1, 6, 14, 12, 
    4, -12, 20, 32, 41, 40, -4, -22, -5, 16, 
    37, 58, 9, -38, 32, 9, 12, 16, 34, -10, 
    -10, -1, 2, -15, 20, -7, -9, -19, 19, 18, 
    -29, -10, 36, 5, 1, 0, 39, 11, -30, 27, 
    3, 23, 14, 6, -33, -35, -11, -13, 13, 5, 
    -31, -10, 32, -23, -46, -2, -8, -13, 9, 24, 
    6, 6, -2, 0, -3, -29, -39, -46, -57, 2, 
    -12, -9, -8, -20, -28, -5, 8, -24, -34, 1, 
    -4, -35, -32, -19, -13, -10, -20, 11, -3, -23, 
    -47, -4, 22, -11, 12, 20, 66, 23, -15, -72, 
    5, 30, 16, 41, 34, -3, 13, -19, 5, 27, 
    9, 8, -30, 14, -10, -6, -1, 8, -10, 3, 
    -10, 35, -36, -3, 62, 54, -5, -1, 36, 52, 
    78, 10, -4, 26, -5, -43, -54, -13, -9, 3, 
    5, -4, -8, 10, -6, -15, 3, 4, 1, 7, 
    -19, -6, 10, -16, -21, -19, -17, -10, 29, 58, 
    49, 28, 48, 22, -28, -46, -67, -66, -18, -30, 
    18, 16, 22, 27, 13, 16, 31, -14, 3, -15, 
    -16, -16, 19, -6, -9, 6, 19, -10, -16, -57, 
    16, 45, 45, -22, -24, -37, -51, -8, 9, 32, 
    51, 0, -24, -21, -18, -16, -4, -34, 0, -15, 
    40, 0, 48, 18, -12, -19, -22, 17, -6, 14, 
    75, 74, -7, 5, 43, 2, 53, 68, 20, -27, 
    -8, 28, -13, -50, -21, -56, -9, -20, -55, -51, 
    -9, 21, 16, 17, 12, 20, -1, 4, -28, -17, 
    -11, 60, -12, -15, 102, 27, -25, 19, 7, -51, 
    -8, 39, -16, -34, -12, 37, 0, 12, 1, -8, 
    -31, -23, -2, 17, -6, 5, 3, -1, -9, -18, 
    -34, 5, -35, -30, -31, -33, 3, -17, 1, 14, 
    9, -5, -17, -17, 0, -26, -14, 21, -19, -14, 
    19, -8, -21, -24, 21, 28, 28, -6, -5, 9, 
    18, 11, -33, 57, 37, -15, -42, -5, -37, -33, 
    -13, -4, -35, -36, -51, -27, -33, 15, 1, 1, 
    -9, -10, 1, 0, 16, 15, -9, 32, 7, 9, 
    6, -19, 9, -9, 6, -51, -58, -104, -52, 19, 
    1, -23, 8, 31, 40, -2, -49, -40, -28, -34, 
    18, 71, 34, -7, 9, -7, -24, 15, 19, 1, 
    12, 3, -13, 2, -12, 8, 25, -30, -46, -23, 
    -15, 6, 37, 43, 15, -28, -31, 28, 57, 48, 
    17, 13, 9, -14, -9, -19, -16, -36, -22, -4, 
    -22, 34, -8, -10, -9, -10, -10, -4, 8, 2, 
    29, 84, 18, -2, 11, 4, 42, 79, 65, 10, 
    23, 41, 6, -55, -2, 42, -6, -1, -40, -12, 
    -19, -22, 3, -7, 6, 30, 41, -4, -29, -21, 
    29, -5, 23, 56, 29, -34, -54, 25, 42, 12, 
    -15, -44, -6, 37, -4, 18, -9, -40, 10, -1, 
    15, -24, -13, -16, -23, -42, 8, 22, 11, 6, 
    -12, -18, -14, -3, -24, 45, 0, 34, 5, -20, 
    -38, 0, -45, 20, 66, 47, 27, -6, -38, -20, 
    20, 33, 4, 19, -8, 2, -3, 18, 5, -10, 
    14, -9, 25, 2, 18, -5, -14, 17, -9, -8, 
    -40, -84, -77, -59, -8, 31, -16, -54, 3, -5, 
    -37, -18, 18, -18, -17, -25, -21, -19, 24, -4, 
    -19, -17, 9, 5, -15, -10, 31, -30, -69, -79, 
    31, -4, -52, 26, 17, 26, 51, -3, -51, -46, 
    -44, -15, 24, 32, 11, 15, 9, 27, -21, -4, 
    12, 4, 8, -3, 4, -9, 4, -5, 10, -18, 
    -19, -17, -11, 44, 42, 15, 30, 2, 0, 19, 
    53, -3, -15, 43, 15, 7, 13, -6, -9, -19, 
    -28, -1, 
};
const TfArray<1, int> tensor_dimension7 = { 1, { 3072 } };
const ALIGN(8) int16_t tensor_data8[64] = { 
    15822, 15822, 15822, 15822, 15822, 15822, 15822, 15822, 15822, 15822, 
    15822, 15822, 15822, 15822, 15822, 15822, 3872, 1649, 3135, 2889, 
    1728, 2652, 1977, 3460, 1875, 815, 3023, -3903, 5703, 3068, 
    1568, -1348, 15822, 15822, 15822, 15822, 15822, 15822, 15822, 15822, 
    15822, 15822, 15822, 15822, 15822, 15822, 15822, 15822, 2170, 2625, 
    1507, 1215, 2078, 113, 6167, 2850, 2355, 9569, -2378, 622, 
    -327, 2012, 2654, 3539, 
};
const TfArray<1, int> tensor_dimension8 = { 1, { 64 } };
const ALIGN(8) int8_t tensor_data9[4096] = { 
    -9, 24, -24, 67, 2, 34, -75, -1, 2, -1, 
    27, 16, 27, -22, 28, 3, 26, 5, 25, 25, 
    -3, -16, -34, -5, -3, -13, 32, -28, 22, 9, 
    -10, -10, -1, -1, 0, 20, 13, 29, 26, 3, 
    32, -28, 17, -77, -13, -36, 3, 16, -16, -11, 
    -16, -29, -70, -27, 19, 18, 1, -37, -20, 1, 
    1, 0, 37, -23, 6, 4, 4, 1, -9, -6, 
    6, 0, -7, -10, 23, -10, -22, 2, 5, 0, 
    -3, 2, 4, -1, -2, -19, 2, 18, -1, -7, 
    -11, -18, 0, -3, 6, 7, -20, 14, -10, 5, 
    -18, -17, 28, -15, -19, 4, 8, 1, 3, -14, 
    19, 3, -39, 8, -4, -11, 10, -13, -5, 49, 
    3, -7, 8, 17, 15, 14, -32, 19, 2, -4, 
    -15, 14, -34, -7, 38, 0, -52, 1, -6, -6, 
    23, 8, 22, -16, -49, -15, 7, -7, -27, -3, 
    40, -35, -11, 29, 10, 14, 1, -22, -45, -2, 
    69, 45, -2, -12, 9, 33, 29, -3, -4, -3, 
    -59, 19, 19, 3, -7, -14, -41, 14, 7, 9, 
    9, 15, -6, -33, -15, -14, 57, -34, 14, 11, 
    -38, -52, 26, 19, 10, -44, -7, 3, 12, -20, 
    45, 1, -29, -24, 48, -40, 25, 38, 17, -4, 
    7, 4, -21, 7, -77, 8, 26, -32, 43, -28, 
    4, 25, -26, 9, 16, -22, 26, -5, 31, -5, 
    1, -45, -10, -17, -34, -19, 34, 23, -25, -20, 
    12, -21, -21, 31, -10, 20, 5, 3, 35, 17, 
    39, -29, 11, 10, 24, 24, 13, 25, 11, -20, 
    -13, 16, 28, -21, -25, -1, -40, 30, 15, 24, 
    12, -15, -1, 20, -15, 18, -14, -34, 6, -3, 
    -3, 39, 29, -10, -11, 7, -22, 9, 21, -24, 
    9, 7, 13, -55, 63, -7, 7, 14, -19, -2, 
    14, 16, 2, -5, -4, -5, -23, 1, -10, 16, 
    8, -13, -12, -2, -28, 26, -27, -27, -8, 7, 
    -15, 16, 16, 44, -27, -21, 14, -12, 29, -35, 
    -13, -25, 68, -2, 21, 0, 61, -11, -5, 21, 
    -24, -13, 55, -35, -10, 18, 3, -20, 2, 16, 
    -11, -7, -3, 22, -4, -35, 10, -29, 31, 20, 
    -1, 3, -16, 0, -1, 0, -3, 4, 22, 9, 
    -26, -6, 14, 13, 15, -1, -6, -13, -10, 23, 
    -4, 9, 31, -2, 16, -14, -14, -11, 24, -31, 
    -17, 11, 19, 7, 46, 3, 90, 37, 33, 9, 
    13, 39, -24, -15, -18, -15, 2, 6, -58, 72, 
    -33, 6, -41, -32, 23, -1, 30, -11, -4, 8, 
    -1, 1, 8, 11, -31, -48, -1, 5, -4, -39, 
    8, -2, 9, 13, 2, 29, 48, -14, -12, 7, 
    -15, 12, 12, 30, -22, 29, 11, -9, 9, -5, 
    5, 5, -3, 12, -4, 4, -3, -10, 1, -1, 
    -31, -3, -13, 0, -5, -12, 6, 2, -13, -5, 
    1, -10, -24, -22, -24, -9, -5, 2, -2, 6, 
    -21, 16, -14, 6, 12, -6, 3, -14, 6, 1, 
    -9, -4, -18, -13, 1, -15, -33, -13, -15, 5, 
    12, 5, -10, 2, -5, 2, -1, -2, 1, -18, 
    0, -9, 42, -41, 24, -30, -29, 15, 18, -6, 
    48, 2, 1, -45, 18, 40, -9, 19, -17, -19, 
    -5, 11, -5, 15, 0, -13, -17, -35, -2, 14, 
    5, 0, 24, 2, 42, 14, 14, 2, -22, -18, 
    -8, -23, 5, -9, 10, -18, -55, -20, -20, 29, 
    -3, -25, 0, -11, -9, -28, 1, 9, 20, -16, 
    -1, -18, 1, 12, 17, -13, -15, 0, -35, 16, 
    -14, 8, 13, 27, 47, 8, 29, -40, 45, -15, 
    31, 7, -44, 14, -24, -29, 5, 38, -28, -17, 
    -11, 19, -5, -6, 19, 29, -15, -9, 4, -40, 
    -27, -6, -7, -17, 36, 10, 12, 16, -46, 18, 
    70, 22, 8, 9, 17, 13, -10, -16, 6, 12, 
    1, -57, -5, 36, -24, 44, 44, 16, -24, 24, 
    13, 5, 34, -6, -15, 9, 74, 6, -22, -15, 
    -38, 38, 26, 17, 26, 10, 37, 7, 0, 30, 
    -26, -57, -15, 21, -28, -6, -12, -55, 14, -14, 
    11, -66, -21, 18, 36, -28, -35, -4, 30, 15, 
    3, -23, 14, 36, -12, -59, -35, 25, -6, 6, 
    -12, 17, -18, 38, 27, 16, 49, 16, 25, 47, 
    29, 50, 50, 17, 37, 53, -1, -2, 43, 27, 
    18, 0, -55, 2, -31, -18, 77, 0, 17, -8, 
    3, -25, -5, 36, -36, 8, -13, 25, -13, 26, 
    14, -54, -6, -15, -5, -29, -27, -22, 2, 24, 
    -8, -7, 23, 12, 31, 3, 15, -26, 15, -13, 
    11, -3, -2, -5, -15, -9, 2, -2, -9, -9, 
    -1, 27, 7, -14, 16, 20, 21, -2, 56, 73, 
    -21, 15, 0, 6, 40, -44, -17, -5, -33, -29, 
    27, 22, -6, 8, 14, -45, -4, -32, -58, 13, 
    11, 5, 1, -6, 10, -72, 30, -42, 16, -13, 
    -13, 11, 35, 13, 12, -20, 29, 16, 22, -5, 
    4, -1, -17, -21, -25, -6, 5, 0, -28, -10, 
    -19, -35, 17, 36, -7, 10, 8, 3, 34, 38, 
    -18, -3, 5, 36, 1, 25, 27, -2, -1, 38, 
    -4, -20, -34, -23, 3, -27, 29, -35, 19, -42, 
    -2, 19, -20, 20, -6, 10, 21, 45, -10, -34, 
    11, -4, -19, -15, -3, 8, -27, 8, -9, -42, 
    -13, -1, -14, 11, -29, 29, 23, -10, 40, -20, 
    2, -5, 10, -1, 2, 13, -22, 9, 21, -31, 
    -4, -3, 28, -13, 11, -16, 32, -34, -11, 3, 
    22, -5, -6, -63, -3, -5, 6, -27, 37, -15, 
    13, 12, -14, -40, -17, 10, 2, 29, 5, 5, 
    9, 1, 45, -48, -20, -28, -11, -21, -19, 35, 
    2, -31, 9, 115, -49, 2, -6, 12, -43, -53, 
    -8, 35, -28, -24, -74, -6, 1, -14, -25, -31, 
    -31, -35, 34, -3, 1, -14, 22, 22, 18, 4, 
    56, 56, 19, -3, -5, -43, 4, -34, 16, -15, 
    -12, 10, 28, -25, 23, -26, 33, -12, -6, -14, 
    12, -8, 9, -11, 21, 7, -26, -5, 13, -4, 
    33, 25, 3, 17, 5, -47, -8, 10, -6, -22, 
    -13, -51, -34, -9, 16, 59, 0, 3, 40, -4, 
    -12, -33, 20, -15, -14, -43, -7, 59, 3, 11, 
    -29, 63, 20, -42, -66, 37, -21, -5, -2, 94, 
    3, -8, 36, -10, 75, -17, -22, -23, -31, 11, 
    43, -12, 18, 47, -3, -17, 17, 52, -11, -46, 
    1, -26, 58, -38, 28, -43, -27, -52, 34, -15, 
    -35, -28, -34, -9, -21, 24, 34, 89, -9, 11, 
    -19, 14, -13, 70, -8, 41, -15, 10, 19, 8, 
    2, -28, 12, 53, 5, -13, -5, 22, 49, 4, 
    -3, -12, -23, -4, 17, -19, -9, 17, 24, 28, 
    12, -27, 38, -1, 9, 17, -8, 24, 2, 28, 
    19, -4, -27, -5, 39, -22, 29, 3, -7, 38, 
    -40, -10, -38, 8, -6, 35, 21, 6, 12, 12, 
    5, -15, -11, -1, -40, -2, -21, 13, 12, -17, 
    5, -8, 9, -15, 11, 3, 37, 8, -4, -3, 
    3, -12, -23, 61, -47, 1, -57, 3, 2, -11, 
    -9, 3, 39, -27, 28, -5, 51, 1, 37, -27, 
    40, 30, -26, -19, 26, 29, 23, -4, 21, -16, 
    41, 22, 35, 21, 49, -15, -12, -28, 12, 115, 
    -10, -18, 33, -32, -46, -44, -8, -77, -30, -61, 
    9, 29, 63, 14, -19, 16, -5, 18, -49, 0, 
    92, -33, 54, 7, -106, -88, 7, -46, 40, -42, 
    -22, 28, 23, -57, -10, 7, 31, 12, -34, -6, 
    -38, -5, 39, -31, 63, 23, -36, -37, 23, -55, 
    -24, -46, 55, 23, -21, -72, -44, -72, -66, -28, 
    -18, 21, -26, -41, -53, 13, 50, 12, -39, 98, 
    -26, 12, 29, -12, 27, 11, 35, 4, -3, 19, 
    10, -17, -1, -1, -5, 67, 9, 18, -11, 23, 
    -53, -76, 30, 7, -37, 27, -31, -5, -19, -22, 
    -48, 51, -45, -4, -56, 14, -52, -6, 23, 7, 
    -16, -35, 45, -16, 55, -44, 23, 9, 1, -13, 
    -21, -28, 20, -8, 13, -13, -28, -45, 53, 53, 
    3, 31, 35, -6, -32, 26, 15, 9, 32, -31, 
    -17, -60, -8, -1, 43, -13, 19, -53, -77, 31, 
    19, 19, 0, 9, -3, -17, 4, -9, -7, -21, 
    -2, -56, 13, -12, -10, 5, 62, -59, 49, 3, 
    51, 6, -28, 3, -17, 0, -12, -28, 11, 20, 
    13, 23, -2, 8, -28, -5, -11, -19, 10, 32, 
    1, 20, -31, 2, 11, -4, -4, -20, -51, -29, 
    -7, -29, -44, -9, -13, -44, 17, -37, 21, 21, 
    15, -10, -51, 0, -24, 32, -14, 5, -3, -14, 
    5, 10, 22, 0, 26, 27, -14, 17, 38, 16, 
    36, -2, -7, 89, -19, -38, 0, -13, -9, 9, 
    -10, 11, 10, 36, 15, 13, 17, 13, 8, 17, 
    27, 44, -35, -14, 28, -18, -33, -5, 37, 11, 
    -24, -38, -99, -19, 67, -17, 61, -55, 30, -90, 
    46, -39, -8, 33, -49, -37, -4, -18, 3, -17, 
    -70, -37, 9, -11, 10, -1, -10, -8, -3, -6, 
    1, 12, 1, -1, -21, 13, 10, 18, 0, 13, 
    1, -9, 8, -8, -5, 9, 17, -25, 7, -2, 
    -11, 8, 4, -2, 26, -8, -22, 11, -14, -7, 
    38, -37, 4, -5, 26, 8, 41, 24, -17, 5, 
    19, -22, 15, -32, 33, 62, 55, 57, -5, 32, 
    -4, -56, 50, 22, -7, -21, 0, -101, -34, -13, 
    -61, -10, -9, -22, 27, 27, -34, 10, -8, -13, 
    74, 31, -53, 36, 49, 10, 1, 37, 5, 49, 
    11, -40, 25, -56, -2, 126, 1, -32, 15, -25, 
    -1, -20, -13, 8, 3, 2, -19, -18, -27, -22, 
    -33, 3, -36, -18, -6, 53, 57, 26, 20, 24, 
    9, 38, -1, -43, 19, 28, 31, 4, -39, -14, 
    -3, -14, -3, -18, 4, 4, -14, -25, -3, 36, 
    38, 47, -3, 5, -7, 27, -14, 30, 14, 26, 
    -16, -4, -8, 13, -8, -26, 54, 4, 19, -2, 
    -11, -1, -44, -25, -20, 34, -19, 50, -6, -4, 
    -2, 57, 59, 19, 20, -33, 33, 2, 10, 36, 
    -34, 17, 54, 10, -24, 25, -50, -2, 33, 37, 
    76, 6, 31, 27, 26, -14, -10, 39, -17, 10, 
    13, 0, -20, 50, -74, 83, -70, -29, 20, -18, 
    24, -6, 31, -45, -47, -27, 4, -35, 22, -43, 
    18, -65, 51, 18, -86, 2, -11, 5, -30, 1, 
    15, 6, -5, 37, -13, 26, 11, -6, -5, -1, 
    -8, -22, -1, 11, 24, -1, 15, 11, 14, 1, 
    -16, -2, 11, 16, -3, -4, -11, 7, 18, 58, 
    5, 5, 18, 24, -4, 34, 8, 15, -14, -19, 
    1, 14, -1, -17, -13, -27, 2, 32, 23, 18, 
    5, 2, -25, 18, 31, -46, 11, 5, -31, -17, 
    11, -12, 0, 7, -2, 9, 5, -20, 8, -8, 
    -12, -19, -19, -10, 6, 12, 5, -4, -10, -14, 
    -11, -5, -13, 4, 5, -29, -5, -4, 8, 7, 
    5, -11, 23, 6, -7, 4, -25, 28, -10, -10, 
    12, 16, -18, -22, 10, 4, 7, -44, 3, 15, 
    14, 7, -2, 30, 12, 28, 4, 0, 48, -54, 
    14, 31, 25, -17, -26, 8, 20, 24, 19, 33, 
    48, -1, -9, -7, -27, -20, -25, -19, -30, 7, 
    21, 7, -2, 8, -20, 13, 25, 47, 5, -15, 
    -12, 35, 26, -12, -15, 2, 7, 21, 25, -42, 
    21, -10, -47, 18, -29, 24, -2, 12, 23, 26, 
    -36, 1, 8, -8, -16, -23, 6, -29, 29, -19, 
    3, -21, -4, 21, 24, 13, -18, 21, 61, 33, 
    -9, 12, -1, -40, -25, 5, 1, 11, 12, 7, 
    1, 6, 49, 3, 6, -9, -36, 9, -8, 6, 
    -13, -23, 10, -15, 2, -37, 4, 6, 40, 7, 
    -5, -30, -7, -30, 36, 16, -6, -43, -26, -26, 
    6, -31, -13, 5, -13, 15, 4, -14, -11, 12, 
    -3, -4, 41, -6, -8, -65, -27, -27, 28, 9, 
    -21, -13, -56, -64, -6, 23, 12, 51, -7, -30, 
    1, 14, -80, -55, -50, -18, 24, 8, 39, 3, 
    39, -10, -7, 6, 5, 28, -9, -31, 15, 74, 
    -1, -50, 12, -27, -56, -25, -48, 14, -18, 23, 
    28, 23, -8, 1, -25, -31, 94, -19, -30, -38, 
    -29, 8, 38, 14, -5, 11, -6, 1, 41, 32, 
    72, 18, -6, -28, -44, -31, -45, 16, -5, 45, 
    62, -18, -60, -4, 5, -8, -13, -10, -14, -1, 
    13, -9, 0, -45, -2, 23, 49, 35, 50, -25, 
    -24, 4, 3, -33, 3, -12, -84, -8, -21, -8, 
    5, -12, -20, -38, 41, 27, -17, 12, -30, 23, 
    29, 10, -15, -12, -2, 14, 1, 17, 10, 1, 
    -13, 2, -6, 0, 25, 26, 2, 13, -4, 31, 
    13, 21, -20, -12, -53, -17, 18, -48, -18, 27, 
    -51, -2, 27, -6, 57, 18, -18, -34, 7, -8, 
    -1, 53, -16, -41, -10, -14, 14, 67, 42, -48, 
    12, -6, -33, 6, -18, 10, -5, -10, -6, 17, 
    1, 7, -7, 15, 50, 3, 27, -5, -23, 22, 
    -20, 10, -7, 18, -9, -3, -15, 39, -5, -24, 
    -7, 30, 16, 8, -3, 17, -2, -53, 4, -26, 
    23, -10, -18, -10, 39, 23, 42, 13, 3, 58, 
    14, 27, -9, 19, 35, -3, 23, 5, -37, 86, 
    7, -8, 0, -17, -29, -4, 25, 13, 6, 16, 
    6, -5, 21, -5, -8, 11, 10, 7, 6, 24, 
    53, 14, 38, -20, 18, 6, 2, -30, 24, -5, 
    -34, -15, -18, 41, 55, -49, 12, 20, 6, 42, 
    57, 41, -9, 24, 5, -22, -10, 13, -8, -19, 
    43, -9, -26, -5, 67, 26, -9, -29, -42, 16, 
    0, 63, -30, 24, -35, 51, 47, -5, -28, 14, 
    65, -17, 27, 5, -6, 21, 29, -45, -23, -3, 
    19, 45, -22, -1, 19, -21, 4, -23, 7, -4, 
    36, 37, 127, -24, -21, -9, 9, -34, 9, -22, 
    -21, -16, -19, 3, 14, -20, -33, -13, 22, 49, 
    60, -10, 1, -30, 82, -24, 32, 8, 48, 1, 
    34, 24, -37, 0, -19, -4, -14, 18, -10, -8, 
    20, -11, 25, 7, 37, 15, -6, -27, 5, 21, 
    17, 38, -4, 14, 33, -15, -17, -7, 14, 0, 
    -36, 0, 25, -24, 3, 23, -6, -1, 3, 7, 
    -10, -4, -5, 18, -26, -18, 9, -18, 7, 32, 
    18, 18, 27, -3, -8, 27, 48, 5, -7, 0, 
    5, -4, 21, -23, -9, 13, 3, -24, -11, -27, 
    -20, -17, -5, 14, -10, -96, -17, 4, -11, -18, 
    31, 40, -4, -1, 11, 37, 2, -22, 5, -47, 
    31, 32, -10, -5, 26, -5, -2, -10, -12, -8, 
    -7, 5, -9, 54, -42, -8, -39, 21, 0, 10, 
    31, 54, -22, 11, -31, -3, 3, 32, -19, -7, 
    -22, -52, 31, -13, -20, -8, -1, -11, -18, -9, 
    21, 3, -12, -8, 16, 30, -7, 9, 41, 9, 
    -18, 39, -2, 29, -1, 4, -7, -3, 6, 7, 
    0, -26, 5, -11, 42, 28, -5, -11, 13, 4, 
    -25, 12, 0, 13, -7, 6, -17, 52, -11, -11, 
    -1, 1, 4, -18, 37, -9, 9, -5, 62, -14, 
    -26, -35, -48, -58, -8, 0, 27, -25, -15, 8, 
    -29, 31, -5, 44, 46, 10, -35, -7, -2, 41, 
    62, 12, -51, 33, 1, 4, 12, -14, 5, -9, 
    -2, -30, -25, 6, -22, 42, -18, 52, -15, 28, 
    -1, 17, -12, 23, 11, -5, 15, -6, -27, 13, 
    2, -37, 25, 26, 7, 3, -1, 18, 12, 2, 
    4, -6, 9, 3, -10, -6, -16, 35, -25, 18, 
    -44, 2, 18, 13, -14, -9, 10, -12, 3, -9, 
    -4, 19, 16, -51, -14, 4, 19, -12, -45, -2, 
    -11, 8, -48, -15, -2, 25, 9, -41, 15, 6, 
    -3, -18, 37, -21, -16, -1, -4, 7, 49, -8, 
    -1, 30, 13, 26, 1, 16, 36, 43, 2, -48, 
    3, -10, -48, 38, 6, 7, -35, -21, -34, 29, 
    8, 14, 1, 25, -4, 39, 10, 19, -60, 24, 
    -17, 15, -21, -32, -33, -30, 14, 1, -5, -80, 
    -27, 6, 16, 26, 32, 5, 2, -10, -6, 5, 
    4, 11, -26, -8, 3, 14, 12, 15, -6, 10, 
    10, 31, 23, -7, -31, 0, 17, -5, -7, -17, 
    -8, 1, -15, 0, -7, 2, 1, 8, 27, -36, 
    -11, -9, -41, 15, -6, -26, -8, -31, -52, -5, 
    -41, 2, -5, -38, 16, -13, -39, -30, 23, 24, 
    34, -22, -20, -81, -59, -4, -1, -49, 11, -43, 
    -3, 26, -2, -67, -13, -55, 7, 6, -42, 67, 
    33, 9, 18, 12, -14, -13, -5, -23, 13, 16, 
    1, -2, 39, 10, 18, 2, -20, -12, -31, 6, 
    57, -8, 29, -4, 16, 23, -27, -27, 1, -16, 
    2, 49, -6, -1, 25, -11, 16, -60, -34, -6, 
    25, -3, 1, -72, 46, 47, -24, 14, -37, -70, 
    10, -29, -22, -1, 6, 41, -17, 20, -7, 26, 
    -24, 18, -18, -9, -36, -8, 6, -70, -8, 15, 
    -18, 3, -17, 2, -11, -5, 6, -45, -30, 30, 
    25, -2, 20, -3, -22, 15, 5, 12, 0, -30, 
    -8, 3, 11, -19, 23, -34, 47, 1, -9, -1, 
    32, 13, 1, -13, 8, 19, -6, -3, -5, 76, 
    -12, -19, -22, 34, -14, -4, 14, -32, 13, -18, 
    -36, -29, 9, -43, 30, 11, 41, 46, 29, -2, 
    0, -46, 29, 31, 23, -17, 11, 46, 63, 12, 
    7, 35, -8, -24, 42, -14, 6, 32, 24, 12, 
    12, -5, -17, 12, 0, -10, 2, -19, 12, -12, 
    -18, 4, -11, 16, -9, 7, 14, 4, -21, -26, 
    1, 23, 0, -36, 3, -25, -23, 27, -13, -3, 
    -6, 2, -2, -4, -7, 14, 12, 15, -4, -9, 
    10, -22, 55, -7, 0, -5, 16, -11, -15, 2, 
    -5, 26, 3, -28, -9, 76, -5, -25, -23, 7, 
    7, -13, -42, -19, -9, -5, 10, 20, -8, -15, 
    26, 26, -23, 49, -38, 2, -39, 3, -27, -8, 
    34, -16, 16, 12, 25, -16, 40, -32, 18, 34, 
    -4, -11, -27, 8, 1, 21, -8, -3, -16, 25, 
    12, 26, -13, 2, -28, 18, -23, -25, -20, 6, 
    -19, -9, 30, -20, -21, -4, -6, 25, -9, 25, 
    12, 34, -23, 14, 5, -13, -40, 65, 37, 18, 
    42, 15, -37, 42, -27, -45, -27, -43, -3, 29, 
    -29, 8, -26, -13, -39, 10, 2, -26, -27, -30, 
    -23, 24, -5, -37, -51, 38, 18, 27, -55, -9, 
    -47, -21, -24, 12, 10, 0, 10, -15, -20, -35, 
    59, 0, -38, -11, -14, -12, 31, -20, -29, -9, 
    2, 4, 36, 28, 55, 27, 6, -40, -11, -80, 
    34, 16, 19, 1, 14, 18, 4, 7, 34, -15, 
    30, -30, 40, 16, -15, 5, -15, 30, -7, 10, 
    -43, 22, -4, 6, -22, 69, -9, 0, -24, 4, 
    7, -10, 26, 17, 11, 18, -4, -43, -1, 7, 
    -8, -12, 33, 6, 10, 20, 10, 1, 2, 4, 
    -24, 1, -15, -25, -30, -7, -11, -8, -5, -61, 
    -13, 38, -1, 13, 27, -7, -24, -24, -21, -70, 
    8, -22, 1, 6, -26, 3, 8, 17, -1, -12, 
    6, 6, -41, 15, 37, -2, -28, -31, 1, 14, 
    -27, 13, -9, 18, 14, 1, 0, -7, 8, -1, 
    11, 14, -15, 4, 13, 5, -15, -2, 2, -8, 
    -21, -8, -1, -1, 3, -1, -7, 16, 19, -17, 
    0, 13, 1, 17, 2, 13, 15, -12, -2, 1, 
    3, -4, 8, -1, 0, -5, 5, -3, 3, 0, 
    14, -1, -2, -2, 2, -1, -5, 4, -1, 1, 
    2, 3, -2, 13, -4, 3, 2, -2, 5, -5, 
    -19, -8, 10, 20, -1, 1, 5, 18, -4, -29, 
    -11, -7, 18, -6, -5, 10, -11, -15, 15, 22, 
    9, -17, 11, -8, -2, -14, -27, 0, -3, -15, 
    -14, -6, 23, 35, 9, 4, 0, -44, -3, 9, 
    20, -9, -28, -5, 7, 16, -26, 2, 27, 16, 
    -13, -51, 23, -28, -15, -32, 9, 1, -24, 19, 
    11, -9, -51, 33, -5, 1, -7, 7, -12, -2, 
    9, 16, -6, -14, 15, 23, 15, -15, 3, -23, 
    -2, 39, -18, -7, 5, 6, 2, 16, 0, 16, 
    -5, 0, 4, 19, -13, 12, -9, 19, 19, -2, 
    -14, 9, 26, 16, 18, 3, 4, 23, 8, -9, 
    9, 3, 4, -6, 21, 22, -8, 2, 23, 2, 
    -3, 6, -18, 20, -30, 11, 1, -15, -21, -22, 
    -10, 22, -26, 9, 2, -20, 5, 1, 23, -41, 
    -11, -21, -2, 6, -42, -6, -41, 22, 26, 13, 
    9, -40, 14, -5, 28, -19, 39, 20, -8, 36, 
    -12, 2, 3, 25, 5, 35, -31, -5, -3, 4, 
    23, 8, -4, -1, -6, -2, -1, 0, 16, 8, 
    -12, -13, -2, 6, -6, 3, 13, -5, 8, -4, 
    -7, -2, 9, -2, 5, -8, 4, 8, 6, 2, 
    -2, 3, 13, -19, 23, 6, -4, -42, -2, 9, 
    -1, 1, -9, -1, 14, -2, -1, 34, -8, 2, 
    -10, 3, 6, 5, 14, -14, 15, 11, -21, -17, 
    -11, -13, 34, -6, 30, -9, 34, 2, -24, 8, 
    4, 1, 24, 21, 2, 26, -18, 7, 1, -10, 
    6, 8, -23, -11, 29, 4, 5, 2, -2, -4, 
    5, 1, 15, 0, -1, -6, 2, -9, 36, 5, 
    2, 10, 4, -1, -4, 8, -2, 1, 3, 0, 
    -10, 55, 8, -14, -3, 3, 0, -1, -17, 25, 
    -3, 10, 8, 25, 8, 42, -31, 4, -33, -30, 
    -6, 2, -15, -22, -6, -21, 6, 5, -20, -38, 
    -33, -39, 16, -3, 17, -9, -32, 13, 11, -15, 
    -13, 8, 2, 18, -4, 7, -2, -12, 10, 4, 
    -14, -4, 0, -14, -17, 4, -6, 4, 18, -4, 
    0, 3, 18, 11, -8, 11, 7, 11, 9, 6, 
    10, -9, 6, 3, 14, 0, 0, 6, 10, -5, 
    15, -1, 13, -25, 33, -17, -3, -2, 1, 6, 
    -11, -6, -13, 21, -11, -6, 6, 17, 16, -26, 
    -1, -15, -2, -6, 29, 25, -11, -13, 19, -5, 
    -17, 27, 0, 9, 29, -11, -11, -20, 5, 3, 
    -3, -24, 19, 17, -15, 53, 10, -11, -4, -12, 
    -35, 19, -2, -8, 11, -27, -36, -28, -8, -25, 
    21, 37, 0, 0, -13, 10, -18, -7, -9, 53, 
    -14, 26, -10, -18, 26, -29, -13, -4, 10, -1, 
    -28, -9, -12, 10, -20, 4, -12, -32, -4, 2, 
    -7, -22, -12, -23, 17, -14, -9, -14, 39, 9, 
    -18, -20, -2, 13, 5, 15, -12, 21, -5, 4, 
    14, 1, 33, 28, -35, -11, 19, 7, -18, -31, 
    -5, 0, 3, 8, 1, -15, -5, 0, 0, 3, 
    -16, 20, 27, 2, -4, 1, 2, 0, 0, 10, 
    -2, 2, -7, 8, 3, 6, 8, 0, -8, 0, 
    -7, 5, -53, -21, 8, 12, 0, 3, -14, -1, 
    11, 24, 5, 49, -41, -16, -16, 0, 9, 7, 
    28, -29, -18, 8, 48, 23, 18, 0, -6, 0, 
    8, -32, -41, 5, -17, 8, -52, -2, 20, -33, 
    2, -3, 47, 26, 35, -27, 40, 1, 20, 4, 
    41, 20, 10, 2, 23, 1, -42, 31, -56, 0, 
    20, -16, -26, -44, -79, -4, 1, -2, 2, 0, 
    -1, -1, -1, -1, 4, 0, 0, -2, -1, 0, 
    -2, 2, -4, -1, 0, 1, 3, 1, 0, -1, 
    1, 1, -1, 0, 0, 0, -2, -3, -9, 15, 
    -3, -10, 2, -23, -43, -11, -3, -14, -4, -11, 
    18, -10, -3, -8, 2, 0, 4, -2, -13, 24, 
    -9, 4, -3, 17, 11, 10, -20, -20, -5, 15, 
    -8, -17, -7, 9, -6, -11, 23, -6, 11, 13, 
    11, 20, 32, -10, 11, 4, 0, 17, -3, -9, 
    3, 21, 37, 8, 7, 25, 6, -11, 28, -9, 
    -15, 1, -4, -8, -6, 18, -3, 11, -20, -5, 
    -9, -7, -3, -3, -15, -8, 6, -4, -15, 1, 
    26, 8, -12, -5, -9, 5, -1, 8, 3, -8, 
    16, -4, -28, 9, 3, -6, -8, -9, -20, -25, 
    12, 8, 5, -9, 10, -8, 22, 4, 9, -18, 
    -10, -16, -4, 0, 8, -11, -11, 10, 11, 17, 
    14, -10, -7, -3, -7, -5, -6, 1, 4, 7, 
    2, 5, 11, 0, -3, -8, -5, -8, 16, -6, 
    -7, -30, -12, -1, 2, -3, -2, -3, 10, 2, 
    -4, 13, -8, 5, -1, -3, 4, 0, -9, -12, 
    -1, 11, 7, 5, -8, -8, -9, -7, 1, -29, 
    18, -1, 2, 7, 2, -11, -10, 1, 11, -9, 
    20, -11, 7, -17, 10, -3, 12, 0, -11, 6, 
    -32, 27, 7, -7, -21, 12, -8, 20, 61, 24, 
    -25, -30, -27, 45, -9, 17, 0, -3, -32, 16, 
    -19, -40, -36, -57, 9, -49, -22, 9, -37, 51, 
    1, 17, -7, 11, 10, 4, 10, 10, 4, 13, 
    -3, -14, 9, -11, 4, -6, -6, 59, 6, -8, 
    -19, -6, -11, -2, -4, 3, 3, 26, -12, -8, 
    -11, 7, 9, 12, -13, 10, 1, 7, -4, 3, 
    -1, -6, 4, -6, 8, -5, 5, -13, 18, 4, 
    6, -17, 2, 12, -7, -11, 21, -19, -11, -9, 
    -10, 3, -7, -9, -18, -5, 
};
const TfArray<1, int> tensor_dimension9 = { 1, { 4096 } };
const ALIGN(8) int16_t tensor_data10[256] = { 
    21390, 21390, 21390, 21390, 21390, 21390, 21390, 21390, 21390, 21390, 
    21390, 21390, 21390, 21390, 21390, 21390, 3594, 3625, 1421, 669, 
    1359, 1024, 2539, 1484, 1223, 1787, 1787, 3583, 2006, 2455, 
    3813, 795, 21390, 21390, 21390, 21390, 21390, 21390, 21390, 21390, 
    21390, 21390, 21390, 21390, 21390, 21390, 21390, 21390, 2675, 836, 
    3949, 3479, 2549, 1933, 1369, 2884, 1474, 1317, -1200, 2017, 
    596, 1547, 3521, 1787, 21390, 21390, 21390, 21390, 21390, 21390, 
    21390, 21390, 21390, 21390, 21390, 21390, 21390, 21390, 21390, 21390, 
    -782, 1860, 5589, -1148, 4805, 2518, 1651, 5547, 889, 5432, 
    3824, -490, 2497, -312, 826, 805, 21390, 21390, 21390, 21390, 
    21390, 21390, 21390, 21390, 21390, 21390, 21390, 21390, 21390, 21390, 
    21390, 21390, 3218, 2351, 3583, 4732, 1265, 2058, 920, 669, 
    3260, 659, 1296, 4085, -1848, 575, 1996, 1724, 21390, 21390, 
    21390, 21390, 21390, 21390, 21390, 21390, 21390, 21390, 21390, 21390, 
    21390, 21390, 21390, 21390, 3009, 1202, 1474, 1317, 1536, 1578, 
    2549, 1348, 1, 513, -594, -448, -135, 1192, 2539, 1098, 
    21390, 21390, 21390, 21390, 21390, 21390, 21390, 21390, 21390, 21390, 
    21390, 21390, 21390, 21390, 21390, 21390, 43, 4241, 3646, 2090, 
    2215, 1578, 2831, -678, 1223, 3437, 2821, 2581, 7030, 1588, 
    3604, 1223, 21390, 21390, 21390, 21390, 21390, 21390, 21390, 21390, 
    21390, 21390, 21390, 21390, 21390, 21390, 21390, 21390, 1870, 1484, 
    3938, 920, 962, 1609, 1599, 2675, 429, 1223, 2821, 2915, 
    1745, 1630, 3615, 2581, 21390, 21390, 21390, 21390, 21390, 21390, 
    21390, 21390, 21390, 21390, 21390, 21390, 21390, 21390, 21390, 21390, 
    2748, 1296, 3489, 2424, 2340, 2612, 2737, 220, 3113, 2121, 
    2570, 2278, 1630, 2361, 3604, 1568, 
};
const TfArray<1, int> tensor_dimension10 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data11[4096] = { 
    10, 23, -50, -16, 1, -6, 14, 12, -16, 4, 
    3, 10, -6, 1, 33, 100, -16, -9, 2, 1, 
    6, -6, 10, 4, -21, 28, -12, 4, 16, -23, 
    -11, 17, -13, 3, 11, 7, -4, 13, -10, 15, 
    9, -7, -24, 7, 15, -7, 19, -44, 7, -1, 
    8, 8, -6, 8, -8, -5, 17, -10, -2, -7, 
    5, 11, -13, 10, -18, 2, -27, 10, 10, 7, 
    -37, 17, -22, 1, -22, -38, -27, 18, 0, -7, 
    19, 17, -33, 25, 19, -2, -21, -12, 10, 39, 
    -6, -51, 20, 12, 12, -45, 14, -26, 40, -16, 
    -19, 12, 71, -50, 41, -11, 26, 18, -44, -17, 
    30, -48, -26, 1, 13, -70, -9, -1, 38, -2, 
    -12, -85, -24, 39, -15, -11, -19, 31, 28, 23, 
    5, -18, -26, -15, 1, 14, -11, 17, 0, -19, 
    -8, -32, -16, -18, -29, -1, -4, 34, 14, -16, 
    25, 0, -27, -17, 1, 15, 11, -29, 0, -18, 
    -13, -28, 5, 11, -9, 25, 41, -20, 53, -14, 
    -2, 34, 18, -35, 29, -7, 8, 7, -3, -60, 
    -47, 23, -1, 17, 16, -43, -37, 46, -20, 14, 
    -36, 20, 14, 13, 13, -8, -12, -9, -3, 17, 
    18, 66, 5, -14, -12, -10, 7, -31, -9, -6, 
    -34, -12, 15, -7, 12, 7, -12, 13, -14, -21, 
    19, -10, 23, -3, -8, -25, 46, 2, -12, 18, 
    63, -19, -9, -38, -2, 0, 6, 14, -2, -48, 
    10, 8, 1, -50, -35, 13, 0, 36, 20, -43, 
    -34, 21, -25, 9, -20, 42, 10, -28, -17, 1, 
    -13, 4, 22, -57, -54, 10, -25, 3, -21, -6, 
    37, 43, -8, 61, 5, 0, -19, -19, 10, 9, 
    -4, -4, -24, -10, 9, -3, -33, -11, -8, -21, 
    -14, 12, 12, 2, 10, 4, -15, -5, -8, -21, 
    -23, 14, -32, 61, 14, 0, -44, 19, 2, -2, 
    -22, 1, 16, 30, 15, -8, -4, -2, 12, -11, 
    -10, 19, -17, 11, 41, -18, -20, 31, -12, 9, 
    -6, -2, -7, 41, 5, -41, 63, -40, -18, 10, 
    14, 4, -30, -15, 7, 29, 5, -8, 43, 5, 
    23, -13, -31, -8, -37, 22, -11, -1, -9, 36, 
    -30, -9, -21, -1, -7, 86, -37, 10, 39, -18, 
    -13, 21, 9, 10, -30, -1, 25, 34, 14, -27, 
    7, 22, 19, -52, -4, 9, 13, 17, 14, 6, 
    -15, 25, -2, 3, 26, -10, 6, 65, 17, -70, 
    -1, -7, 22, 26, 26, -1, -4, 10, 0, 10, 
    9, -7, -4, -1, -2, 6, 30, 9, -70, -23, 
    -6, -10, 16, 1, -9, 27, 25, 11, -2, -53, 
    13, -12, -34, 6, -24, -35, 2, -17, 21, 7, 
    -37, 0, -1, -1, -7, -20, 6, -5, -23, 2, 
    11, 15, 23, 2, -12, 32, -6, -16, 22, 13, 
    -11, 39, 3, 10, 11, -18, 2, -57, -13, 31, 
    -29, -10, 24, -34, 9, 43, 19, 22, 27, 29, 
    -5, -55, 20, 15, 21, 18, -38, 30, 0, 9, 
    7, 8, 37, 46, -12, -31, 28, 20, 11, -19, 
    -44, 27, -19, 12, 32, -69, 20, -27, -7, 23, 
    13, -16, 21, -6, -5, -15, -18, -6, 27, 42, 
    -17, -28, -3, -2, 18, -69, 24, -27, -18, 34, 
    -47, -35, -12, -12, 3, 5, -17, -6, 4, -11, 
    4, -18, -7, -6, -27, -15, -39, 23, 25, 10, 
    3, 14, -1, -15, -4, 8, -3, 10, -9, -34, 
    27, -4, -57, 5, -29, 34, -15, -7, 31, 11, 
    7, -3, 9, 21, 36, -21, -20, -24, 4, 21, 
    23, 15, 12, -2, 18, -3, 22, 15, 21, 13, 
    39, -32, 14, 1, 50, -34, -24, 27, -36, 24, 
    16, -6, -12, -7, -13, 51, 2, 18, -19, -23, 
    -26, 18, 11, 26, -7, 0, 17, -18, 30, 27, 
    14, 8, 13, 28, 9, 17, 5, -4, -20, 19, 
    -38, 23, 30, -18, 26, 14, 12, 23, -3, 24, 
    -5, -22, 6, 2, -29, 13, 33, 2, 31, -13, 
    27, 41, 28, -5, -8, 40, -26, 24, 12, 5, 
    -43, 11, 11, 13, 2, -52, -15, -15, -20, 2, 
    -16, -6, -11, -19, 2, 13, 1, 15, -1, 12, 
    -32, 37, -9, 4, -16, 1, -6, 23, 17, 0, 
    -12, 1, 7, 1, -9, -4, 12, 8, -34, -29, 
    -4, 11, 12, -16, -4, -25, -14, 7, -1, 4, 
    -4, -14, 15, -3, 26, 22, 11, -5, 10, 11, 
    -12, 21, -9, -16, -12, -2, -1, 16, 7, -24, 
    -3, 8, -25, 11, -13, 18, -18, -6, 38, 18, 
    35, 15, -15, -2, -15, 4, 8, -4, -6, 50, 
    -5, -13, 36, -18, 27, -3, -3, 25, -21, 2, 
    17, 34, -25, 9, 17, 13, 14, 12, -5, -41, 
    28, 0, 0, 15, 31, 14, 8, -35, 47, 10, 
    7, 16, 11, -28, 4, 2, -10, -48, -35, 9, 
    -9, -28, 15, -43, -32, 21, -8, 13, -20, 45, 
    -34, -1, -8, 26, 5, 3, -46, 7, 7, 2, 
    -22, 29, 2, 12, -29, -28, 30, -14, 24, -8, 
    0, 19, 20, 9, 29, 16, 2, -10, -10, 21, 
    19, 21, -15, -18, -6, 11, 9, 12, 19, 22, 
    14, -4, -4, 13, -13, 19, 12, -25, 13, 6, 
    3, -32, -29, 41, -25, -1, 19, -46, 0, 32, 
    11, 24, 23, 17, -11, -24, -29, 8, 13, 7, 
    -20, -15, 22, -12, 28, 25, -6, 67, 23, 27, 
    4, 21, -28, -62, 33, 48, -45, 30, 15, -2, 
    -29, 43, 16, 52, 2, -11, 16, 4, -17, -6, 
    -19, -2, 52, 10, -3, -8, 0, -20, -5, -13, 
    10, -15, -18, 15, 16, 8, -4, -1, 28, -4, 
    -16, -8, -5, 0, -2, -13, 4, 14, 11, 0, 
    -13, -14, -15, 2, 9, -12, 6, 11, -5, -9, 
    1, -24, 11, -16, -10, 2, -26, -3, 4, -10, 
    2, 19, -13, -1, 5, 10, 14, -12, -3, 10, 
    27, 13, 42, -22, -12, -6, 13, -2, 26, -18, 
    -10, 29, 10, -66, 0, -56, -33, -78, 15, -23, 
    -22, -29, 23, 34, -22, -56, -3, 10, -7, -14, 
    -9, 22, -23, -13, -4, 20, 18, 16, -23, 7, 
    21, -4, 9, 34, 19, 13, 28, 2, -14, 24, 
    11, -55, -16, 20, -16, 7, 27, -20, -16, 20, 
    1, 17, 16, 26, 19, 15, -61, -18, -36, -2, 
    13, -12, -22, 7, -15, -9, 2, 9, -13, -29, 
    -10, 10, -17, 20, -17, -6, -33, 10, -27, 6, 
    22, -1, -1, -23, 22, -10, 20, 26, -2, -13, 
    1, -8, 19, -5, 10, 19, -19, 4, -14, -18, 
    69, 18, -18, -29, -5, 16, 10, -12, 23, -2, 
    -21, 8, 24, -2, 3, -19, 5, -16, 30, 19, 
    -8, -29, -45, -24, -10, -34, -28, 1, -12, -48, 
    -12, -29, -31, 43, -29, -6, -12, 50, 12, -35, 
    27, 14, -31, 77, -12, -86, 19, -24, 25, -24, 
    -15, -46, 28, 12, 0, 20, 46, -4, 21, -37, 
    11, 11, 23, -7, 14, -85, 12, 7, 1, -66, 
    -27, 31, 10, 15, 16, -55, -32, 28, -33, 35, 
    -7, 37, 20, -4, 25, -15, -22, -6, 20, -36, 
    12, -5, 13, 4, -5, -17, -6, -34, -23, 2, 
    -4, -17, -10, 4, 22, -4, -19, 4, -11, 54, 
    7, -17, 24, 33, 9, 4, -2, -11, -8, 12, 
    25, -7, -4, -11, 1, 12, -6, -53, -26, -2, 
    -2, -8, -8, -18, -18, 2, 9, -6, -3, -10, 
    -18, 8, 16, -3, -21, -4, 9, 10, -26, -19, 
    -6, -8, 14, 4, -1, -37, -1, -19, -12, -1, 
    -18, -38, -2, -19, -28, 2, 4, 2, 1, -10, 
    -15, 5, -4, -18, 7, -7, 32, -9, 12, -3, 
    11, -14, -11, -4, 74, -1, 34, -16, 4, -10, 
    -8, -26, 6, -5, -8, 5, 0, 20, -26, -8, 
    29, 6, -8, -17, 4, -14, 0, -8, 1, -4, 
    20, 12, 5, -16, -11, -15, 46, -26, 9, 26, 
    -26, -8, -25, -31, -28, 12, -12, 0, 5, -2, 
    6, -16, 33, -9, -21, 4, 14, -31, 0, -22, 
    -5, -1, 25, 2, 10, -16, -4, -23, 6, -5, 
    -5, 35, -10, -6, -24, -17, 13, 3, -18, -24, 
    18, 9, 11, -24, 15, -22, -30, 49, 10, -43, 
    -5, -25, -4, -11, -3, -2, 1, -2, -9, 4, 
    29, 23, 2, -1, 19, -11, 16, -4, 8, -66, 
    15, -9, 29, -5, -1, 7, 5, 26, 2, -48, 
    -30, 9, -16, 3, -18, 13, -11, 2, -2, -1, 
    1, 5, 8, 37, -29, -20, -45, -45, -27, -21, 
    -17, -26, 17, -45, -11, 40, -5, -2, 6, -48, 
    9, 13, -22, -22, 18, 7, -2, -67, 0, 2, 
    26, 4, 4, -1, 14, -1, 20, 6, 1, 24, 
    32, -19, 24, -31, -8, -9, -3, -11, 9, 11, 
    7, 10, -1, -20, 1, 22, -18, 2, -19, 37, 
    7, -5, -10, 1, -8, -4, -19, 8, 4, 6, 
    -1, 0, -11, 1, 12, -5, 3, -4, -43, -4, 
    3, -1, -23, 12, -12, -2, 1, -14, -1, 7, 
    39, -13, -19, -33, 30, 16, -6, 5, 45, -17, 
    19, -41, 19, 19, 22, -16, 3, -22, 7, -6, 
    -16, -59, -35, 30, 0, 20, 21, -45, -7, 51, 
    -23, 30, -8, 33, -21, -5, 1, 11, 24, -3, 
    -37, 14, 1, -8, -3, 2, -13, 33, -24, 2, 
    19, -8, 2, 3, 3, 12, -16, 11, 18, 26, 
    13, -24, 6, 12, -3, 15, 22, 4, 7, -15, 
    -17, -9, 40, -18, -2, -2, -7, -14, -18, -26, 
    8, -8, -9, -12, -14, 3, 7, -11, 40, 5, 
    -17, 3, 3, -3, -16, -16, -15, 2, -12, -9, 
    -37, 16, 33, 17, -18, -1, 36, 4, -5, 21, 
    -40, 22, -4, 39, 9, -28, -11, -43, -8, 32, 
    0, -14, 13, 35, 9, 22, 19, 11, 13, -3, 
    -22, -25, 35, 16, 2, 13, 10, -28, 41, 1, 
    40, 38, 7, 29, 3, -86, 14, 19, 49, -55, 
    -16, 29, -17, 45, 22, -18, -9, 61, -15, 22, 
    52, 10, -21, -24, -10, 20, 10, 27, -6, -15, 
    29, -7, 21, 18, 22, 9, 4, 1, 9, 16, 
    -16, -27, -22, 18, -19, 25, 24, -17, 4, 30, 
    -37, 22, -14, 2, 4, 5, -15, -7, -31, 7, 
    36, 23, 10, 41, 4, 15, 9, -33, -9, 11, 
    -15, 9, 6, 22, -15, -4, 11, 13, -6, -25, 
    -8, 30, -3, -8, -4, -1, 18, -4, 13, -16, 
    -16, -8, -21, -30, 11, 10, 9, -4, 4, -24, 
    -14, 15, -34, 11, -9, -10, 1, -24, 8, 3, 
    -18, 6, -127, 10, -9, -17, -10, 10, -13, -32, 
    16, 4, -5, 15, 47, -18, 27, -17, 34, 31, 
    16, 5, 22, -1, -3, 11, -6, -39, -24, 23, 
    -3, 6, 18, -44, -17, 31, -14, 10, -9, 42, 
    -32, -34, 11, 18, 5, 21, 29, 10, 15, 0, 
    24, 13, 6, 19, 10, -2, 20, -1, 10, -68, 
    -34, 32, -23, 7, 27, -39, -13, 43, 2, 35, 
    -7, 23, -2, -14, 32, -4, -6, 23, 32, -18, 
    16, -2, 32, 14, 16, -2, -18, -8, -7, 6, 
    2, -34, -33, 15, 7, 60, 5, -26, -24, 28, 
    9, 3, -37, 22, -19, 4, -44, 16, 14, -6, 
    -44, 26, -38, 11, -11, -8, -38, 19, -17, 73, 
    26, -25, -26, 45, 19, 0, -30, 4, 18, 52, 
    34, -35, 4, 2, 26, -49, 12, 15, 6, -15, 
    -16, -1, 33, -7, 16, -15, 17, 10, 8, -13, 
    -2, -36, -23, -6, 6, -22, -9, 12, 19, -10, 
    -10, -39, 5, 17, 6, -10, -18, 22, -10, -37, 
    -22, 2, -15, 12, 20, -55, 30, -14, 15, 23, 
    18, -25, 39, 22, -13, 23, -24, -22, -19, 15, 
    -33, 32, 19, -47, -21, 36, -42, 19, -2, 58, 
    33, 33, -36, -32, -21, -9, 37, 3, -21, 34, 
    -11, -17, -17, -20, 14, 8, -31, -19, 38, 16, 
    5, -27, 33, -5, -41, 29, -5, -7, 5, -31, 
    -2, -12, 6, -7, -17, -3, -4, 4, 6, 3, 
    4, 11, -13, 6, -5, 16, -5, -23, 1, 4, 
    -1, -16, -11, -3, 0, 5, -9, 2, -9, 9, 
    21, 1, 11, 1, -6, -5, 6, 9, 18, 21, 
    7, -3, 9, -18, -4, 21, -5, -21, -6, -3, 
    5, 8, 37, -43, -49, 51, 17, 26, 10, 12, 
    -15, 10, -18, 13, -11, -7, -22, 5, 17, 19, 
    15, 1, -33, 24, -19, -1, 6, -14, -9, 45, 
    10, -2, 19, -26, 19, 24, 9, 2, -13, -7, 
    25, 15, 9, -42, 1, 16, 2, -11, 17, 35, 
    -20, -5, 1, -5, -10, 0, 0, 4, -38, -24, 
    -13, -19, -10, -85, -18, -4, -3, 32, 35, -27, 
    13, -6, -20, 38, 14, -2, 9, -24, 19, -14, 
    25, 19, -25, -18, -26, -1, -3, -1, 11, 15, 
    27, 8, -4, -17, -44, -14, -19, -7, 15, -15, 
    5, -11, 0, 25, -28, 22, -12, 19, 7, -22, 
    14, 5, -14, -1, -18, -4, 29, 6, -4, -20, 
    -52, 22, -16, -36, -43, -34, -20, 96, 14, 0, 
    -59, 14, 21, 3, 7, -71, 14, 40, -23, -51, 
    9, -6, 20, -14, -2, -1, 10, 8, 2, 4, 
    8, 11, 8, 7, 16, 10, -14, 9, 8, -28, 
    1, 4, 9, 14, 2, 5, 7, 9, 2, -8, 
    -14, 4, 9, 6, -9, 0, -6, -26, 27, 8, 
    -18, 17, -39, -25, 41, -30, 19, -59, 13, -25, 
    0, -37, 0, 22, 16, -15, -31, 7, -8, 25, 
    8, -39, -24, 37, -29, 10, 2, 11, -4, -15, 
    12, 1, 3, 15, -52, -9, 26, -5, -57, 6, 
    -6, 0, 2, -26, 6, -6, 17, -16, -12, 2, 
    -27, 15, 4, 10, -2, 17, -5, 2, -10, -1, 
    12, 10, -18, -8, -30, -15, -17, -8, -21, -53, 
    9, -36, -11, 7, -6, 31, -20, -19, -2, 16, 
    12, -17, 12, 10, -17, 5, 2, -37, -9, -9, 
    13, -30, -16, -19, 37, 8, 9, 19, 11, -1, 
    -38, -10, 31, 20, 46, -15, -5, -38, -4, 34, 
    22, -33, -50, 5, 3, 18, 1, -68, 7, -7, 
    -26, 11, -14, 3, -28, -6, -26, 25, 10, 4, 
    -18, -85, -70, 8, -2, -16, -4, 43, -21, 14, 
    45, -16, -2, -5, 0, 18, -33, 7, 32, 13, 
    3, -56, -3, 28, 13, -9, 25, 8, 17, -22, 
    -28, 2, -28, 11, 0, -9, 6, -23, 20, -10, 
    18, -54, -33, 13, -12, 48, -4, -17, 16, -11, 
    -22, -29, -3, 37, -5, -9, -15, -12, -30, -12, 
    1, 19, 22, -9, -23, 19, -2, -11, 12, 6, 
    15, 30, 1, -5, 28, 5, 1, 6, -19, 22, 
    -29, 5, 24, 3, 8, 7, 15, 15, -1, 12, 
    -18, -12, -6, 20, -58, 7, -57, 0, 10, -4, 
    -15, 6, -10, 33, -5, -31, 27, -15, 21, -37, 
    -12, 14, -32, -7, 21, 20, 11, 2, 15, 22, 
    24, 5, -8, 3, -1, 7, 8, 9, -4, 0, 
    -3, -2, 2, 0, 5, 8, -3, -2, 15, 4, 
    5, -4, -4, 6, -8, 2, 8, 2, 2, 0, 
    4, 8, -3, -2, -10, 10, -41, 15, 25, 8, 
    7, 11, 5, 10, 21, 4, -2, -3, -1, -12, 
    11, 11, 8, -29, 0, 6, 3, 9, 2, 10, 
    -13, 14, 24, -4, -5, 18, 23, -45, -22, -12, 
    -43, -7, 0, -33, 12, -3, -23, -2, 8, -60, 
    -10, -5, -42, 19, -7, 21, 16, -17, 31, -4, 
    -20, -2, 3, 7, -7, -25, 6, -25, -2, 4, 
    -1, -8, -8, -10, 7, -7, -7, 7, -2, -7, 
    -5, -8, -1, 8, -8, -3, 1, 1, 12, -12, 
    4, -3, -12, 3, 6, -4, 0, -12, 6, -3, 
    20, 9, 48, -6, -23, 10, -5, 4, 25, -23, 
    48, 16, 13, -5, -42, -100, -14, 8, 60, -24, 
    -28, 5, 13, 56, -10, -18, -3, -38, -28, -6, 
    -17, -65, -26, -16, -22, 23, 20, 20, 11, -13, 
    -21, -27, -1, 11, -8, -8, 17, 68, 28, 15, 
    7, -26, -8, 20, -12, 14, 24, 37, -6, -16, 
    20, 17, -79, -14, -55, -23, 17, 47, 38, 35, 
    -8, 20, -15, 2, 2, -16, 5, 21, 17, -8, 
    56, 0, 27, 5, -5, 49, -30, 4, 45, 3, 
    19, -9, -14, 16, -6, 3, 1, 19, -12, -4, 
    18, -9, -9, 20, -8, 9, -24, 13, -9, -6, 
    -9, 25, 1, -21, -23, 7, 20, -5, 11, -19, 
    -8, 20, 9, -36, -31, -9, 7, -11, -16, -19, 
    15, 5, 5, 18, 22, 24, 0, -22, 7, 4, 
    15, 4, 16, 3, 8, 12, 13, -5, -20, 21, 
    13, 4, 12, -30, -20, -32, -23, 5, -7, 19, 
    -24, -10, -7, 24, 24, 19, -21, -1, 2, -3, 
    -2, -9, -2, 44, 8, -11, 18, -10, 14, 17, 
    -7, 14, -25, -1, 29, -1, -73, 3, -17, 26, 
    15, -8, 23, 20, -25, -24, -9, -29, -15, -2, 
    -23, 19, -26, -31, -22, 8, -8, 12, -23, -9, 
    -14, 31, 29, -25, 12, -25, -26, -74, 20, -28, 
    30, -31, 43, -30, -15, 3, 16, 9, 11, 7, 
    -8, 7, -12, -6, 15, 0, 7, 11, 0, 2, 
    13, -13, 9, -9, -15, 21, -8, 0, -9, 5, 
    8, 0, 4, 17, -14, 1, -3, -3, 0, 3, 
    21, 2, -43, 12, 17, 11, 16, -3, -3, -12, 
    1, 0, -1, 16, 24, 2, -10, 19, -8, -14, 
    7, -8, -7, -2, -5, 11, -36, 26, 31, 10, 
    -14, -17, -27, -5, 20, -5, -4, 11, 3, 7, 
    5, 4, 25, 22, -19, 9, 5, 11, -8, -14, 
    -94, 24, -30, 8, 5, 26, 11, -27, -7, 7, 
    -15, 2, 7, 15, 18, 6, -7, 0, 5, -4, 
    6, 9, 3, 7, -4, -3, 17, 3, 6, -7, 
    -8, 6, -9, 3, 12, 1, 4, 7, 6, 13, 
    -3, -1, 9, 10, -7, -5, -1, -10, 9, 5, 
    -8, 9, -8, -11, -8, -4, 2, 5, -6, -10, 
    -3, 10, -3, -11, -1, -7, -9, 11, 8, -11, 
    3, -4, 3, -1, -20, 15, -71, 20, 7, -3, 
    37, 0, -69, 39, -22, -8, -22, 23, 5, -2, 
    17, -45, -36, 6, 35, 7, -8, -38, 11, 50, 
    -15, -27, 28, 5, 48, -14, 0, -1, 2, 2, 
    -4, 0, 4, 1, -5, 1, 2, -5, -6, 6, 
    0, -2, 3, -1, -3, 9, 3, 2, -1, 4, 
    1, 8, -4, 11, 8, -1, 8, 6, -12, -9, 
    30, 11, 27, 24, 12, -10, 21, -21, 12, 16, 
    0, -25, -18, -18, 12, -37, 29, -49, -31, 30, 
    2, 7, 13, -17, -12, -4, -6, 16, -14, -32, 
    -15, -10, 2, 18, 9, 16, -4, -5, 13, -1, 
    4, 13, 10, 8, 8, 4, -12, 10, 4, -8, 
    -18, 15, -6, 9, 14, -10, 1, 10, -11, 12, 
    -6, -1, 27, 19, 18, -21, -4, 0, 4, -9, 
    -5, 4, 7, 4, 16, -32, 20, 45, -32, 13, 
    27, -3, 5, -10, 12, 14, -32, -2, 6, 20, 
    -4, -30, -31, 42, 12, 6, 19, -20, -18, -6, 
    24, -8, 8, -1, -21, 20, 25, -15, -6, -26, 
    -30, 5, 21, 28, 5, -18, 7, -2, -8, -21, 
    9, -2, 16, -15, -32, 14, -3, 21, 1, 3, 
    -6, 18, -15, 5, 1, 4, 3, 3, -30, 16, 
    -40, -24, 8, 39, -22, 4, -4, -7, -3, 8, 
    3, 25, -8, -46, 35, 4, 3, 0, 11, -7, 
    52, -12, -22, 11, 28, -11, 25, 5, 16, 21, 
    57, -27, 6, -57, -17, 23, 52, -15, -4, -2, 
    16, 0, -11, -69, -6, 20, -5, -7, -1, 23, 
    13, -19, 31, -8, -22, 6, 37, -9, 39, -10, 
    18, -11, 15, -24, -6, -25, -12, 6, 19, 0, 
    -16, 9, 23, -8, -5, -15, -17, 66, 5, -8, 
    -14, 62, 27, 1, 26, -20, -22, -6, 27, -14, 
    13, -6, -16, 3, 4, -39, 11, -38, -21, 15, 
    -33, -11, -10, -8, 29, -27, -22, -11, -17, 6, 
    1, -18, 23, 17, 25, -5, 14, -26, -25, -8, 
    29, -22, 15, -34, 12, -18, 19, -62, 1, -13, 
    -22, 19, -24, 10, 0, -2, 24, 8, -26, -39, 
    12, -46, -10, -16, -28, -1, 32, -21, 12, -18, 
    -21, -5, 76, -12, -29, -1, 32, -20, -4, -17, 
    -10, -25, -35, 12, 19, -32, -15, -7, 24, 2, 
    -25, -23, -10, 11, -3, -15, -3, 12, -14, -12, 
    -4, 14, 20, 5, -16, 4, -11, -19, -19, -14, 
    -8, 14, 16, -4, 25, 13, -2, 90, 5, -3, 
    -22, 10, 19, 6, 3, -34, -6, 13, -26, -31, 
    -9, 15, 6, 8, 25, 3, -103, 0, -20, 21, 
    3, -8, 3, 17, -39, 55, 10, 2, 4, 44, 
    9, -4, -16, 5, 5, 19, 9, -44, 1, -4, 
    -8, -3, 5, 16, 23, -9, -8, 12, 0, -21, 
    10, -28, 26, 5, 23, 49, 9, -33, -11, -19, 
    54, -2, -63, 12, 7, -3, -9, -27, -10, 0, 
    -5, -2, -14, 27, -21, 12, -4, 8, 4, 3, 
    -57, 27, -31, 6, 3, -30, -5, 19, -25, 35, 
    14, -7, -17, 40, 5, 2, -28, -6, 25, 5, 
    1, 18, 18, 15, 7, -32, 7, 21, 7, -21, 
    13, -2, -19, -1, -6, 20, 4, -19, -25, 38, 
    16, -19, -3, -15, 23, -4, 21, -6, 6, 0, 
    -12, 35, 6, -6, 26, -15, 28, 7, -5, -25, 
    -28, 8, 26, 11, 13, -13, 18, -14, 10, 54, 
    10, -32, 35, -46, 9, 8, -7, -35, -16, 24, 
    -1, 11, 13, -25, 14, 50, -16, 10, 0, 20, 
    -14, -14, 25, 17, 5, 28, -15, -13, 22, -4, 
    4, 31, 30, -29, -1, -10, 1, -14, 29, -29, 
    -43, 32, 9, 34, 9, -22, -12, 11, -41, 5, 
    -2, -9, 25, 12, 10, 15, -7, 8, -25, -16, 
    7, -9, 10, 1, 4, 7, 24, -17, 11, -1, 
    -5, -66, 10, 14, -15, 5, 15, 10, 3, 27, 
    4, 18, 2, 10, 10, -2, -31, -15, -10, -16, 
    18, 25, -16, 5, 19, -19, -15, -32, -17, -10, 
    -7, -4, -58, 6, 9, -5, -37, 1, -15, 17, 
    11, 22, 15, -5, 13, -64, -11, -33, 25, 15, 
    7, 24, 27, -4, 36, 0, -15, 7, -10, 14, 
    13, -58, 2, 13, 8, -28, -14, 15, 7, -8, 
    12, -31, -7, 41, 12, 8, 50, 6, -24, -35, 
    -12, 9, 13, 10, 0, 6, -1, -23, 38, 14, 
    0, 50, 37, -37, 36, 4, 3, -14, -44, 34, 
    -25, 24, 19, -19, 0, 21, 2, 65, 12, 20, 
    26, 1, 29, -11, -35, -6, 44, -39, 23, -13, 
    6, 10, 5, -50, 6, 19, -27, 11, -22, -27, 
    -11, -14, 30, -2, -24, -16, -22, 33, -29, -15, 
    -22, 0, 16, 2, 38, -12, -21, 0, 70, -9, 
    -6, -3, -7, 29, 3, -34, 7, 14, -24, 3, 
    27, 30, -8, -10, 42, 14, -7, -19, -18, -25, 
    -20, -14, -41, -23, -6, -8, 4, 2, -2, -1, 
    -18, -11, -18, 18, -6, -25, -5, 0, -11, 46, 
    4, 15, -29, 34, -12, -4, -2, -5, 1, 17, 
    -2, 4, 2, -3, 7, 1, 28, -24, 11, -13, 
    -18, 6, 17, -8, 17, -12, 4, -2, 7, -32, 
    14, -16, -31, 17, 20, -17, -23, 8, 19, 11, 
    -13, -86, -4, 19, -15, -2, -2, 1, -25, -12, 
    1, 7, 47, 15, 25, 31, 1, -4, -5, 5, 
    -12, 51, 5, -27, 26, 1, 52, -10, -13, 22, 
    2, -5, 25, 10, -14, 23, -3, 15, 0, -34, 
    19, 8, 0, -19, -28, -7, 40, -16, 5, 12, 
    -6, -15, -2, -41, -8, -28, -24, -9, -15, 1, 
    2, -13, 30, 23, -27, -2, -3, -19, 2, -19, 
    5, -13, -21, -2, 7, 15, 38, -1, -39, 19, 
    -15, 11, -5, -13, -15, 49, -13, 64, 28, -7, 
    9, 48, 17, 10, -63, 2, 25, 18, 6, -5, 
    3, 13, 9, -18, 5, -2, 13, -8, 25, -15, 
    -50, -31, 33, -5, 26, -13, -30, -4, 8, 35, 
    -8, -6, 9, -27, -20, 77, -19, 4, 1, 23, 
    5, 32, -2, 15, 1, 2, 18, -2, 50, -17, 
    -25, -2, 36, -4, 32, -13, 10, 16, 32, -21, 
    24, -61, -22, 2, 44, -40, -30, 0, 33, -1, 
    -15, -39, -6, 21, 0, -11, -23, 34, 24, 8, 
    -18, -20, -18, -6, 38, 14, 18, -4, -14, -23, 
    -12, -47, -2, -6, -27, -3, -1, 48, -7, -14, 
    24, -5, -27, -3, 6, 42, 0, -20, -2, -1, 
    21, 12, 5, -13, -20, -3, 22, 5, -5, 19, 
    -11, -5, -8, -3, 21, -2, -21, 6, -24, -8, 
    5, -14, 5, 15, -23, 1, 21, 26, 9, -14, 
    -4, 14, 11, -15, 25, 2, -30, -12, 60, -10, 
    34, 2, 5, 2, 22, -24, 41, -20, -20, -2, 
    -17, -53, -20, -1, 23, 1, -11, -29, 2, 52, 
    -3, 2, 4, 40, -29, 15, 13, 21, 18, 11, 
    -57, 6, -2, 8, 13, -5, 1, 26, -9, 6, 
    12, -6, 48, -4, 15, 8, -22, 5, 21, 16, 
    11, -5, 11, 10, 2, -3, 
};
const TfArray<1, int> tensor_dimension11 = { 1, { 4096 } };
const ALIGN(8) int16_t tensor_data12[256] = { 
    11691, 11691, 11691, 11691, 11691, 11691, 11691, 11691, 11691, 11691, 
    11691, 11691, 11691, 11691, 11691, 11691, 896, 896, 896, 896, 
    896, 896, 896, 896, 896, 896, 896, 896, 896, 896, 
    896, 896, 11691, 11691, 11691, 11691, 11691, 11691, 11691, 11691, 
    11691, 11691, 11691, 11691, 11691, 11691, 11691, 11691, 896, 896, 
    896, 896, 896, 896, 896, 896, 896, 896, 896, 896, 
    896, 896, 896, 896, 11691, 11691, 11691, 11691, 11691, 11691, 
    11691, 11691, 11691, 11691, 11691, 11691, 11691, 11691, 11691, 11691, 
    896, 896, 896, 896, 896, 896, 896, 896, 896, 896, 
    896, 896, 896, 896, 896, 896, 11691, 11691, 11691, 11691, 
    11691, 11691, 11691, 11691, 11691, 11691, 11691, 11691, 11691, 11691, 
    11691, 11691, 896, 896, 896, 896, 896, 896, 896, 896, 
    896, 896, 896, 896, 896, 896, 896, 896, 11691, 11691, 
    11691, 11691, 11691, 11691, 11691, 11691, 11691, 11691, 11691, 11691, 
    11691, 11691, 11691, 11691, 896, 896, 896, 896, 896, 896, 
    896, 896, 896, 896, 896, 896, 896, 896, 896, 896, 
    11691, 11691, 11691, 11691, 11691, 11691, 11691, 11691, 11691, 11691, 
    11691, 11691, 11691, 11691, 11691, 11691, 896, 896, 896, 896, 
    896, 896, 896, 896, 896, 896, 896, 896, 896, 896, 
    896, 896, 11691, 11691, 11691, 11691, 11691, 11691, 11691, 11691, 
    11691, 11691, 11691, 11691, 11691, 11691, 11691, 11691, 896, 896, 
    896, 896, 896, 896, 896, 896, 896, 896, 896, 896, 
    896, 896, 896, 896, 11691, 11691, 11691, 11691, 11691, 11691, 
    11691, 11691, 11691, 11691, 11691, 11691, 11691, 11691, 11691, 11691, 
    896, 896, 896, 896, 896, 896, 896, 896, 896, 896, 
    896, 896, 896, 896, 896, 896, 
};
const TfArray<1, int> tensor_dimension12 = { 1, { 256 } };
const ALIGN(8) int64_t tensor_data13[4] = { 
    1, 1, 1, 32, 
};
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const ALIGN(8) int64_t tensor_data14[2] = { 
    1, 1, 
};
const TfArray<1, int> tensor_dimension14 = { 1, { 2 } };
const TfArray<3, int> tensor_dimension15 = { 3, { 1,1,32 } };
const TfArray<1, float> quant15_scale = { 1, { 0.67502081394195557, } };
const TfArray<1, int> quant15_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,32 } };
const TfArray<1, float> quant16_scale = { 1, { 0.67502081394195557, } };
const TfArray<1, int> quant16_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<2, int> tensor_dimension17 = { 2, { 1,128 } };
const TfArray<1, float> quant17_scale = { 1, { 1.2222282886505127, } };
const TfArray<1, int> quant17_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<2, int> tensor_dimension18 = { 2, { 1,128 } };
const TfArray<1, float> quant18_scale = { 1, { 0.12549963593482971, } };
const TfArray<1, int> quant18_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<2, int> tensor_dimension19 = { 2, { 1,128 } };
const TfArray<1, float> quant19_scale = { 1, { 1.2311282157897949, } };
const TfArray<1, int> quant19_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(8) int8_t tensor_data20[128] = { 
    123, 37, -128, 3, 84, -8, 35, -27, -5, -64, 
    -12, -91, -68, 36, 28, -79, 47, -93, -51, -83, 
    8, 52, 88, -3, 56, 21, 27, -12, 30, 66, 
    63, -71, 120, 100, 20, 44, 81, 61, -23, -8, 
    -12, 12, 29, -17, 88, -46, -11, -24, 124, 67, 
    26, -59, 73, 4, 101, 52, 127, 84, 5, 21, 
    98, 109, 79, -15, -56, -78, -23, 21, 68, 17, 
    -102, 86, -37, -54, -15, -32, -4, 15, -93, -65, 
    13, 40, -14, 30, -38, 24, -107, -40, 43, -11, 
    71, 4, -21, -72, 61, -52, 50, 22, -2, -54, 
    52, -37, 27, 41, -112, -91, -92, -55, -52, 0, 
    -66, -107, 85, -57, -87, -106, -64, -14, 74, -97, 
    45, -78, -4, -76, -84, 50, 18, -56, 
};
const TfArray<1, int> tensor_dimension20 = { 1, { 128 } };
const TfArray<1, float> quant20_scale = { 1, { 0.015390566550195217, } };
const TfArray<1, int> quant20_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,128 } };
const TfArray<1, float> quant21_scale = { 1, { 1.2314809560775757, } };
const TfArray<1, int> quant21_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,32 } };
const TfArray<1, float> quant22_scale = { 1, { 1.2314809560775757, } };
const TfArray<1, int> quant22_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<2, int> tensor_dimension23 = { 2, { 1,32 } };
const TfArray<1, float> quant23_scale = { 1, { 1.2314809560775757, } };
const TfArray<1, int> quant23_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<2, int> tensor_dimension24 = { 2, { 1,32 } };
const TfArray<1, float> quant24_scale = { 1, { 1.2314809560775757, } };
const TfArray<1, int> quant24_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<2, int> tensor_dimension25 = { 2, { 1,32 } };
const TfArray<1, float> quant25_scale = { 1, { 1.2314809560775757, } };
const TfArray<1, int> quant25_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<2, int> tensor_dimension26 = { 2, { 1,32 } };
const TfArray<1, float> quant26_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<2, int> tensor_dimension27 = { 2, { 1,32 } };
const TfArray<1, float> quant27_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,32 } };
const TfArray<1, float> quant28_scale = { 1, { 11.763904571533203, } };
const TfArray<1, int> quant28_zero = { 1, { 93 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,32 } };
const TfArray<1, float> quant29_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant29_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,32 } };
const TfArray<1, float> quant30_scale = { 1, { 0.0078125, } };
const TfArray<1, int> quant30_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfArray<2, int> tensor_dimension31 = { 2, { 1,32 } };
const TfArray<1, float> quant31_scale = { 1, { 0.0078431377187371254, } };
const TfArray<1, int> quant31_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const TfArray<2, int> tensor_dimension32 = { 2, { 1,32 } };
const TfArray<1, float> quant32_scale = { 1, { 11.77121639251709, } };
const TfArray<1, int> quant32_zero = { 1, { 93 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const TfArray<2, int> tensor_dimension33 = { 2, { 1,32 } };
const TfArray<1, float> quant33_scale = { 1, { 0.0078125, } };
const TfArray<1, int> quant33_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const TfArray<2, int> tensor_dimension34 = { 2, { 1,32 } };
const TfArray<1, float> quant34_scale = { 1, { 0.0078431377187371254, } };
const TfArray<1, int> quant34_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(4) int32_t tensor_data35[1] = { 
    -6391, 
};
const TfArray<1, int> tensor_dimension35 = { 1, { 1 } };
const TfArray<1, float> quant35_scale = { 1, { 1.4973900761106052e-05, } };
const TfArray<1, int> quant35_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const TfArray<4, int> tensor_dimension36 = { 4, { 1,1,1,32 } };
const TfArray<1, float> quant36_scale = { 1, { 0.0078431377187371254, } };
const TfArray<1, int> quant36_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(8) int8_t tensor_data37[1*1*1*32] = { 
  /* [0][0][][] */ 118,-60,36,75,-33,31,35,-15,28,-17,16,19,60,-47,21,-31,-46,25,34,-44,-21,65,31,19,127,-101,-11,30,-27,47,-19,32, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 1,1,1,32 } };
const TfArray<1, float> quant37_scale = { 1, { 0.0019091722788289189, } };
const TfArray<1, int> quant37_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const TfArray<4, int> tensor_dimension38 = { 4, { 1,1,1,1 } };
const TfArray<1, float> quant38_scale = { 1, { 0.010121752507984638, } };
const TfArray<1, int> quant38_zero = { 1, { 25 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const TfArray<2, int> tensor_dimension39 = { 2, { 1,1 } };
const TfArray<1, float> quant39_scale = { 1, { 0.010121752507984638, } };
const TfArray<1, int> quant39_zero = { 1, { 25 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
uint8_t ALIGN(4) opdata0[142] = { 107, 116, 0, 109, 112, 0, 8, 96, 0, 0, 0, 96, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 32, 0, 0, 0, 2, 0, 255, 255, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 1, 34, 20, 7, 99, 43, 117, 115, 72, 59, 56, 7, 1, 7, 103, 14, 0, 121, 77, 0, 0, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs0 = { 3, { 1,7,8 } };
const TfArray<1, int> outputs0 = { 1, { 15 } };
const ALIGN(4) uint8_t opdata1[8] = { 1, 0, 0, 0, 0, 0, 0, 0,  }; /* op type 88=UNPACK */
const TfArray<1, int> inputs1 = { 1, { 15 } };
const TfArray<1, int> outputs1 = { 1, { 16 } };
uint8_t ALIGN(4) opdata2[142] = { 107, 116, 0, 109, 112, 0, 8, 32, 0, 0, 0, 32, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 1, 0, 255, 255, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 7, 99, 43, 117, 115, 72, 59, 56, 7, 1, 7, 103, 14, 0, 121, 77, 0, 0, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs2 = { 3, { 16,9,10 } };
const TfArray<1, int> outputs2 = { 1, { 17 } };
uint8_t ALIGN(4) opdata3[142] = { 107, 116, 0, 109, 112, 0, 8, 32, 0, 0, 0, 32, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 1, 0, 255, 255, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 7, 99, 43, 117, 115, 72, 59, 56, 7, 1, 7, 103, 14, 0, 121, 77, 0, 0, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs3 = { 3, { 0,11,12 } };
const TfArray<1, int> outputs3 = { 1, { 18 } };
const TfLiteAddParams opdata4 = { kTfLiteActNone };
const TfArray<2, int> inputs4 = { 2, { 17,18 } };
const TfArray<1, int> outputs4 = { 1, { 19 } };
const TfLiteAddParams opdata5 = { kTfLiteActNone };
const TfArray<2, int> inputs5 = { 2, { 19,20 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const ALIGN(4) uint8_t opdata6[4] = { 4, 0, 0, 0,  }; /* op type 49=SPLIT */
const TfArray<2, int> inputs6 = { 2, { 3,21 } };
const TfArray<4, int> outputs6 = { 4, { 22,23,24,25 } };
uint8_t ALIGN(4) opdata7[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs7 = { 2, { 22,4 } };
const TfArray<1, int> outputs7 = { 1, { 26 } };
uint8_t ALIGN(4) opdata8[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs8 = { 2, { 23,4 } };
const TfArray<1, int> outputs8 = { 1, { 27 } };
const TfLiteMulParams opdata9 = { kTfLiteActNone };
const TfArray<2, int> inputs9 = { 2, { 27,2 } };
const TfArray<1, int> outputs9 = { 1, { 28 } };
uint8_t ALIGN(4) opdata10[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs10 = { 2, { 25,4 } };
const TfArray<1, int> outputs10 = { 1, { 29 } };
uint8_t ALIGN(4) opdata11[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs11 = { 2, { 24,5 } };
const TfArray<1, int> outputs11 = { 1, { 30 } };
const TfLiteMulParams opdata12 = { kTfLiteActNone };
const TfArray<2, int> inputs12 = { 2, { 26,30 } };
const TfArray<1, int> outputs12 = { 1, { 31 } };
const TfLiteAddParams opdata13 = { kTfLiteActNone };
const TfArray<2, int> inputs13 = { 2, { 28,31 } };
const TfArray<1, int> outputs13 = { 1, { 32 } };
uint8_t ALIGN(4) opdata14[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs14 = { 2, { 32,6 } };
const TfArray<1, int> outputs14 = { 1, { 33 } };
const TfLiteMulParams opdata15 = { kTfLiteActNone };
const TfArray<2, int> inputs15 = { 2, { 29,33 } };
const TfArray<1, int> outputs15 = { 1, { 34 } };
const TfLiteReshapeParams opdata16 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs16 = { 2, { 34,13 } };
const TfArray<1, int> outputs16 = { 1, { 36 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 36,37,35 } };
const TfArray<1, int> outputs17 = { 1, { 38 } };
const TfLiteReshapeParams opdata18 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs18 = { 2, { 38,14 } };
const TfArray<1, int> outputs18 = { 1, { 39 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension0, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension1, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1)) },},
  { kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2)) },},
  { kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 4, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 3072, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 128, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 4096, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 512, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 4096, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 512, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt64, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt64, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 16, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension15, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16)) },},
  { kTfLiteInt8, tensor_arena + 256, (TfLiteIntArray*)&tensor_dimension17, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension19, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19)) },},
  { kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension21, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21)) },},
  { kTfLiteInt8, tensor_arena + 224, (TfLiteIntArray*)&tensor_dimension22, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension23, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23)) },},
  { kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension24, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24)) },},
  { kTfLiteInt8, tensor_arena + 160, (TfLiteIntArray*)&tensor_dimension25, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25)) },},
  { kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension27, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension28, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28)) },},
  { kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension29, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29)) },},
  { kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension30, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension31, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31)) },},
  { kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension33, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33)) },},
  { kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension34, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34)) },},
  { kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension36, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36)) },},
  { kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37)) },},
  { kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension38, 1, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension39, 1, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39)) },},
};
const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_XC_conv2d_v2, 142, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_UNPACK, 0, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_XC_conv2d_v2, 142, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_XC_conv2d_v2, 142, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_SPLIT, 0, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_RESHAPE, 0, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, 0, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_RESHAPE, 0, },
};

// Scratch buffer variables
int scratch_buffer_idx = 0;
const int scratch_buffer_offsets[3] = { 0, 0, 0 };
tflite::MicroContext mc;

// Xcore context and thread variables
xc_context_config_t xc_config;
constexpr int kStackWordsPerThread = 256;
uint64_t xc_stack[kStackWordsPerThread/2];

// Functions to be used as function pointers for TfLiteContext and MicroContext 
static void* AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes) {
  static uint8_t *AllocPtr = tensor_arena + sizeof(tensor_arena);

  AllocPtr -= bytes;
  return AllocPtr;
}

static TfLiteEvalTensor *GetEvalTensor(const struct TfLiteContext *context,
                                       int tensor_idx) {
  return &evalTensors[tensor_idx];
}

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext *context, size_t bytes,
                                       int *buffer_idx) {
  *buffer_idx = scratch_buffer_idx++;
  return kTfLiteOk;
};

static void *GetScratchBuffer(struct TfLiteContext *context,
                                       int buffer_idx) {
  return tensor_arena + scratch_buffer_offsets[buffer_idx];
}

static TfLiteTensor* AllocateTempInputTensor(const TfLiteNode* node, int index) {
      return &ctx.tensors[node->inputs->data[index]];
}

static TfLiteTensor* AllocateTempOutputTensor(const TfLiteNode* node, int index) {
      return &ctx.tensors[node->outputs->data[index]];
}

static void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
}

static void* external_context() {
  return &xc_config;
}

} // namespace

TfLiteStatus model_init(void *flash_data) {
  // Set flash data in xcore context config
  xc_config.flash_data = flash_data;

  // Setup microcontext functions
  mc.AllocateTempInputTensor = &AllocateTempInputTensor;
  mc.AllocateTempOutputTensor = &AllocateTempOutputTensor;
  mc.DeallocateTempTfLiteTensor = &DeallocateTempTfLiteTensor;
  mc.external_context = &external_context;

  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  
  // Set microcontext as the context ptr
  ctx.impl_ = (void*)&mc;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 40;
  for(size_t i = 0; i < 40; ++i) {
    tflTensors[i].data.data = tensorData[i].data;
    evalTensors[i].data.data = tensorData[i].data;
    tflTensors[i].type = tensorData[i].type;
    evalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    evalTensors[i].dims = tensorData[i].dims;
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
  }
  registrations[OP_XC_conv2d_v2] = *(tflite::ops::micro::xcore::Register_XC_conv2d_v2());
  registrations[OP_UNPACK] = tflite::ops::micro::Register_UNPACK();
  registrations[OP_ADD] = tflite::Register_ADD();
  registrations[OP_SPLIT] = tflite::ops::micro::Register_SPLIT();
  registrations[OP_XC_lookup] = *(tflite::ops::micro::xcore::Register_XC_lookup());
  registrations[OP_MUL] = tflite::Register_MUL();
  registrations[OP_RESHAPE] = tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = tflite::Register_CONV_2D();

  for(size_t i = 0; i < 19; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, nodeData[i].custom_initial_data_size);
    }
  }
  for(size_t i = 0; i < 19; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 1, 2, 
};
TfLiteTensor* model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  34, 32, 39, 
};
TfLiteTensor* model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus model_invoke() {
  thread_init_1(&xc_config.thread_info);
  xc_config.thread_info.nstackwords = kStackWordsPerThread;
  xc_config.thread_info.stacks = &xc_stack[kStackWordsPerThread/2 - 1];
  for(size_t i = 0; i < 19; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      thread_destroy(&xc_config.thread_info);
      return status;
    }
  }
  thread_destroy(&xc_config.thread_info);
  return kTfLiteOk;
}
