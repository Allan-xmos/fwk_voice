// This file is generated. Do not edit.
// Generated on: 08.08.2023 16:58:49


#include "../../api/xcore_config.h"
#include "lib_nn/api/version.h"
#include "lib_tflite_micro/api/version.h"
#include "tensorflow/lite/c/builtin_op_data.h"
#include "tensorflow/lite/c/common.h"
#include "tensorflow/lite/micro/kernels/conv.h"
#include "tensorflow/lite/micro/kernels/fully_connected.h"
#include "tensorflow/lite/micro/kernels/micro_ops.h"
#include "tensorflow/lite/micro/kernels/reduce.h"
#include "tensorflow/lite/micro/kernels/softmax.h"
#include "tensorflow/lite/micro/micro_context.h"

// #define TFLMC_XCORE_PROFILE
// #define TFLMC_PRINT_TENSORS
// #define TFLMC_PRINT_INPUT_TENSORS
// #define SHARED_MEMORY_ARENA

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif
namespace tflite {
namespace ops {
namespace micro {
namespace xcore {
extern TfLiteRegistration_V1 *Register_XC_conv2d_v2(void);
extern TfLiteRegistration_V1 *Register_XC_strided_slice(void);
extern TfLiteRegistration_V1 *Register_XC_lookup(void);
} // namespace xcore
}  // namespace micro
}  // namespace ops
}  // namespace tflite



constexpr int kTensorArenaSize = 1392;
#ifndef SHARED_MEMORY_ARENA
namespace {
uint8_t tensor_arena[kTensorArenaSize] ALIGN(8);
}
#else
extern uint8_t tensor_arena[];
#endif

namespace {
template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_XC_conv2d_v2, OP_CONV_2D, OP_XC_strided_slice, OP_RESHAPE, OP_XC_lookup,  OP_LAST
};

#if defined(TFLMC_XCORE_PROFILE) || defined(TFLMC_PRINT_TENSORS)
const char *op_strs[] = {
"OP_XC_conv2d_v2", "OP_CONV_2D", "OP_XC_strided_slice", "OP_RESHAPE", "OP_XC_lookup", };
#endif

#ifdef TFLMC_XCORE_PROFILE
int op_times[OP_LAST];
int op_counts[OP_LAST];
int64_t op_times_summed;
int time_t0, time_t1;
#endif

TfLiteContext ctx{};

TfLiteRegistration_V1 registrations[OP_LAST];
const TfArray<4, int> tensor_dimension0 = { 4, { 1,1,4,24 } };
const TfArray<1, float> quant0_scale = { 1, { 0.12232188135385513, } };
const TfArray<1, int> quant0_zero = { 1, { 127 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int8_t tensor_data1[256] = { 
    -128, -128, -128, -128, -128, -127, -127, -127, -127, -127, 
    -127, -127, -127, -127, -126, -126, -126, -126, -125, -125, 
    -125, -124, -124, -123, -123, -122, -121, -120, -119, -118, 
    -117, -116, -114, -112, -111, -108, -106, -103, -100, -97, 
    -94, -90, -86, -81, -76, -71, -65, -59, -52, -46, 
    -39, -31, -24, -16, -8, 0, 8, 16, 24, 31, 
    39, 46, 52, 59, 65, 71, 76, 81, 86, 90, 
    94, 97, 100, 103, 106, 108, 111, 112, 114, 116, 
    117, 118, 119, 120, 121, 122, 123, 123, 124, 124, 
    125, 125, 125, 126, 126, 126, 126, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, 
};
const TfArray<1, int> tensor_dimension1 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data2[1664] = { 
    0, 10, -15, 13, -27, -9, 4, 10, 69, 7, 
    2, 8, -14, -127, -75, -2, 52, 64, 91, 100, 
    -85, -95, -29, 49, 11, 101, -106, -7, -33, 127, 
    56, 64, 56, 66, 18, -10, 0, -21, -10, 13, 
    -25, -8, -83, 4, 78, 10, -60, -19, 55, 74, 
    30, 94, -37, -3, 31, -6, -44, 22, 35, 32, 
    -19, 53, -67, 83, -41, -5, 127, 70, 91, 17, 
    66, -13, 0, -4, 7, 3, -2, 34, -16, -8, 
    -9, 6, -30, -11, 9, -53, -43, 39, -127, -113, 
    64, 57, 16, 100, -11, 65, 26, -95, -127, -107, 
    -12, 53, 66, 28, 37, -12, 23, -34, 15, 95, 
    76, 21, 86, 18, 49, 85, 0, -84, -6, -70, 
    4, 30, -6, 31, 49, 3, 33, 22, -50, -127, 
    -107, 2, 73, 17, 27, 56, 5, -42, 5, -26, 
    29, -30, 24, -1, 3, 23, -3, 12, 21, 5, 
    1, -2, 10, 26, 14, 9, 37, -15, -127, 9, 
    30, -44, 24, -15, 6, 27, -28, 0, -50, 126, 
    95, 104, 105, 89, -33, -51, 127, -63, 87, -16, 
    98, -33, -15, 6, 92, 82, 91, 6, 127, -76, 
    124, 3, -1, -5, 2, -2, -20, -45, 22, 95, 
    5, -56, -74, 34, 127, -92, -19, 26, -16, 67, 
    -71, -46, 12, -43, -23, 100, 10, -97, 127, -66, 
    19, 11, 31, -6, -3, -4, 6, 2, 6, -26, 
    -11, 13, 7, -17, -7, -6, 16, -4, 2, -1, 
    1, 14, -1, -32, 49, 32, 4, 5, -7, 24, 
    17, 1, 19, 13, 14, -25, 48, -13, -127, 45, 
    -36, -93, 48, 25, -2, 3, -4, 2, 1, -2, 
    -3, -2, 1, 5, -1, 0, 27, -29, 34, 82, 
    -82, -93, 60, 73, -37, -127, -16, 89, 41, 112, 
    110, 25, 112, 84, 10, 122, -25, 98, 126, -52, 
    -7, -24, -82, 127, -67, -97, 28, 107, 86, 7, 
    -12, 94, 41, 85, -6, 74, 90, -70, 19, -17, 
    124, -83, -4, 68, 80, -38, -70, 127, 60, 81, 
    -100, 64, 45, 53, -78, 84, 3, 4, -14, 3, 
    31, 20, -10, -35, -54, 36, 79, 8, -58, 78, 
    6, -127, 15, 37, -12, -1, 26, -31, 15, -6, 
    -5, -5, -6, -9, -7, -13, -4, -4, 6, 8, 
    13, 6, -5, 74, -11, -127, -3, 34, 35, -22, 
    -31, -10, 21, 5, -2, 3, -7, 0, 0, -2, 
    3, 2, -9, 3, 38, 44, -48, -127, 47, 57, 
    -31, 11, 7, -21, 16, 2, 14, -8, 0, -18, 
    -9, 0, 28, -14, -3, -18, 5, -45, -8, 12, 
    13, -46, -6, -33, -1, 66, 1, 127, 83, 26, 
    -114, -97, 4, -6, -2, -34, -45, -44, -19, -25, 
    -60, 127, 25, 8, -1, 18, 2, 48, -56, 16, 
    -11, -43, 26, 11, 24, 0, 3, -31, -62, 28, 
    -11, -16, 18, -24, -42, -15, -1, -10, -66, -117, 
    -74, -24, 57, 35, 95, 74, -30, 74, -48, 127, 
    -2, 24, 104, 105, -34, -61, 71, -91, 44, 119, 
    127, 52, 59, 75, 127, 108, 35, 117, -31, 2, 
    58, -1, 112, -33, 127, -108, -30, 39, -24, 18, 
    -3, -1, -4, 8, -4, 7, -7, 12, -12, 8, 
    4, -9, 12, -5, -13, 17, -10, 5, 99, 112, 
    64, 87, -48, -25, 67, 127, 113, -27, -17, 123, 
    -26, -43, 120, 69, 124, 49, -45, 60, 46, 19, 
    63, -89, 9, -1, 71, 79, 110, -60, -127, -114, 
    -92, -21, 76, 48, 7, -11, 57, 8, -22, 23, 
    -14, 38, -34, -61, 66, -18, 11, -4, 112, 87, 
    -87, 64, 68, 7, 127, 67, 11, -53, 116, -60, 
    -83, 120, -107, 2, 63, 15, 51, 74, 110, 71, 
    3, -9, -2, 18, -22, -59, 125, -1, -24, -106, 
    127, -19, -84, 96, -46, 10, 15, -26, 22, 13, 
    -16, -14, -17, 18, 1, 61, 26, 32, -4, 20, 
    30, 2, -15, -25, 13, -7, 6, 12, -14, -5, 
    8, 47, -9, -27, -34, -12, -127, 17, -14, -49, 
    -127, -64, -33, -65, -44, -13, -26, -31, 7, 13, 
    -33, -32, 15, 46, 28, -13, 19, 29, 37, 28, 
    -1, 7, 2, 22, -18, 15, 21, 8, 5, 26, 
    7, 47, 58, -33, -127, -54, 57, -3, -4, 21, 
    -17, 5, 7, -19, 34, -29, -30, 20, 116, 85, 
    -43, -63, 40, 113, 98, 10, 40, 29, 2, -31, 
    84, -36, -22, 127, 44, -22, 101, -31, 16, 111, 
    22, -40, -39, 3, -15, -29, -34, 12, -16, -80, 
    -127, -66, 87, -63, 55, 84, 70, 28, 96, -8, 
    -32, 54, 71, -41, 1, 1, -1, -4, 4, 5, 
    -2, -10, 2, -1, 10, 7, 5, 1, 4, 27, 
    -2, -58, -39, -72, -5, 127, 4, -7, 10, -7, 
    0, -34, -32, 127, 8, -64, -44, 87, -7, -87, 
    101, -78, 31, -7, 3, 8, -1, -3, -20, 2, 
    11, 10, -17, 77, 127, 50, -40, 68, 43, -43, 
    29, -27, 26, -15, 2, -6, -21, 11, -23, -31, 
    -1, 6, -13, -17, -2, 15, 3, 70, -127, 92, 
    -31, 69, 34, 10, -40, -60, -27, 48, 34, -7, 
    -25, 39, 17, -50, -17, 45, -42, -40, 29, 12, 
    -1, 19, -13, -17, -9, 12, 4, 16, 8, -8, 
    3, 12, -8, -14, 16, 11, -6, 22, 32, -127, 
    18, 3, 8, 13, 38, 106, 68, -40, 113, 44, 
    115, -54, 116, 45, -59, 26, -56, -63, -71, 49, 
    120, 28, 126, 81, -29, 62, -41, 127, 11, 40, 
    75, 88, 35, -117, -127, -11, 25, -10, 21, -12, 
    -13, -17, 74, -22, 0, 8, 4, -19, -5, 8, 
    16, -16, -2, -2, 2, -2, -8, -10, 5, 4, 
    1, 19, 24, -3, -20, -11, -94, 33, 127, -41, 
    -60, 8, 5, -5, 27, -5, 6, -26, 12, -37, 
    15, 9, 19, 31, 15, -2, 19, 33, 37, -9, 
    15, 48, -23, -51, 54, -11, -127, -27, 34, 16, 
    127, -28, -21, -15, 14, -12, 14, -8, -3, 2, 
    13, -4, -6, 11, 7, -14, 7, -3, 4, 4, 
    -21, 10, -9, 13, 0, -6, 5, -2, -15, 9, 
    -12, -3, 14, -28, -13, -6, 31, 58, -44, 70, 
    50, -127, 35, -51, -10, 23, 10, -1, -8, -15, 
    -12, 6, -22, -4, 46, -26, 30, -8, 26, -16, 
    10, 30, -4, -14, 20, -43, -14, 127, -79, -5, 
    20, 25, -8, -16, 7, -7, -20, -10, -4, 16, 
    -28, -8, 39, 23, -18, -8, 59, -11, -25, -11, 
    11, -14, 59, 24, 50, 127, 6, -9, -17, -2, 
    -51, -20, 24, 3, -62, -31, 54, -26, -15, -16, 
    127, 60, 99, 51, -85, -46, -79, 10, -13, 0, 
    -29, 39, 79, -127, 57, -26, 48, -8, 13, -5, 
    -18, 8, 12, 8, -37, 16, 37, -57, 17, 2, 
    -3, -5, -11, 13, -11, 76, -29, 29, -67, 127, 
    121, 76, -7, 112, 26, -3, 66, -73, 21, -5, 
    -82, 18, 13, 50, 121, 76, 52, 120, 25, -10, 
    7, 75, 127, 0, 20, 63, 55, 16, -50, -43, 
    -64, -40, 5, -40, 3, -3, 19, -29, -4, -12, 
    35, -19, 125, 0, 29, -7, 127, 49, 102, -90, 
    127, -36, -37, -15, -26, 25, 19, 18, -52, 111, 
    -23, 109, 111, 5, 61, 15, 1, -9, -2, -20, 
    8, 35, -31, -48, 110, -32, -69, 127, -122, 96, 
    -76, 46, -22, 25, -21, -2, 2, -13, 19, 1, 
    97, 113, 127, 73, 56, -17, 102, -31, 57, 34, 
    30, -37, -31, 84, 78, 37, -16, -44, 51, 35, 
    -70, 30, 111, -18, 127, 57, -45, -25, 54, 18, 
    -12, 100, -8, 54, -2, 59, 21, 64, 2, -22, 
    -56, -19, 46, 70, 84, -1, 53, 30, 4, 1, 
    -2, -23, 27, -9, -53, 43, 47, -99, 127, -122, 
    101, -49, 21, -2, -17, 7, -10, 12, -14, 3, 
    18, 0, 0, 4, 4, -10, 28, 22, 26, -14, 
    -68, -80, 26, 87, 7, -18, 69, 5, -127, 27, 
    18, -1, 8, -10, 3, -1, -29, 74, 62, -109, 
    60, 106, -102, 74, 101, -45, 24, 127, 118, -6, 
    110, -60, 76, 78, 58, 64, 108, 39, 112, 48, 
    8, -69, -24, 50, 127, -43, -87, -9, 37, 59, 
    23, -23, 3, 3, -2, 27, 5, -38, 43, -80, 
    25, 13, -46, -24, 115, 76, -29, 55, 24, -121, 
    -25, -10, 114, 37, -62, 13, 77, 85, 28, -27, 
    72, -5, 26, 113, 97, 116, 127, -13, 0, 17, 
    4, -1, 12, -16, -35, 89, -85, 106, -127, 75, 
    -3, -44, 99, -77, 25, -16, 7, -14, 3, -11, 
    20, -3, -13, -12, -35, -49, 6, 16, -4, 12, 
    -10, 9, -1, 19, -25, -99, 24, 58, -45, -127, 
    -16, 7, 80, -65, -12, 21, 19, -58, -82, 106, 
    48, -127, 110, 12, -39, 40, -22, -8, 23, 0, 
    -3, 3, 4, 1, -17, 5, -2, 20, -18, 9, 
    3, -88, 36, 98, -127, 73, 2, 1, 7, 15, 
    -8, 2, 7, 31, -23, -12, 66, -47, 7, 4, 
    13, -16, -73, 9, -1, 2, 4, -6, -10, -9, 
    -2, 26, 17, -19, 1, -1, 15, -24, 58, -12, 
    -42, 19, -26, -43, 22, 73, 49, -127, -3, 10, 
    -6, 11, 11, -15, 11, 28, 27, 16, -43, -127, 
    -41, 67, 30, 24, -1, -28, 19, -7, 0, -11, 
    16, -10, -122, 127, 89, 73, -30, -6, 29, -8, 
    -5, 33, -4, 2, -10, 31, 1, 1, -23, 16, 
    -23, 8, -18, 16, -12, 1, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 
};
const TfArray<1, int> tensor_dimension2 = { 1, { 1664 } };
const ALIGN(8) int16_t tensor_data3[128] = { 
    16505, 16740, 1745, 1631, 12610, 12474, 22746, 12843, 1507, 18527, 
    14037, 8800, 11576, 2320, 9869, 10761, -1525, -2494, -3115, -3509, 
    -2016, -2709, -2314, -1939, -3548, -2801, -2462, -3158, -1814, -3509, 
    -3910, -2141, 18892, 8890, 2215, 17792, 8406, 8346, 16121, 1527, 
    11166, 1794, 29778, 1421, 9436, 19156, 9702, 20541, -2177, -1933, 
    -3673, -2760, 462, -2566, -2227, -3206, -2417, -3828, -2668, -3544, 
    -1544, -1447, -1825, -1968, 14196, 2255, 21450, 5217, 18932, 18225, 
    17989, 26439, 14981, 18571, 15544, 1956, 19479, 15846, 24429, 17974, 
    -4338, -3879, -2720, -1905, -5856, -2972, -1973, -4006, -2894, -2003, 
    -2811, -3665, -2232, -2682, -6939, -2459, 14797, 17904, 14846, 13484, 
    19714, 6301, 16652, 1575, 11647, 1541, 16476, 16984, 1969, 2043, 
    15581, 1567, -4438, -1904, -1883, -2205, -2609, -1082, -2402, -3396, 
    -2196, -3674, -2286, -2203, -3285, -3736, -2108, -3183, 
};
const TfArray<1, int> tensor_dimension3 = { 1, { 128 } };
const ALIGN(8) int8_t tensor_data4[4096] = { 
    -2, -78, 3, -4, 4, -11, 6, -2, 5, -7, 
    2, -5, 4, 4, 0, -3, -3, -5, 7, -3, 
    -1, 3, 3, 2, 2, -4, 3, 2, -3, -1, 
    -4, 3, 2, -2, 5, 2, 2, 4, -6, 9, 
    6, 6, 3, 5, -1, -2, 4, 2, 4, 6, 
    -3, 8, -2, -4, -5, -5, 3, -10, -3, 9, 
    6, 3, 7, -6, -6, 1, -2, -7, -1, -6, 
    9, -1, 5, -4, -5, -6, 3, 9, -1, -3, 
    -5, 2, 0, -3, 0, 7, 9, -5, -4, 12, 
    -4, 1, -7, 1, -1, 9, -1, -1, -1, -3, 
    -1, -2, 4, -7, 5, -11, -2, 0, 5, 2, 
    -8, -3, -2, -1, -6, -2, 0, 1, 2, 3, 
    -1, 9, 5, -8, -2, -5, -4, -6, -4, -2, 
    2, -8, 1, -3, 7, -19, 4, -5, -3, -9, 
    0, 3, 0, -3, -2, -11, 6, -2, 0, 5, 
    -2, 1, 2, -2, -2, 2, -2, 0, -38, 9, 
    3, 2, -2, 3, 2, 4, -6, 4, -15, 3, 
    3, 3, -2, -9, 2, 2, 4, 4, -5, 5, 
    -127, 0, -5, -3, 2, -13, -3, -2, 4, 4, 
    4, -5, -2, 0, 0, -3, -2, -4, 5, -4, 
    3, -4, -2, -2, 3, 3, -3, -3, -3, -1, 
    6, -3, -1, 2, 7, 3, -3, 8, 4, -2, 
    -4, -2, -3, 4, -6, -5, 3, -8, 3, -8, 
    6, 0, 2, -4, -3, -2, -1, 7, -1, -3, 
    -2, -4, -1, -3, -1, 9, 9, 1, -2, -7, 
    6, 4, 0, -3, -7, 12, 2, 10, -9, 2, 
    0, 4, -5, 1, -29, 3, 3, 2, -1, -5, 
    1, 1, 3, 2, -3, 3, -94, 2, -4, -2, 
    2, -7, -3, -12, 1, 5, 3, -4, 2, -2, 
    4, 3, 3, 3, -3, 5, 0, 4, 3, 3, 
    -3, -3, 4, 2, 3, 1, -4, 4, 1, 0, 
    -5, -4, 4, -10, -5, 7, 3, 4, 2, -2, 
    -1, -13, 1, -1, 0, -5, 3, -2, 1, -3, 
    -2, 1, 3, 3, -3, -3, -4, 0, 1, -1, 
    0, 6, 2, 2, 2, 1, -10, -1, -3, 0, 
    -1, -4, -1, 1, 0, -2, -1, -1, 7, -6, 
    4, -3, -2, -3, 2, 3, -3, -1, -3, -16, 
    6, -4, -1, 1, 4, 2, -1, 11, 4, -2, 
    -4, -1, -3, 4, -3, -3, -35, -4, -1, 0, 
    5, -3, -7, -5, -2, 0, 2, 3, 0, -3, 
    -1, 1, -10, 2, -8, 3, 4, 2, -1, 1, 
    3, -6, -2, -1, -1, -3, 2, -2, 2, 2, 
    3, 2, -4, 4, -4, 3, 2, 4, -2, -6, 
    3, 2, 4, 2, -4, 5, 1, -2, -6, -3, 
    3, -10, -4, 4, 4, 3, 3, -2, -5, -4, 
    -4, -3, -1, -2, 2, -7, 2, -4, -2, -1, 
    6, 7, -4, -6, -7, 1, -14, -1, 2, 6, 
    1, -5, 0, 11, -10, -1, -2, -1, -2, -5, 
    -3, -1, -1, -6, -4, -5, 7, -5, -4, -3, 
    -2, -3, 4, 5, -3, -3, -5, -1, 8, -4, 
    -23, 2, 12, 5, -4, 10, 5, -9, -3, -3, 
    -3, 5, -2, -22, -1, -3, 1, -5, 4, -1, 
    1, -3, 1, -4, 2, 4, -2, -1, -4, -4, 
    5, -3, 0, 5, 0, 3, 0, 1, 4, -3, 
    -2, 1, -3, 4, -1, -12, 2, -1, -2, -5, 
    -2, -7, -1, -1, -2, 1, -2, 3, 3, -2, 
    -1, -5, -3, -3, -5, 1, -16, -2, 4, -10, 
    -2, 4, -3, 4, -4, 5, -5, 2, -2, -6, 
    -1, -4, 3, -1, 2, -2, -4, -6, 2, 7, 
    -1, -2, -6, 2, 4, -2, 0, 5, 7, -3, 
    -3, 9, -2, 1, -5, 0, -1, 6, 0, 1, 
    1, -1, 0, -2, 2, -6, 3, -8, -2, -1, 
    3, 1, -3, -3, 0, 0, -3, -2, 0, 1, 
    -1, 2, -1, 0, 3, -5, -1, -2, -2, -4, 
    -3, 1, -1, -6, 1, -2, 7, -6, 1, -3, 
    -2, -8, 0, 2, -1, -3, -1, -6, 6, -2, 
    -1, 5, -1, 0, 2, -1, 0, -1, -3, -1, 
    -22, 7, 2, -4, 2, 2, 2, 3, -3, 1, 
    -3, 3, 2, 2, -2, 1, 2, 1, 2, 0, 
    -5, 2, 2, 1, -3, -3, 4, -10, -2, 2, 
    5, 3, 0, -2, -2, 1, 0, -2, -3, -3, 
    5, -2, 3, -2, -2, -2, 3, 3, -2, -3, 
    -3, -1, 6, -2, 0, 1, 6, 2, -2, 10, 
    4, -1, -3, -2, -2, 4, -5, 2, -1, -6, 
    0, -5, 8, 0, 0, -2, -2, -4, -1, 6, 
    -1, -3, -3, -3, 5, -4, 0, 7, 9, 1, 
    -4, 11, 4, 0, -3, -2, -5, 11, 2, -1, 
    2, 3, 2, 4, -5, 2, 5, 2, 1, 1, 
    -1, -4, 1, 3, 2, 1, -3, 3, 0, 0, 
    -2, -2, 3, -9, -2, 5, 3, 3, 1, -4, 
    2, 0, 0, 2, 2, 2, -3, 3, -9, 3, 
    2, 2, -2, -1, 3, 1, 3, 1, -3, 4, 
    1, 0, -5, -3, 2, -9, -3, 0, 4, 3, 
    2, -2, 0, -5, -1, 1, -1, -2, 0, -1, 
    -1, 0, -2, 0, 2, 1, -3, -1, -3, -1, 
    -3, -1, 1, 4, 0, 1, 2, -4, -7, -2, 
    -2, 1, -1, 1, -1, 1, 0, -2, 0, -1, 
    5, -4, 3, -2, -2, -2, 2, 3, -3, -1, 
    -1, -10, 5, -3, 0, 2, 3, 1, -1, 9, 
    2, -1, -3, -2, -1, 3, -1, -2, -28, -2, 
    -1, 0, 3, -1, -2, -3, -1, 0, 1, 2, 
    1, -3, 0, 0, -8, 1, 0, 2, 1, 2, 
    0, 3, 3, -2, -1, 1, 0, -2, 2, -1, 
    1, 2, 2, 2, -4, 3, -6, 2, 2, 3, 
    -2, -2, 3, 1, 2, 2, -3, 3, 1, -2, 
    -4, -3, 2, -8, -3, 2, 4, 3, 2, -2, 
    -3, 0, -3, -2, -1, -1, 8, -5, 0, -2, 
    -2, -1, 3, 6, -1, -3, -3, 0, -12, -1, 
    2, 4, 4, -2, -1, 15, -5, 0, -3, 0, 
    -1, -1, -2, 0, 2, -3, -3, -5, 6, -2, 
    0, -1, -1, -2, 4, 4, -1, -3, -5, -1, 
    7, -3, -16, 1, 9, 3, -3, 3, 4, -5, 
    -3, -3, -1, 4, -1, -21, -2, -2, -1, -3, 
    3, -1, -1, -2, 1, -6, 1, 6, -3, -1, 
    -3, -3, 3, -3, 0, 5, 1, 2, -1, 4, 
    4, -3, 0, 1, -3, 2, 2, 2, 3, 3, 
    3, 2, -3, 4, 4, 3, 2, 2, -2, -6, 
    5, 3, 4, 2, -3, 4, -9, -2, -3, -2, 
    3, -7, -3, 5, 4, 3, 2, -5, -5, 2, 
    -1, -6, -2, -4, 11, 0, 2, -2, -3, -5, 
    2, 7, 0, -2, -6, 2, 6, -2, 0, 5, 
    8, -4, -3, 15, -2, 1, -5, 1, -2, 5, 
    0, 1, 0, -1, -1, -2, 3, -6, 2, -8, 
    -2, -1, 3, 1, -2, -3, 0, 0, -3, -2, 
    1, 0, 3, 3, 0, 7, 3, -5, -2, -2, 
    -2, -3, -3, 1, -1, -5, 3, 0, 7, -5, 
    1, -2, -3, -7, 1, 1, -2, -3, -2, -5, 
    6, -1, -1, 5, 0, 0, 1, 14, -1, -1, 
    -1, -1, -19, 8, 2, -3, 3, 2, 2, 2, 
    -5, 2, -1, 3, 3, 2, -2, -6, 3, 2, 
    3, 1, -5, 3, -1, -1, -4, -3, 3, -10, 
    -3, 4, 3, 3, 2, -3, -2, 2, 0, -3, 
    -2, -4, 7, -2, 3, -2, -2, -2, 3, 4, 
    -3, -3, -4, -1, 5, -2, 0, 2, 5, 2, 
    -3, 7, 4, -1, -3, -2, -2, 4, -3, 1, 
    -1, -4, 0, -3, 2, -1, 0, -1, -2, -3, 
    -1, 6, -3, -3, -1, -2, 3, -3, 0, 6, 
    6, 1, -2, -4, 4, 0, -3, 0, -3, 10, 
    0, -12, 6, 0, 1, -1, -2, -4, 0, -1, 
    -3, 0, -2, 2, 1, -1, 0, -5, -4, -2, 
    3, 0, -6, -2, 4, -13, -1, 6, -2, 2, 
    -4, 2, 2, 1, -2, 1, 2, 4, -4, 3, 
    -22, 1, 2, 2, -2, -12, 2, 1, 4, 3, 
    -3, 5, -74, -2, -5, -2, 2, -9, -2, -2, 
    4, 3, 3, -3, 0, -5, -2, 1, -2, -2, 
    1, -1, -2, 0, -3, -1, 1, 3, -3, -1, 
    -3, -1, -6, -2, 1, 4, 0, 2, 2, 2, 
    -5, -2, -1, 1, 0, 0, -1, 1, 0, -2, 
    -1, -1, 5, -5, 3, -2, -2, -1, 2, 3, 
    -4, -1, -2, -10, 5, -3, 0, 2, 3, 2, 
    -1, 8, 3, -1, -3, -2, -2, 3, 0, -1, 
    -29, -1, -1, 0, 1, -1, -2, -2, -1, 0, 
    1, 2, 1, -2, 1, 0, -9, 0, 0, 1, 
    -3, 2, 0, -5, 3, -3, -2, 1, 1, -2, 
    2, -1, 0, 2, 2, 2, -4, 3, -12, 2, 
    3, 2, -1, 0, 2, 1, 3, 2, -4, 3, 
    -6, -2, -3, -2, 2, -9, -2, 0, 3, 2, 
    2, -3, -3, -1, -4, -1, 0, -1, 2, -4, 
    0, -1, -2, -1, 3, 6, -1, -3, -2, 0, 
    -11, -1, 2, 4, 1, -2, 0, 5, -8, 0, 
    -3, 0, -1, -3, -2, 0, 2, -3, -2, -4, 
    5, -2, 0, -1, -2, -2, 4, 3, -1, -3, 
    -4, -1, 6, -2, -12, 1, 8, 3, -3, 7, 
    4, -5, -2, -3, -1, 4, 0, -67, 0, -1, 
    1, -3, 5, -3, 2, 0, 1, -6, 1, 8, 
    -3, -2, -4, -4, 3, -3, -1, 4, 3, 3, 
    -4, 2, 4, 1, 0, -3, -4, -1, 1, 8, 
    -8, 0, 2, 2, -3, 2, -36, 0, 2, 2, 
    -2, -6, 3, 1, 3, 2, -2, 5, -92, 0, 
    -2, -1, 0, -5, -2, -13, 1, 1, 3, -6, 
    -6, 0, 0, -7, -1, -6, 6, 0, 4, -4, 
    -4, -6, 4, 8, -3, -4, -6, 3, 6, 0, 
    0, 7, 8, -5, -3, 14, -7, 1, -4, 1, 
    -1, 10, -1, 1, -2, -2, -1, -3, 4, -7, 
    4, -11, -2, -1, 4, 1, -3, -3, -2, -1, 
    -6, -3, 0, 0, 1, 3, -1, 3, 5, -12, 
    -2, -2, -4, -5, -2, -6, 1, -6, 5, -1, 
    7, -8, 2, -3, -2, -4, 0, 2, -3, -5, 
    -2, -7, 6, 0, -1, 6, -1, -2, 1, -12, 
    -1, 1, -2, -1, -17, 11, 2, 0, 2, 3, 
    4, 2, -5, 5, -5, 3, 3, 3, -2, -1, 
    3, 2, 3, 2, -5, 4, -1, -5, -6, -4, 
    2, -12, -3, 3, 3, 3, 4, -4, -3, 1, 
    -1, -4, -3, -5, 6, -4, 3, -5, -3, -3, 
    4, 4, -3, -3, -5, -2, 8, -3, -1, 2, 
    8, 3, -3, 13, 5, -2, -4, -3, -3, 4, 
    -3, -5, 1, -4, 0, -5, 3, 0, 1, -1, 
    -3, -3, -1, 7, -2, -3, -2, -2, -1, -2, 
    0, 8, 12, 0, -3, 11, 5, 3, -1, -2, 
    -4, 10, 2, -2, 3, 1, 4, 2, -6, 7, 
    -3, 3, 2, 3, -2, -4, 2, 2, 4, 7, 
    -4, 6, -43, -9, -4, -4, 1, -10, -1, 7, 
    6, -1, 7, -12, 2, -3, 2, 2, 3, 3, 
    -4, 4, -4, 3, 2, 3, -2, -1, 3, 1, 
    3, 1, -4, 4, 3, -5, -4, -3, 3, -10, 
    -3, 2, 5, 3, 2, -3, -1, -13, -1, 1, 
    -2, -3, 2, -2, -1, 0, -3, -2, 3, 4, 
    -1, -1, -3, 0, -5, -1, 0, 4, 3, 3, 
    1, -1, -7, 0, -2, -2, 0, -2, -2, 2, 
    0, -2, -1, -1, 7, -6, 5, -1, -3, -2, 
    2, 4, -3, -2, -2, -18, 5, -5, -1, 2, 
    3, 3, -3, 10, 3, -2, -5, -1, -4, 3, 
    -1, 1, -41, -3, -1, 0, 3, -2, -8, -4, 
    -1, 0, 2, 2, 2, -4, 0, 0, -11, 1, 
    -4, 1, 2, 3, 0, -2, 3, -8, -2, 0, 
    0, -2, 3, -1, 1, 2, 3, 4, -5, 3, 
    -4, 3, 3, 3, -2, -9, 2, 2, 4, 1, 
    -4, 4, 3, 0, -4, -3, 3, -10, -4, 1, 
    4, 3, 2, -3, -4, -2, -5, -2, -1, -2, 
    6, -6, 0, -3, -2, -2, 5, 8, -1, -4, 
    -4, 1, -25, 0, 2, 5, 1, -3, 1, 16, 
    -9, -2, -3, 0, -1, -3, -3, 1, 0, -4, 
    -3, -5, 7, -3, -5, -2, -2, -2, 4, 3, 
    0, -3, -4, -1, 9, -2, -9, 0, 11, 5, 
    -3, 8, 5, -10, -3, -2, -2, 4, 2, 0, 
    1, 3, 3, 3, -4, 4, -11, 3, 3, 3, 
    -3, -2, 2, 2, 3, 1, -5, 4, 2, -2, 
    -4, -2, 3, -10, -2, 0, 3, 3, 2, -4, 
    0, -21, 10, -2, 1, -4, -4, 2, 5, -2, 
    -3, 0, -1, 1, 6, 1, 0, 5, -2, 0, 
    -10, -4, 0, -6, -1, -9, 0, 16, 5, -2, 
    2, -11, 1, 5, -7, 3, 1, 1, -3, 5, 
    -13, 1, 2, 0, -2, -9, 1, 1, 1, -1, 
    -2, 2, -8, 0, -4, -1, 2, -6, -1, -10, 
    0, 3, 2, -4, 2, -2, 1, 3, 3, 2, 
    -2, 4, -7, 3, 2, 2, -3, -1, 2, 2, 
    3, 0, -4, 3, 3, 0, -3, -2, 3, -9, 
    -2, 0, 4, 3, 1, -3, -5, 2, -8, -4, 
    -3, 0, 1, -4, -8, -5, -1, -2, 3, 5, 
    -3, -4, -5, -1, 1, -3, -23, -9, 15, 3, 
    -4, 9, 7, -3, -3, -3, -1, -10, 0, -7, 
    -1, -1, 2, -2, 1, -1, -1, 0, -1, -1, 
    -3, 2, 4, 1, -3, -2, 0, -1, 2, 5, 
    1, 4, 0, 1, -7, -5, -1, -1, -1, -4, 
    2, 0, 2, 3, 3, 3, -5, 3, -3, 3, 
    3, 3, -2, -2, 4, 2, 4, 1, -5, 4, 
    2, 0, -6, -4, 4, -11, -5, 3, 3, 3, 
    3, -2, -4, -4, 2, -6, 5, -3, 9, -10, 
    6, -10, 0, -4, 2, 0, -1, -4, -3, -23, 
    5, 0, 0, 6, 1, -1, 3, -3, -3, 2, 
    -7, 2, -16, 9, 0, -1, 1, -2, 2, -1, 
    6, -10, 4, -2, -1, -2, 2, 0, -1, 0, 
    -2, -9, 5, -1, -1, 2, 3, 1, 0, 2, 
    -3, -1, -2, -2, -8, 4, 1, -19, 8, 0, 
    4, -3, 0, -1, 8, 0, 0, 2, -2, 3, 
    2, 1, 1, -3, -2, 0, -5, -1, -6, -4, 
    3, -8, -3, 13, 0, 0, -3, 0, -2, 1, 
    0, -3, -1, -2, 6, -4, 4, -3, -2, -2, 
    3, 3, -3, -2, -3, -3, 6, -4, -1, 2, 
    5, 2, -2, 11, 5, -1, -3, -1, -3, 4, 
    1, 10, -10, 1, 0, 2, -2, -4, -19, 1, 
    2, 0, -2, -3, 4, 0, 2, -3, -2, -1, 
    -118, 1, -5, 0, 4, -2, -3, -15, -3, 7, 
    0, 2, -2, 1, 0, -3, -1, -2, 5, -7, 
    4, -3, -2, -2, 3, 4, -4, -2, -3, -2, 
    5, -4, -1, 1, 3, 2, -2, 11, 5, -1, 
    -4, -1, -2, 3, -2, -4, -13, -2, -1, 0, 
    0, -2, -4, -1, -1, -1, -3, 4, 1, 0, 
    -4, -1, 4, 0, 4, 4, 1, 2, -1, 8, 
    5, -2, -1, 2, -2, -7, -2, 1, -1, -4, 
    -3, -4, 5, -4, 3, -3, -2, -2, 4, 4, 
    -4, -4, -4, -1, 7, -3, -2, 2, 7, 2, 
    -3, 8, 5, -1, -4, -2, -2, 4, 2, -3, 
    2, 3, 2, 2, -4, 5, -8, 3, 2, 4, 
    -2, -1, 4, 1, 3, 4, -4, 4, -12, -6, 
    -5, -4, 3, -12, -3, 4, 4, 3, 3, -3, 
    2, 0, 1, 2, 2, 3, -5, 3, -6, 2, 
    3, 2, -2, -6, 3, 1, 3, 1, -4, 3, 
    -2, 1, -5, -3, 2, -9, -2, 2, 3, 3, 
    2, -2, 0, 0, 0, 2, 2, -1, -4, 6, 
    -3, 1, 2, 2, -1, -1, 6, 2, 1, 4, 
    -2, 5, -7, -2, -3, -1, 2, -5, 0, 0, 
    4, 1, 3, -8, 1, 4, -4, 1, 1, 1, 
    -3, 2, -3, 3, 2, 1, -1, 2, 1, 1, 
    1, 1, -2, 1, 0, -1, -3, -1, 1, -6, 
    0, -3, 1, 2, 2, -3, 2, 2, -2, 1, 
    2, 3, -4, 3, -18, 2, 3, 2, -2, -11, 
    2, 2, 4, 2, -3, 5, -23, -2, -4, -2, 
    2, -9, -2, -4, 2, 3, 3, -4, -3, 2, 
    -4, -2, -3, 0, 0, -3, -3, -3, -1, -1, 
    1, 4, -2, -3, -3, -1, 0, -2, -10, -6, 
    10, 2, -2, 1, 4, -1, -2, -1, 0, -7, 
    0, -3, -1, 0, 0, 0, 0, -1, -2, 1, 
    -1, -2, -3, 1, 4, 1, -2, -1, 1, -1, 
    2, 4, -2, 3, 0, 0, -7, -3, -1, -1, 
    0, -1, 2, 0, 1, 2, 2, 2, -5, 4, 
    -11, 2, 3, 3, -1, -3, 3, 2, 3, 2, 
    -3, 3, -14, -1, -4, -3, 3, -9, -3, 2, 
    3, 3, 3, -3, -3, -1, 0, -5, 3, -2, 
    7, -7, 2, -6, -1, -5, 2, -1, -1, -3, 
    -2, -15, 3, -2, -1, 4, -1, 0, 2, -1, 
    -2, 0, -4, 1, -11, 6, 0, 0, 0, -2, 
    1, -1, 4, -8, 2, -1, -1, -1, 1, 0, 
    -2, -1, -1, -6, 4, -2, -1, 2, 1, 1, 
    0, 6, 0, -1, -2, -2, -6, 4, 2, 5, 
    2, 3, 2, 3, -4, 7, 3, 4, 4, 3, 
    -1, -9, 6, 2, 4, 6, -2, 7, -5, -2, 
    -4, -2, 2, -8, -3, 3, 4, 3, 7, -7, 
    -1, 1, 0, -2, -1, -2, 6, -3, 3, -2, 
    -2, -2, 2, 3, -3, -2, -2, -2, 5, -3, 
    -1, 1, 4, 1, -2, 9, 4, -1, -3, -2, 
    -2, 3, 2, 3, -5, 2, 1, 2, -2, 2, 
    1, 1, 1, 0, -1, -4, 1, 1, 1, 0, 
    -1, 2, -1, 0, -2, -1, 2, -3, -1, -3, 
    0, 1, 1, -1, -2, 1, -1, -2, -1, -2, 
    6, -4, 4, -2, -2, -2, 3, 4, -3, -2, 
    -3, -1, 5, -4, -1, 1, 3, 1, -3, 8, 
    4, -1, -3, -2, -2, 3, -1, -2, -11, -1, 
    -1, 0, -1, -2, -2, -1, 0, -1, -3, 3, 
    2, -1, -2, 0, 2, -1, 6, 3, -2, 1, 
    0, 5, 3, 0, 0, 2, -1, -6, -2, 1, 
    -1, -2, -2, -3, 6, -2, 2, -1, -2, -2, 
    3, 4, -3, -3, -4, -1, 4, -2, -1, 1, 
    5, 1, -3, 11, 4, -1, -3, -1, -2, 4, 
    2, -2, 2, 2, 2, 2, -4, 2, -2, 2, 
    3, 2, -2, -3, 3, 1, 3, 1, -5, 2, 
    1, -1, -5, -3, 3, -9, -3, 3, 3, 3, 
    2, -2, 1, 0, 1, 2, 2, 2, -5, 3, 
    -4, 3, 3, 2, -1, -3, 3, 2, 2, 2, 
    -4, 4, -1, 0, -5, -3, 2, -10, -3, 2, 
    3, 3, 2, -2, 1, 5, -4, 1, 1, 2, 
    -2, 3, -2, 0, 1, 1, -1, -6, 3, 1, 
    3, 3, -1, 3, -1, -2, -2, 0, 1, -1, 
    -1, -4, 2, 2, 3, -3, 2, 1, 0, 2, 
    1, 2, -4, 3, 1, 3, 2, 2, -1, -3, 
    1, 2, 1, 3, -3, 5, 2, 0, -4, -2, 
    1, -9, -2, 2, 3, 2, 3, -3, 2, 1, 
    -1, 1, 1, 2, -3, 4, -5, 3, 3, 3, 
    -1, 0, 3, 1, 2, 2, -3, 4, 2, -1, 
    -5, -3, 2, -10, -2, -1, 3, 3, 3, -3, 
    -2, 2, -7, -1, -3, 0, 0, -2, -4, -2, 
    -1, -1, 1, 3, 0, -3, -2, -1, 0, -2, 
    -8, -6, 10, 2, -2, 4, 4, 0, -2, -1, 
    0, -8, -1, -3, -1, 0, 0, 0, 0, -1, 
    -1, 1, 0, -1, -4, 1, 3, 0, -2, -2, 
    2, -2, 2, 4, -1, 3, 0, -4, -5, -4, 
    -1, -1, 1, -2, 2, -2, 1, 2, 2, 2, 
    -4, 3, -4, 2, 2, 2, -2, -1, 3, 1, 
    3, 0, -3, 2, 0, -1, -4, -2, 3, -8, 
    -2, 2, 4, 3, 2, -2, -5, 2, -1, -7, 
    1, -1, 8, -15, 1, -6, -1, -6, 1, 1, 
    -2, -3, -3, -16, 5, -3, -1, 5, -1, -1, 
    0, 3, -1, -1, -6, -2, -13, 8, -1, 1, 
    -1, -3, 0, -1, 4, -9, 2, -2, -2, -2, 
    2, 2, -2, -1, -1, -7, 4, -3, -1, 2, 
    0, 1, 0, 3, -1, -2, -2, -2, -6, 4, 
    0, 3, -3, 0, 1, 0, 0, 0, -1, 0, 
    1, 1, -2, 1, 4, 1, 0, -2, -1, 0, 
    -6, 0, -1, -1, 2, -3, -1, -4, 0, 2, 
    -1, 1, -1, 2, -1, -3, -2, -2, 6, -3, 
    3, -2, -2, -2, 2, 4, -3, -2, -2, -2, 
    5, -4, 0, 2, 4, 1, -2, 10, 4, -1, 
    -3, -2, -3, 3, 2, 0, -1, 2, 2, 2, 
    -5, 5, 0, 3, 2, 1, -1, -3, 1, 2, 
    1, 6, -3, 6, -14, -2, -2, -1, 0, -10, 
    0, 2, 5, -1, 4, -11, -2, 2, 0, -2, 
    -1, -3, 5, -5, 3, -2, -2, -2, 3, 4, 
    -3, -2, -2, -1, 5, -3, 0, 2, 3, 1, 
    -2, 11, 4, -1, -3, -2, -2, 3, -1, -1, 
    -13, -1, -1, -1, 0, -1, -2, -1, 1, 0, 
    -3, 3, 3, -1, -2, 0, 2, -1, 8, 3, 
    -3, 2, 0, 4, 3, 0, -1, 2, -1, -5, 
    -2, 2, -1, -3, -3, -4, 6, -2, 2, -1, 
    -2, -2, 3, 4, -4, -3, -5, -1, 6, -2, 
    0, 2, 5, 1, -3, 9, 4, -1, -3, -1, 
    -2, 4, 1, -2, 2, 2, 3, 3, -4, 2, 
    -1, 2, 3, 1, -2, -1, 3, 1, 3, -1, 
    -4, 2, 1, 0, -5, -3, 3, -8, -3, 2, 
    2, 3, 1, -2, 3, -5, 3, 2, 3, 2, 
    -5, 4, -1, 3, 3, 4, -2, -3, 3, 2, 
    3, 2, -4, 4, 2, -2, -5, -4, 3, -12, 
    -4, 3, 5, 3, 3, -2, 1, 10, -10, 0, 
    0, 2, 0, -2, -12, 1, 2, 1, -2, -2, 
    1, 1, 1, -5, 0, 1, -52, 2, -4, 0, 
    3, -2, -4, -16, -3, 5, -1, 0, 3, -15, 
    10, 0, 3, 2, -5, -2, 7, 1, 0, 1, 
    -1, 2, 2, 1, 1, 2, -4, 1, -1, 1, 
    -1, -5, 3, -10, -3, 13, 4, 1, 0, 0, 
    2, -6, 6, 2, 3, 4, -4, 2, 5, 4, 
    3, 3, -1, -3, 3, 1, 2, 1, -5, 2, 
    0, 0, -4, -6, 3, -11, -4, 10, 4, 4, 
    2, 0, -4, 4, -12, -3, -4, 0, -1, -3, 
    -7, -4, -1, -1, 2, 3, -1, -4, -3, -1, 
    0, -2, -13, -10, 14, 3, -3, 4, 6, -3, 
    -5, -1, 0, -11, -1, -6, -1, 0, 1, -1, 
    -2, -1, 0, 1, 0, 0, -3, 2, 3, 2, 
    -1, -3, 0, -1, 1, 5, -2, 4, 0, 2, 
    -7, -7, -1, 0, 0, -4, 2, -1, 0, 3, 
    3, 3, -5, 4, -8, 3, 3, 3, -3, -8, 
    2, 2, 4, 2, -4, 5, -4, -3, -5, -3, 
    2, -10, -2, -1, 4, 3, 3, -3, -7, -3, 
    1, -10, 2, -1, 8, -39, 3, -9, -4, -10, 
    1, 2, -2, -5, -5, -23, 6, -3, -1, 7, 
    0, 0, -1, 2, -4, 2, -6, -1, -32, 10, 
    -1, 1, 0, -3, 1, -2, 6, -12, 3, -3, 
    -2, -3, 2, 3, -3, 0, -2, -11, 6, -3, 
    -1, 4, 0, 2, -1, 6, -2, -1, -4, -2, 
    -10, 5, 1, 7, -9, 0, -1, 2, -3, 3, 
    -54, 0, 2, 2, -2, -5, 3, 1, 1, 3, 
    -1, 4, -93, -1, -2, -1, 2, -5, -1, -12, 
    2, 3, 3, -3, -2, 2, 0, -3, -2, -2, 
    7, -4, 4, -3, -3, -2, 3, 4, -4, -2, 
    -3, -3, 5, -5, -1, 2, 4, 2, -2, 10, 
    5, -1, -4, -2, -4, 4, 2, -17, 14, 0, 
    4, 0, -5, 3, 5, 1, 0, 0, -2, 2, 
    -1, 1, 2, 1, -3, 1, -6, 0, 3, -5, 
    1, -17, 0, 16, 3, -4, -1, -17, -3, 2, 
    -1, -3, -2, -2, 7, -7, 3, -3, -2, -2, 
    3, 4, -4, -2, -3, -2, 6, -5, -1, 2, 
    3, 2, -3, 11, 5, -1, -3, -1, -2, 3, 
    -2, -1, -17, -1, -2, -1, 0, -2, -5, -2, 
    0, -1, -5, 3, 2, -1, -2, -1, 3, -1, 
    5, 4, 0, 2, 0, 8, 5, -2, -2, 3, 
    -1, -8, -2, 1, 0, -4, -3, -5, 8, -5, 
    2, -2, -2, -3, 4, 5, -3, -4, -5, -1, 
    7, -2, -1, 1, 7, 1, -3, 11, 5, -1, 
    -3, -2, -2, 4, 3, 2, -2, 3, 2, 3, 
    -5, 4, -13, 3, 3, 3, -2, -7, 2, 2, 
    3, 2, -4, 6, -101, 1, -6, -3, 3, -11, 
    -3, -3, 4, 3, 4, -5, 
};
const TfArray<1, int> tensor_dimension4 = { 1, { 4096 } };
const ALIGN(8) int16_t tensor_data5[64] = { 
    18784, 18784, 18784, 18784, 18784, 18784, 18784, 18784, 18784, 18784, 
    18784, 18784, 18784, 18784, 18784, 18784, -7150, -11771, -1543, -19121, 
    -4142, -10342, -6833, -15731, -1241, -1360, -11461, -14890, -12051, -1463, 
    -12218, -17265, 18784, 18784, 18784, 18784, 18784, 18784, 18784, 18784, 
    18784, 18784, 18784, 18784, 18784, 18784, 18784, 18784, -10210, -1453, 
    -6290, -1745, -15516, -927, -12529, -7856, -22264, -2208, -7412, -16512, 
    -2655, -3330, -9532, -1109, 
};
const TfArray<1, int> tensor_dimension5 = { 1, { 64 } };
const ALIGN(8) int8_t tensor_data6[512] = { 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, -75, -110, 67, -104, 
    -66, -111, 64, 77, -63, -68, 54, -93, -88, -127, 
    67, -80, 68, -81, -103, -70, 77, -62, 60, -85, 
    -111, 65, -115, -84, 69, 71, 72, 65, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 
};
const TfArray<1, int> tensor_dimension6 = { 1, { 512 } };
const ALIGN(8) int16_t tensor_data7[20] = { 
    22512, 0, 0, 0, -11082, 7039, 7039, 7039, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};
const TfArray<1, int> tensor_dimension7 = { 1, { 20 } };
const ALIGN(8) int32_t tensor_data8[2] = { 
    1, 1, 
};
const TfArray<1, int> tensor_dimension8 = { 1, { 2 } };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,1,4,64 } };
const TfArray<1, float> quant9_scale = { 1, { 0.32848778367042542, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int8_t tensor_data10[32*1*1*64] = { 
  /* [0][0][][] */ 15,16,-13,5,16,-9,4,-10,1,29,18,47,-6,8,-5,8,5,-20,-3,-9,-8,15,0,-13,7,-8,-3,8,11,-33,17,58,18,0,-1,-4,-123,-25,-9,4,23,-8,8,0,38,7,5,-6,-4,-127,1,-31,-21,35,4,-6,15,-13,-9,-21,-6,9,-8,-9, 
  /* [1][0][][] */ -66,22,-13,-21,-1,76,72,4,16,72,11,-18,-30,7,100,3,1,-44,-12,44,-34,10,-1,22,16,-2,10,32,-73,3,-21,-1,127,21,14,52,87,-15,4,32,73,13,20,-25,3,21,43,0,27,2,-39,-3,4,-101,48,-18,28,34,18,41,-19,15,13,22, 
  /* [2][0][][] */ -52,10,-17,-20,18,10,18,-4,-19,39,5,-49,-18,-13,19,-5,-8,-77,1,19,127,2,-1,-9,5,5,-7,-8,-37,-51,-5,-17,21,-8,8,-28,-6,-68,-1,-41,-16,-10,-6,-3,54,-3,1,5,2,4,2,-1,-10,-38,6,10,5,0,27,-2,-9,6,3,18, 
  /* [3][0][][] */ -127,-110,-17,8,-79,79,25,67,2,-29,-13,34,-8,-17,16,6,31,93,16,-15,-9,-1,-19,1,7,6,-8,9,1,-33,8,104,-24,12,56,-21,-49,-15,-14,8,48,2,-13,-9,-22,84,15,-1,-2,83,-18,26,-20,2,-3,-10,-21,18,-39,2,18,-13,6,22, 
  /* [4][0][][] */ 9,-4,-1,-5,2,1,8,8,-3,-6,-2,2,-10,-1,-22,1,12,5,-4,6,-6,4,0,1,1,-3,-16,0,-6,-127,0,-2,4,1,-29,-5,8,-12,7,-10,12,5,-1,-2,-5,2,-1,-3,-12,10,-7,5,-3,15,3,-3,4,0,9,-15,3,-4,-5,-1, 
  /* [5][0][][] */ 32,38,1,-7,-28,34,25,20,-16,127,-4,-18,88,1,25,2,25,11,-25,-76,-2,-19,-19,-11,-29,-7,-10,-8,-17,4,-14,20,-92,8,-29,-71,6,-1,-21,-6,-15,23,-1,15,-10,18,8,7,-8,-47,-125,62,45,-35,-34,-22,28,-7,35,31,-26,-18,-2,-6, 
  /* [6][0][][] */ 0,0,-3,5,-1,3,-13,25,-4,-5,-2,1,5,3,4,2,3,-4,2,3,-1,-6,4,-2,3,2,-2,3,-4,8,17,-5,-3,-5,-2,-8,-127,-6,-15,1,5,-7,-2,2,0,3,6,-2,0,0,7,4,-5,2,-11,1,16,-1,2,-1,-4,1,-5,2, 
  /* [7][0][][] */ -30,-86,3,-6,4,-11,45,-3,13,8,127,4,-7,-14,47,13,8,-33,2,19,1,-5,24,-14,-2,9,-29,-2,-9,-30,10,7,38,-3,-30,-42,59,24,-14,-8,-38,24,-17,23,19,-33,-5,3,-20,-2,-3,26,5,6,24,-19,-13,17,-42,-18,12,1,-21,-19, 
  /* [8][0][][] */ 10,-20,5,-4,4,-32,-8,-3,-1,-6,-6,1,3,-5,-10,0,4,2,2,-13,-1,-8,-8,3,-8,-4,4,2,0,-5,0,-2,-127,-5,-5,-1,-8,14,-1,8,-56,0,-6,-1,-6,-6,1,-3,2,-4,5,-10,0,6,-11,2,-17,-5,-8,-11,0,-2,-1,-2, 
  /* [9][0][][] */ -20,-11,-17,23,-82,33,-6,-14,-20,-56,-6,54,-29,-17,-1,-10,37,-32,-17,120,0,5,-27,-13,-20,17,13,-8,79,-20,10,-58,-25,24,-16,21,26,1,43,36,-2,4,62,-17,19,-24,-6,-2,23,-18,-26,-39,-44,-11,11,0,3,8,127,-54,15,-10,-7,14, 
  /* [10][0][][] */ 1,48,-4,5,-1,4,21,7,9,39,-127,-29,1,-13,38,18,-23,-60,12,-48,-23,-20,-62,-1,-32,8,1,-5,-46,-77,26,53,43,-23,-11,-9,18,29,-24,1,-24,18,11,15,10,-50,-5,39,-4,61,3,-56,-23,35,-7,-13,44,-12,-3,-58,6,-8,19,18, 
  /* [11][0][][] */ 7,-1,0,2,-2,-15,-127,2,-3,7,-4,-2,0,1,4,3,1,-5,1,0,2,1,3,1,-4,0,-84,-3,-5,-2,1,4,-3,0,-9,0,3,-7,0,-52,-4,2,6,-2,1,16,-1,-6,-18,3,3,-3,3,2,-4,-2,-2,1,-4,-1,-2,-2,-7,2, 
  /* [12][0][][] */ -7,-17,-8,1,-33,29,12,-16,-4,-5,-3,53,7,0,6,-36,-127,-1,-4,-12,10,31,12,-6,6,5,-1,-4,4,23,-10,-37,5,-3,12,-22,62,2,-49,8,8,-70,5,2,-13,3,-5,5,10,-11,28,31,19,8,4,0,22,-3,-14,35,0,-1,20,8, 
  /* [13][0][][] */ -33,34,5,1,-63,-35,9,-20,-14,-25,10,-20,15,-10,16,-36,-58,2,3,-7,2,-127,-13,9,5,-13,4,-13,-10,8,-37,-7,-2,-13,14,-35,-16,-14,-38,-5,-16,-11,1,-1,-78,17,-8,-13,2,-9,-73,14,3,-18,14,-15,-1,-16,7,-1,-13,-1,5,-1, 
  /* [14][0][][] */ -6,-12,5,0,-37,47,1,-16,-4,-3,1,15,-10,-3,1,8,-5,6,-1,-15,4,-4,4,1,6,4,4,4,-15,13,9,-4,-127,-1,-25,8,-31,11,-2,-4,-4,-4,-4,7,-22,5,-18,-8,-3,-11,9,-5,3,-22,-3,3,5,1,1,1,-6,-4,1,3, 
  /* [15][0][][] */ 5,0,-1,2,-127,13,2,3,2,2,-2,6,-29,0,-1,-7,-2,12,-1,2,-1,7,3,-1,-2,3,0,1,-10,-4,-6,-3,9,-3,-3,2,-4,-6,1,2,-15,3,3,2,19,-1,0,-2,4,-5,15,-1,2,3,2,1,4,1,-3,1,-1,1,8,0, 
  /* [16][0][][] */ -1,84,17,20,-39,-104,-11,-18,6,-69,-2,-22,73,11,19,-18,-53,-3,8,11,-1,-30,2,19,16,-14,2,-3,-25,26,46,-1,21,-10,-14,-127,18,55,20,4,83,-40,-8,-2,-18,3,-9,-7,9,4,93,-80,-26,-14,11,-14,-6,5,20,7,-12,4,3,21, 
  /* [17][0][][] */ -15,127,-14,-6,32,-7,21,1,-19,-26,18,-54,-17,-3,2,-14,30,-24,-11,-37,-9,-17,0,18,-31,5,-25,17,-66,-3,17,-40,-64,-6,28,-29,37,-7,9,2,41,0,124,17,31,61,1,-9,-8,0,-10,9,-30,-20,7,15,20,-22,23,-9,-22,-4,0,3, 
  /* [18][0][][] */ 27,29,0,-6,12,-5,-11,7,5,6,3,-5,-1,4,-2,2,5,9,-3,4,1,-3,-10,5,-1,-6,-2,-5,-3,3,-1,18,-15,-5,-9,9,-127,19,19,-2,5,19,-5,7,-6,-2,-1,-7,1,12,11,1,5,2,11,0,-4,-2,11,14,0,0,12,-2, 
  /* [19][0][][] */ 0,0,-1,-2,-2,-3,-5,-2,0,1,3,0,1,0,2,0,-1,4,-2,1,0,1,-1,1,1,1,-127,1,0,1,0,-1,-2,0,10,-2,1,-3,-6,-38,-2,-1,-2,2,-2,1,0,-2,3,0,-2,-3,-1,3,0,0,1,2,3,2,3,-2,-4,-2, 
  /* [20][0][][] */ 15,-75,1,0,-6,-60,-5,-6,0,-12,-19,-85,-8,1,-80,-15,-15,-45,2,-53,9,-21,-15,2,-31,-1,2,-1,-17,-21,-6,-9,-127,2,-15,-8,-64,-99,-9,-4,-71,-6,-61,1,-9,-18,-89,-17,-6,-9,9,2,-51,18,-41,2,-14,-1,-19,-21,-2,2,-11,-1, 
  /* [21][0][][] */ -10,-51,4,10,-19,-6,-16,-13,9,44,-15,10,0,1,27,-32,2,11,-1,-2,-5,26,-72,-4,-20,1,6,-7,-3,7,-23,-32,-5,3,-7,-88,32,44,-29,10,61,-28,-3,0,-127,-31,25,-85,0,-2,28,-97,-9,10,-44,1,-41,13,-58,-47,6,-1,-63,5, 
  /* [22][0][][] */ 7,-11,1,0,-12,11,9,-6,7,10,0,15,13,2,-7,-24,-14,-21,3,2,-5,7,-50,6,0,-5,-3,-4,-3,-6,-26,-8,8,-4,-7,-4,-127,-125,10,3,12,-14,5,-2,26,2,10,-18,-3,-5,-8,5,10,24,9,-4,-3,-5,2,7,-3,1,-10,-3, 
  /* [23][0][][] */ -7,-26,-1,14,10,-7,-28,23,-3,6,9,-37,-6,5,2,12,-2,-14,-9,2,-14,-40,45,1,-1,-12,12,-7,-25,27,-16,9,-34,-6,14,-52,98,84,-13,13,-8,-4,5,14,-19,-8,23,42,8,14,-15,26,42,-48,86,-15,-6,5,-9,127,-8,-4,95,3, 
  /* [24][0][][] */ 48,21,-7,6,76,35,12,-2,-4,-87,-2,-3,-127,-13,60,14,47,24,6,-29,-9,14,-3,6,-4,-13,-1,3,-100,4,2,-37,-19,5,-17,8,55,41,26,1,8,2,-58,-5,14,-4,-17,11,-10,15,-85,3,3,-26,6,15,27,14,26,-11,10,-1,-5,11, 
  /* [25][0][][] */ -7,27,-5,12,-32,11,25,20,19,18,2,13,3,21,7,-8,-22,-24,24,2,28,13,100,-27,8,24,-10,31,-21,-39,27,20,3,-1,-4,-14,14,-19,6,21,-1,11,-6,13,16,21,14,92,9,-3,10,-11,-13,38,127,-14,50,-7,18,47,-9,38,101,-13, 
  /* [26][0][][] */ -24,-40,-4,-4,-127,-30,-1,-35,13,-43,11,-13,-73,0,5,27,71,1,2,1,-3,81,1,10,9,-1,11,3,-37,3,33,-34,-8,-1,-8,25,-51,-68,-20,-9,-42,-10,-1,11,-66,5,-10,6,4,-6,-75,8,4,-30,-32,-2,-13,-12,-22,-3,12,-7,-31,-5, 
  /* [27][0][][] */ 7,-13,7,10,-3,-37,-6,6,1,-31,-1,3,5,3,-91,1,4,27,2,-11,-5,-5,-3,-10,5,5,-5,1,20,18,1,5,-49,1,-1,20,39,10,-3,-13,-28,6,1,0,-26,-9,-127,4,-10,2,2,-12,-5,10,10,8,2,9,-3,22,6,9,15,2, 
  /* [28][0][][] */ 60,-27,-7,17,-14,52,-68,33,0,-8,6,-14,-127,13,-13,10,3,-37,11,-8,-5,14,0,-14,35,-2,16,-9,-42,0,-25,1,16,-11,-28,-13,35,-98,-18,15,18,33,9,-13,-19,-28,4,15,28,27,-9,-33,-25,-10,8,-12,-14,17,-49,-5,9,-21,-16,8, 
  /* [29][0][][] */ -5,40,9,-7,8,2,7,7,3,-29,6,4,3,-2,20,3,9,-48,3,9,7,-1,8,-12,-23,-2,-23,-8,-37,-20,-4,11,-71,-10,20,9,30,6,-8,-1,22,8,-127,10,56,-6,13,-1,-14,-31,17,30,17,-4,5,-11,-53,-9,13,27,-7,3,-1,-2, 
  /* [30][0][][] */ 4,2,-2,-13,18,1,12,9,4,35,-21,4,-1,6,1,7,12,-3,13,68,-1,-12,7,13,69,-8,-4,5,-14,-6,1,-14,-47,11,4,1,-127,15,13,2,13,1,-33,6,5,4,-5,10,-7,3,-7,-2,-7,-11,12,14,9,-13,-1,-16,-10,3,11,6, 
  /* [31][0][][] */ 15,-28,-3,-5,-12,10,-6,-3,-5,-28,-31,12,-38,0,11,4,-127,1,-1,-15,0,6,-27,-5,-9,4,-1,5,1,-9,7,-9,-18,3,-14,10,23,-7,10,5,10,4,-6,-3,35,-22,-3,-40,0,-14,-9,0,1,3,-19,3,14,0,-15,-44,2,0,-18,-4, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 32,1,1,64 } };
const TfArray<32, float> quant10_scale = { 32, { 0.018287824466824532, 0.0066522345878183842, 0.010071159340441227, 0.0092846928164362907, 0.051891550421714783, 0.010877629742026329, 0.048910222947597504, 0.010594467632472515, 0.051196243613958359, 0.0097670285031199455, 0.013280647806823254, 0.075035624206066132, 0.028833359479904175, 0.013829182833433151, 0.041193243116140366, 0.067325986921787262, 0.012107559479773045, 0.0098092295229434967, 0.03569658100605011, 0.085837423801422119, 0.10225213319063187, 0.018857721239328384, 0.038287363946437836, 0.015304973348975182, 0.015862666070461273, 0.0078799137845635414, 0.019416779279708862, 0.02228495292365551, 0.014911295846104622, 0.019910858944058418, 0.01741139218211174, 0.048154432326555252, } };
const TfArray<32, int> quant10_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int32_t tensor_data11[32] = { 
    -361, -637, -1103, -2200, -64, -1571, -577, -2231, 331, -2027, 
    -979, -216, -293, 1351, -278, -237, -1555, -1570, -941, -133, 
    113, 629, -769, 743, -935, -4825, -440, 297, -1232, -365, 
    -936, -267, 
};
const TfArray<1, int> tensor_dimension11 = { 1, { 32 } };
const TfArray<32, float> quant11_scale = { 32, { 0.0060073267668485641, 0.0021851777564734221, 0.0033082528971135616, 0.0030499082058668137, 0.017045740038156509, 0.0035731685347855091, 0.016066411510109901, 0.0034801531583070755, 0.01681734062731266, 0.0032083494588732719, 0.0043625305406749249, 0.024648286402225494, 0.0094714062288403511, 0.0045427177101373672, 0.013531477190554142, 0.022115765139460564, 0.0039771855808794498, 0.0032222119625657797, 0.011725890450179577, 0.028196545317769051, 0.033588577061891556, 0.0061945309862494469, 0.012576931156218052, 0.0050274967215955257, 0.0052106920629739761, 0.0025884553324431181, 0.0063781747594475746, 0.0073203346692025661, 0.0048981783911585808, 0.0065404740162193775, 0.0057194298133254051, 0.015818143263459206, } };
const TfArray<32, int> quant11_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,4,32 } };
const TfArray<1, float> quant12_scale = { 1, { 0.44939076900482178, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,1,32 } };
const TfArray<1, float> quant13_scale = { 1, { 0.95432043075561523, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,1,1,4 } };
const TfArray<1, float> quant14_scale = { 1, { 0.12445471435785294, } };
const TfArray<1, int> quant14_zero = { 1, { 55 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,1,1,1 } };
const TfArray<1, float> quant15_scale = { 1, { 0.12445471435785294, } };
const TfArray<1, int> quant15_zero = { 1, { 55 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,1 } };
const TfArray<1, float> quant16_scale = { 1, { 0.12445471435785294, } };
const TfArray<1, int> quant16_zero = { 1, { 55 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<2, int> tensor_dimension17 = { 2, { 1,1 } };
const TfArray<1, float> quant17_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
uint8_t ALIGN(4) opdata0[144] = { 109, 112, 0, 40, 96, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 232, 255, 255, 255, 248, 255, 255, 255, 72, 0, 0, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 97, 0, 8, 64, 0, 0, 0, 24, 0, 0, 0, 0, 111, 0, 8, 64, 0, 0, 0, 3, 0, 252, 255, 0, 112, 0, 34, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 48, 48, 0, 1, 36, 20, 115, 0, 107, 0, 116, 0, 7, 72, 6, 119, 63, 52, 12, 9, 7, 1, 7, 79, 1, 125, 70, 23, 64, 0, 20, 4, 20, 20, 40, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 9,10,11 } };
const TfArray<1, int> outputs1 = { 1, { 12 } };
uint8_t ALIGN(4) opdata2[128] = { 109, 112, 0, 8, 128, 0, 0, 0, 128, 0, 0, 0, 0, 97, 0, 24, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 0, 8, 32, 0, 0, 0, 1, 0, 252, 255, 0, 112, 0, 34, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 48, 48, 0, 1, 36, 20, 115, 0, 107, 0, 116, 0, 7, 88, 6, 103, 63, 52, 12, 9, 7, 1, 7, 95, 0, 109, 70, 23, 0, 0, 20, 4, 20, 20, 40, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs2 = { 3, { 12,4,5 } };
const TfArray<1, int> outputs2 = { 1, { 13 } };
uint8_t ALIGN(4) opdata3[144] = { 109, 112, 0, 40, 32, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 0, 97, 0, 8, 4, 0, 0, 0, 32, 0, 0, 0, 0, 111, 0, 8, 4, 0, 0, 0, 3, 0, 255, 255, 0, 112, 0, 34, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 48, 48, 0, 1, 36, 20, 115, 0, 107, 0, 116, 0, 7, 72, 6, 119, 63, 52, 12, 9, 7, 1, 7, 79, 1, 125, 70, 23, 64, 0, 20, 4, 20, 20, 40, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs3 = { 3, { 13,6,7 } };
const TfArray<1, int> outputs3 = { 1, { 14 } };
uint8_t ALIGN(4) opdata4[85] = { 98, 101, 103, 105, 110, 95, 120, 0, 98, 101, 103, 105, 110, 95, 121, 0, 109, 112, 0, 40, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 255, 255, 255, 228, 255, 255, 255, 0, 0, 0, 0, 15, 0, 0, 0, 1, 0, 0, 0, 0, 116, 121, 112, 101, 0, 4, 67, 60, 53, 9, 4, 1, 4, 0, 0, 56, 2, 4, 4, 20, 4, 8, 36, 1,  }; /* custom_initial_data */
const TfArray<1, int> inputs4 = { 1, { 14 } };
const TfArray<1, int> outputs4 = { 1, { 15 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 15,8 } };
const TfArray<1, int> outputs5 = { 1, { 16 } };
uint8_t ALIGN(4) opdata6[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs6 = { 2, { 16,1 } };
const TfArray<1, int> outputs6 = { 1, { 17 } };
TfLiteTensor tflTensors[] = {
  { {(int32_t*)(tensor_arena + 256)},(TfLiteIntArray*)&tensor_dimension0, kTfLiteInt8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0)) }, {quant0.scale->data[0], quant0.zero_point->data[0] },96, kTfLiteArenaRw, false, },
  { {(int32_t*)tensor_data1},(TfLiteIntArray*)&tensor_dimension1, kTfLiteInt8, {kTfLiteNoQuantization, nullptr }, {0,0},256, kTfLiteMmapRo, false, },
  { {(int32_t*)tensor_data2},(TfLiteIntArray*)&tensor_dimension2, kTfLiteInt8, {kTfLiteNoQuantization, nullptr }, {0,0},1664, kTfLiteMmapRo, false, },
  { {(int32_t*)tensor_data3},(TfLiteIntArray*)&tensor_dimension3, kTfLiteInt16, {kTfLiteNoQuantization, nullptr }, {0,0},256, kTfLiteMmapRo, false, },
  { {(int32_t*)tensor_data4},(TfLiteIntArray*)&tensor_dimension4, kTfLiteInt8, {kTfLiteNoQuantization, nullptr }, {0,0},4096, kTfLiteMmapRo, false, },
  { {(int32_t*)tensor_data5},(TfLiteIntArray*)&tensor_dimension5, kTfLiteInt16, {kTfLiteNoQuantization, nullptr }, {0,0},128, kTfLiteMmapRo, false, },
  { {(int32_t*)tensor_data6},(TfLiteIntArray*)&tensor_dimension6, kTfLiteInt8, {kTfLiteNoQuantization, nullptr }, {0,0},512, kTfLiteMmapRo, false, },
  { {(int32_t*)tensor_data7},(TfLiteIntArray*)&tensor_dimension7, kTfLiteInt16, {kTfLiteNoQuantization, nullptr }, {0,0},40, kTfLiteMmapRo, false, },
  { {(int32_t*)tensor_data8},(TfLiteIntArray*)&tensor_dimension8, kTfLiteInt32, {kTfLiteNoQuantization, nullptr }, {0,0},8, kTfLiteMmapRo, false, },
  { {(int32_t*)(tensor_arena + 0)},(TfLiteIntArray*)&tensor_dimension9, kTfLiteInt8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9)) }, {quant9.scale->data[0], quant9.zero_point->data[0] },256, kTfLiteArenaRw, false, },
  { {(int32_t*)tensor_data10},(TfLiteIntArray*)&tensor_dimension10, kTfLiteInt8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10)) }, {quant10.scale->data[0], quant10.zero_point->data[0] },2048, kTfLiteMmapRo, false, },
  { {(int32_t*)tensor_data11},(TfLiteIntArray*)&tensor_dimension11, kTfLiteInt32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11)) }, {quant11.scale->data[0], quant11.zero_point->data[0] },128, kTfLiteMmapRo, false, },
  { {(int32_t*)(tensor_arena + 256)},(TfLiteIntArray*)&tensor_dimension12, kTfLiteInt8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12)) }, {quant12.scale->data[0], quant12.zero_point->data[0] },128, kTfLiteArenaRw, false, },
  { {(int32_t*)(tensor_arena + 0)},(TfLiteIntArray*)&tensor_dimension13, kTfLiteInt8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13)) }, {quant13.scale->data[0], quant13.zero_point->data[0] },32, kTfLiteArenaRw, false, },
  { {(int32_t*)(tensor_arena + 32)},(TfLiteIntArray*)&tensor_dimension14, kTfLiteInt8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14)) }, {quant14.scale->data[0], quant14.zero_point->data[0] },4, kTfLiteArenaRw, false, },
  { {(int32_t*)(tensor_arena + 0)},(TfLiteIntArray*)&tensor_dimension15, kTfLiteInt8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15)) }, {quant15.scale->data[0], quant15.zero_point->data[0] },1, kTfLiteArenaRw, false, },
  { {(int32_t*)(tensor_arena + 16)},(TfLiteIntArray*)&tensor_dimension16, kTfLiteInt8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16)) }, {quant16.scale->data[0], quant16.zero_point->data[0] },1, kTfLiteArenaRw, false, },
  { {(int32_t*)(tensor_arena + 0)},(TfLiteIntArray*)&tensor_dimension17, kTfLiteInt8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17)) }, {quant17.scale->data[0], quant17.zero_point->data[0] },1, kTfLiteArenaRw, false, },
};
TfLiteNode tflNodes[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, (TfLiteIntArray*)&inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&opdata0)), nullptr, 144, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, (TfLiteIntArray*)&inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&opdata1)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, (TfLiteIntArray*)&inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&opdata2)), nullptr, 128, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, (TfLiteIntArray*)&inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&opdata3)), nullptr, 144, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, (TfLiteIntArray*)&inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&opdata4)), nullptr, 85, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, (TfLiteIntArray*)&inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&opdata5)), nullptr, 0, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, (TfLiteIntArray*)&inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&opdata6)), nullptr, 0, },
};
used_operators_e used_ops[] = {
OP_XC_conv2d_v2, OP_CONV_2D, OP_XC_conv2d_v2, OP_XC_conv2d_v2, OP_XC_strided_slice, OP_RESHAPE, OP_XC_lookup, };


// Scratch buffer variables
int scratch_buffer_idx;
const int scratch_buffer_offsets[0] = {  };
tflite::MicroContext mc;

// Xcore context and thread variables
xc_context_config_t xc_config;
// When using USE_DDR_FIX for enabling LPDDR support, only one thread can be used
#ifdef USE_DDR_FIX
static_assert((1 == 1),
             "Only one thread can be used when using USE_DDR_FIX! Please recompile with one thread!");
#endif
constexpr int kStackWordsPerThread = 256;
constexpr int threadsStackSizeInUint64 = 1 * kStackWordsPerThread/2;
// We use uint64_t for xcThreadsStack so that it is aligned to 8 bytes
uint64_t xcThreadsStack[threadsStackSizeInUint64];

// Persistent buffer ptr
// Initialized to the tail end of the tensor arena
uint8_t *persistentBufferPtr;
// Functions to be used as function pointers for TfLiteContext and MicroContext 
static void* AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes) {
  // Align to double word
  bytes = ((bytes + 7) / 8) * 8;
  persistentBufferPtr -= bytes;
  return persistentBufferPtr;
}

static TfLiteEvalTensor *GetEvalTensor(const struct TfLiteContext *context,
                                       int tensor_idx) {
  return (TfLiteEvalTensor*)&tflTensors[tensor_idx];
}

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext *context, size_t bytes,
                                       int *buffer_idx) {
  *buffer_idx = scratch_buffer_idx++;
  return kTfLiteOk;
};

static void *GetScratchBuffer(struct TfLiteContext *context,
                                       int buffer_idx) {
  return tensor_arena + scratch_buffer_offsets[buffer_idx];
}

static TfLiteTensor* AllocateTempInputTensor(const TfLiteNode* node, int index) {
      return &ctx.tensors[node->inputs->data[index]];
}

static TfLiteTensor* AllocateTempOutputTensor(const TfLiteNode* node, int index) {
      return &ctx.tensors[node->outputs->data[index]];
}

static void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
}

static void* external_context() {
  return &xc_config;
}

} // namespace

TfLiteStatus model_init(void *flash_data) {
  // Clear and initialize
  scratch_buffer_idx = 0;
  persistentBufferPtr = tensor_arena + kTensorArenaSize;

  // Set flash data in xcore context config
  xc_config.flash_data = flash_data;

  // Setup microcontext functions
  mc.AllocateTempInputTensor = &AllocateTempInputTensor;
  mc.AllocateTempOutputTensor = &AllocateTempOutputTensor;
  mc.DeallocateTempTfLiteTensor = &DeallocateTempTfLiteTensor;
  mc.external_context = &external_context;

  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  
  // Set microcontext as the context ptr
  ctx.impl_ = (void*)&mc;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 18;
  registrations[OP_XC_conv2d_v2] = *(tflite::ops::micro::xcore::Register_XC_conv2d_v2());
  registrations[OP_CONV_2D] = tflite::Register_CONV_2D();
  registrations[OP_XC_strided_slice] = *(tflite::ops::micro::xcore::Register_XC_strided_slice());
  registrations[OP_RESHAPE] = tflite::ops::micro::Register_RESHAPE();
  registrations[OP_XC_lookup] = *(tflite::ops::micro::xcore::Register_XC_lookup());


#ifdef TFLMC_XCORE_PROFILE
  printf("\nProfiling init()...");
  memset(op_times, 0, sizeof(op_times));
  op_times_summed = 0;
#endif

  for(size_t i = 0; i < 7; ++i) {
    if (registrations[used_ops[i]].init) {

#ifdef TFLMC_XCORE_PROFILE
#ifdef __xcore__
      asm volatile ("gettime %0" : "=r" (time_t0));
#endif
#endif

      tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, tflNodes[i].custom_initial_data_size);

#ifdef TFLMC_XCORE_PROFILE
#ifdef __xcore__
      asm volatile ("gettime %0" : "=r" (time_t1));
#endif
      op_times[used_ops[i]] += time_t1 - time_t0;
      printf("\nnode %-5d %-32s %-12d", i, op_strs[used_ops[i]], time_t1 - time_t0);
#endif

    }
  }

#ifdef TFLMC_XCORE_PROFILE
    printf("\n\nCumulative times for init()...");
    for(int i=0; i<OP_LAST; i++){
      op_times_summed += op_times[i];
      printf("\n%-32s %-12d %.2fms", op_strs[i], op_times[i], op_times[i]/100000.0);
    }
    printf("\n\nTotal time for init() - %-10lld %.2fms\n\n", op_times_summed, op_times_summed/100000.0);
  printf("\n");
  printf("\nProfiling prepare()...");
  memset(op_times, 0, sizeof(op_times));
  op_times_summed = 0;
#endif

  for(size_t i = 0; i < 7; ++i) {
    if (registrations[used_ops[i]].prepare) {

#ifdef TFLMC_XCORE_PROFILE
#ifdef __xcore__
      asm volatile ("gettime %0" : "=r" (time_t0));
#endif
#endif

      TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);

#ifdef TFLMC_XCORE_PROFILE
#ifdef __xcore__
      asm volatile ("gettime %0" : "=r" (time_t1));
#endif
      op_times[used_ops[i]] += time_t1 - time_t0;
      printf("\nnode %-5d %-32s %-12d", i, op_strs[used_ops[i]], time_t1 - time_t0);
#endif

      if (status != kTfLiteOk) {
        return status;
      }
    }
  }

#ifdef TFLMC_XCORE_PROFILE
printf("\n\nCumulative times for prepare()...");
    for(int i=0; i<OP_LAST; i++){
      op_times_summed += op_times[i];
      printf("\n%-32s %-12d %.2fms", op_strs[i], op_times[i], op_times[i]/100000.0);
    }
    printf("\n\nTotal time for prepare() - %-10lld %.2fms\n\n", op_times_summed, op_times_summed/100000.0);
  printf("\n");
#endif

  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  17, 
};
TfLiteTensor* model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

#ifdef TFLMC_PRINT_TENSORS
unsigned char checksum(char *data, unsigned int length)
{
  static char sum;
  static char * end;
  sum = 0;
  end = data + length;

  do
  {
      sum -= *data++;
  } while (data != end);
  return sum;
}
#endif

TfLiteStatus model_invoke() {
  xc_config.thread_info.nstackwords = kStackWordsPerThread;
  xc_config.thread_info.stacks = &xcThreadsStack[threadsStackSizeInUint64 - 1];
  thread_init_1(&xc_config.thread_info);

#ifdef TFLMC_XCORE_PROFILE
  printf("\nProfiling invoke()...");
  memset(op_times, 0, sizeof(op_times));
  memset(op_counts, 0, sizeof(op_counts));
  op_times_summed = 0;
#endif

#ifdef TFLMC_PRINT_TENSORS
printf("[\n");
#endif

  for(size_t i = 0; i < 7; ++i) {

#ifdef TFLMC_PRINT_INPUT_TENSORS
    // print every input tensor
    printf("\nnode in %d", i);
    for (int j=0; j<tflNodes[i].inputs->size; j++){
      // -1 such as in case of no bias tensor for conv
      if (tflNodes[i].inputs->data[j] != -1) {
        printf("\ntensor %d, input %d, %d bytes, checksum %d\n", tflNodes[i].inputs->data[j], j, tflTensors[tflNodes[i].inputs->data[j]].bytes, checksum(tflTensors[tflNodes[i].inputs->data[j]].data.raw, tflTensors[tflNodes[i].inputs->data[j]].bytes));
        for(int k=0; k<tflTensors[tflNodes[i].inputs->data[j]].bytes; k++){
          printf("%d,", (int8_t)tflTensors[tflNodes[i].inputs->data[j]].data.raw[k]);
        }
      }
    }
    printf("\n");
#endif

#ifdef TFLMC_XCORE_PROFILE
#ifdef __xcore__
  asm volatile ("gettime %0" : "=r" (time_t0));
#endif
#endif

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#ifdef TFLMC_XCORE_PROFILE
#ifdef __xcore__
  asm volatile ("gettime %0" : "=r" (time_t1));
#endif
  op_times[used_ops[i]] += time_t1 - time_t0;
  op_counts[used_ops[i]] += 1;
  printf("\nnode %-5d %-32s %-12d", i, op_strs[used_ops[i]], time_t1 - time_t0);
#endif

#ifdef TFLMC_PRINT_TENSORS
    // print every output tensor
    printf("\n{\"node\" : \"%d\", \"op\" : \"%s\", \"data\" : [", i, op_strs[used_ops[i]]);
    for (int j=0; j<tflNodes[i].outputs->size; j++){
      printf("\n{\"tensor\" : %d, \"output\" : %d, \"bytes\" : %d, \"checksum\" : %d,\n", tflNodes[i].outputs->data[j], j, tflTensors[tflNodes[i].outputs->data[j]].bytes, checksum(tflTensors[tflNodes[i].outputs->data[j]].data.raw, tflTensors[tflNodes[i].outputs->data[j]].bytes));
      printf("\"val\" : [");
      for(int k=0; k<tflTensors[tflNodes[i].outputs->data[j]].bytes; k++){
        printf("%d", (int8_t)tflTensors[tflNodes[i].outputs->data[j]].data.raw[k]);
        if (k < tflTensors[tflNodes[i].outputs->data[j]].bytes-1){
          printf(",");
        }
      }
      if(j<tflNodes[i].outputs->size-1){
        printf("]},\n");
      } else {
        printf("]}]\n");
      }
    }

    if(i<7-1){
      printf("},\n");
    } else {
      printf("}\n");
    }
#endif

    if (status != kTfLiteOk) {
      thread_destroy(&xc_config.thread_info);
      return status;
    }
  }
#ifdef TFLMC_PRINT_TENSORS
printf("\n]");
#endif

  thread_destroy(&xc_config.thread_info);

#ifdef TFLMC_XCORE_PROFILE
  struct convopdata{
    const char * name;
    size_t thread_count;
    int evalStartTime;
    int threadsStartTime;
    int threadsDoneTime;
  };
  int conv_times1 = 0, conv_times2 = 0;
  printf("\n\nConv()...");
  for(size_t i = 0; i < 7; ++i) {
    if(used_ops[i] == OP_XC_conv2d_v2) {
      auto *op_data = reinterpret_cast<convopdata *>(tflNodes[i].user_data);
      conv_times1 += op_data->threadsStartTime - op_data->evalStartTime;
      conv_times2 += op_data->threadsDoneTime - op_data->threadsStartTime;
      printf("\nnode %-5d %-25s %-25s %-6d %-6d %-12d", i, op_strs[used_ops[i]], op_data->name, op_data->thread_count, op_data->threadsStartTime - op_data->evalStartTime, op_data->threadsDoneTime - op_data->threadsStartTime);
    }
  }
  printf("\nSummed - %-10d %-10d", conv_times1, conv_times2);

  printf("\n\nCumulative times for invoke()...");
  for(int i=0; i<OP_LAST; i++){
    op_times_summed += op_times[i];
    printf("\n%-5d %-32s %-12d %.2fms", op_counts[i], op_strs[i], op_times[i], op_times[i]/100000.0);
  }
  printf("\n\nTotal time for invoke() - %-10lld %.2fms\n\n", op_times_summed, op_times_summed/100000.0);
#endif

  return kTfLiteOk;
}
