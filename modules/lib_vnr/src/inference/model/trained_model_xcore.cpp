// This file is generated. Do not edit.
// Generated on: 31.10.2022 13:09:23


#include "../../api/xcore_config.h"
#include "tensorflow/lite/c/builtin_op_data.h"
#include "tensorflow/lite/c/common.h"
#include "tensorflow/lite/micro/kernels/conv.h"
#include "tensorflow/lite/micro/kernels/fully_connected.h"
#include "tensorflow/lite/micro/kernels/micro_ops.h"
#include "tensorflow/lite/micro/kernels/reduce.h"
#include "tensorflow/lite/micro/kernels/softmax.h"
#include "tensorflow/lite/micro/micro_context.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace tflite {
namespace ops {
namespace micro {
namespace xcore {
extern TfLiteRegistration *Register_XC_conv2d_v2(void);
extern TfLiteRegistration *Register_XC_lookup(void);
} // namespace xcore
}  // namespace micro
}  // namespace ops
}  // namespace tflite

namespace {

constexpr int kTensorArenaSize = 4136;
uint8_t tensor_arena[kTensorArenaSize] ALIGN(8);
template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_UNPACK, OP_XC_conv2d_v2, OP_ADD, OP_SPLIT, OP_XC_lookup, OP_MUL, OP_CONV_2D,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
  int custom_initial_data_size;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[103];
TfLiteEvalTensor evalTensors[103];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[61];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,32 } };
const TfArray<1, float> quant0_scale = { 1, { 0.00784311443567276, } };
const TfArray<1, int> quant0_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const TfArray<4, int> tensor_dimension1 = { 4, { 1,1,4,24 } };
const TfArray<1, float> quant1_scale = { 1, { 0.090375594794750214, } };
const TfArray<1, int> quant1_zero = { 1, { 127 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const TfArray<2, int> tensor_dimension2 = { 2, { 1,32 } };
const TfArray<1, float> quant2_scale = { 1, { 11.764293670654297, } };
const TfArray<1, int> quant2_zero = { 1, { 93 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[3] = { 
    4, 1, 24, 
};
const TfArray<1, int> tensor_dimension3 = { 1, { 3 } };
const int32_t tensor_data4[1] = { 1 };
const int tensor_dimension4 = 0; /* empty TfLiteIntArray */
const ALIGN(8) int8_t tensor_data5[256] = { 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -127, -127, -126, -126, -124, -123, 
    -120, -116, -109, -101, -88, -72, -51, -27, 0, 27, 
    51, 72, 88, 101, 109, 116, 120, 123, 124, 126, 
    126, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 
};
const TfArray<1, int> tensor_dimension5 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data6[256] = { 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -127, -126, -124, -120, -109, -88, -51, 0, 51, 
    88, 109, 120, 124, 126, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 
};
const TfArray<1, int> tensor_dimension6 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data7[256] = { 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, 0, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, 
};
const TfArray<1, int> tensor_dimension7 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data8[256] = { 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -127, -127, -127, -126, -125, -123, 
    -120, -116, -110, -101, -89, -73, -52, -27, 0, 27, 
    52, 73, 89, 101, 110, 116, 120, 123, 125, 126, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 
};
const TfArray<1, int> tensor_dimension8 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data9[256] = { 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -127, -127, -125, -120, -110, -89, -52, 0, 52, 
    89, 110, 120, 125, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 
};
const TfArray<1, int> tensor_dimension9 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data10[256] = { 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -127, -127, -126, -126, -124, -123, 
    -120, -116, -110, -101, -89, -72, -52, -27, 0, 27, 
    52, 72, 89, 101, 110, 116, 120, 123, 124, 126, 
    126, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 
};
const TfArray<1, int> tensor_dimension10 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data11[256] = { 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -127, -126, -124, -120, -110, -89, -52, 0, 52, 
    89, 110, 120, 124, 126, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 
};
const TfArray<1, int> tensor_dimension11 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data12[3200] = { 
    41, 21, 32, 6, 11, 42, -11, -17, -5, 14, 
    37, 20, -36, -4, -19, -27, -34, 53, 41, 25, 
    14, 37, -59, -41, -53, 9, 13, -44, 29, 31, 
    -25, -35, -21, -31, -24, 53, 44, 21, 39, 20, 
    -48, 36, -7, 56, -21, -25, -16, 37, -36, 30, 
    -30, -38, -7, -45, -20, 42, -14, 25, 6, 57, 
    -41, -51, -45, 11, 45, -3, -39, 12, -39, 16, 
    46, 45, 40, -3, 47, 10, -2, -17, 36, -10, 
    -11, 40, 1, 41, -13, -20, 42, -34, -19, 21, 
    2, 28, -17, 23, -1, 11, 29, -10, -12, -16, 
    -36, 14, 0, 13, -53, -67, 3, -22, -35, 19, 
    5, 4, 32, 45, -24, 25, 32, 33, -27, -51, 
    -37, -52, -43, 23, 33, -28, 32, -52, 48, -40, 
    -46, 15, -7, -12, 48, 51, -41, -36, 16, -11, 
    -18, -37, -13, 7, -32, -17, -57, -51, 27, -61, 
    -4, 37, -43, 8, -1, -49, -33, -25, -30, 12, 
    17, -40, -58, 31, 38, -2, 1, 8, 32, 34, 
    -5, 7, -1, -4, 16, 48, -25, -34, 29, -7, 
    76, 35, 32, 27, 5, -33, -36, 0, -45, 26, 
    18, 3, 5, -9, -20, -41, -36, -24, -35, 2, 
    -65, -46, 68, 6, -47, -33, 22, 64, -24, -31, 
    1, -12, 36, -21, 47, -28, -30, -3, -2, -8, 
    -30, 71, 88, 49, 28, 33, 33, -19, -39, 23, 
    -49, 59, 32, -44, -29, 25, -44, 34, -2, -1, 
    8, -19, -25, -4, 62, 57, 6, 53, 25, 19, 
    47, 58, -27, -26, -19, -17, 26, 42, -26, 24, 
    -66, -36, -24, -48, -4, -11, -2, 53, 2, 7, 
    -36, 26, -3, 54, 35, -42, 44, -28, -11, 37, 
    -33, 0, 44, 12, 22, 47, 48, -51, -22, 20, 
    25, -25, -26, 24, 41, -48, -46, -37, -21, 1, 
    90, 87, 67, 0, 20, 33, -4, -7, 15, -26, 
    21, -19, 35, -55, -11, -2, 0, -6, 11, -52, 
    14, 35, 32, 6, 33, -41, -54, -6, -44, -18, 
    -24, 52, 2, 15, 30, -24, 36, -39, 7, -25, 
    58, -17, -34, -49, 30, 13, -26, -6, 11, 43, 
    12, 23, 25, 49, -37, -9, 18, 9, -23, 22, 
    -70, 39, 66, 68, 75, 10, -37, 8, 33, -32, 
    29, -18, 25, -8, -45, -1, -11, 28, -37, 4, 
    -33, 6, 43, -32, 127, 30, -33, -71, -16, 18, 
    5, -42, -8, 14, -23, -45, 9, 6, 36, -22, 
    -2, 37, -24, 42, -8, 23, -26, 24, 25, -46, 
    54, 21, 50, -44, 32, 15, 11, 15, 37, 17, 
    -24, 46, -52, 7, 26, 20, -15, 6, -38, -27, 
    12, -20, 58, -40, -3, 9, -10, -11, -47, -59, 
    -2, -15, -38, -14, 30, 46, 32, 1, 1, 8, 
    32, -21, 42, 44, 10, 2, -19, 45, 60, -25, 
    2, 59, -18, 50, 25, -40, -34, 13, -27, 67, 
    66, 51, 68, 5, 5, 67, -43, -17, 23, -41, 
    10, -65, -33, -18, -43, -15, 25, 43, 64, 42, 
    47, 9, -26, -14, -65, -51, -24, -23, 43, 50, 
    54, 26, -28, -26, 16, 28, 32, -14, 6, -31, 
    67, 36, 36, -53, -61, -14, 36, -70, -13, 63, 
    29, 25, -7, 23, -5, -62, 17, 46, 9, -57, 
    -12, -26, 42, -65, -11, -34, 22, 25, 51, -37, 
    58, 40, 12, 4, 5, 5, -7, -5, 46, -46, 
    38, -4, 52, -15, -58, -42, 9, 8, -52, 23, 
    -5, 5, -48, -15, -31, 67, -32, 21, -33, -4, 
    45, -4, -26, 46, 57, 41, -9, -15, -40, 50, 
    1, 6, 41, 54, 10, 12, -12, 8, 32, 28, 
    -1, -28, 34, 25, 9, 29, -14, 7, -16, -17, 
    -9, 31, 4, -37, -14, -59, -42, 11, 9, 25, 
    -69, -42, 33, -14, 2, 42, 18, 23, 35, 32, 
    -3, -25, -66, 14, 68, 28, -69, -77, 15, 8, 
    -26, 2, 31, -38, -10, 17, -22, -50, 40, -9, 
    21, -25, 30, 31, 54, -20, -28, -21, -12, 15, 
    -25, 13, -20, 6, 12, 1, 11, 13, 51, -26, 
    14, -4, 24, -14, -35, -3, 52, 9, -8, 29, 
    5, 3, -57, -29, -2, -9, -38, -7, -40, -3, 
    32, 6, 17, -40, 20, -41, -10, -14, -19, -1, 
    35, 7, -5, 1, -5, -52, 50, 30, 36, 9, 
    10, -38, 8, -43, -35, -53, 12, 34, 60, 68, 
    1, 49, -47, -3, -26, 64, 3, -36, -37, -36, 
    36, -42, -16, 19, -63, 32, -39, -43, 5, -10, 
    46, -18, -51, 14, 7, -16, 49, -24, 13, -5, 
    43, -46, 12, 9, 1, 37, 16, 20, 2, -62, 
    -47, -2, 8, -8, 13, -22, -3, -31, 52, -3, 
    -37, -44, -29, 40, -3, 1, -60, -33, 18, 45, 
    65, 25, -6, -18, 7, 52, -36, -24, 39, -25, 
    -25, 10, 23, -36, 20, 15, 49, -51, 39, -16, 
    35, -37, 77, 94, 13, 10, 54, 0, 66, 55, 
    34, 57, 6, 14, 50, -3, 59, 2, 36, -4, 
    -10, -30, -1, 13, 76, 45, 35, -29, 41, -42, 
    -52, -39, 3, 16, -46, 22, 51, -25, -37, 12, 
    38, -63, 38, 54, 3, -42, -1, 0, 3, -11, 
    14, -1, -12, -33, -52, -36, 7, -17, -53, -61, 
    -54, -70, 36, -21, 46, 10, -5, -51, 40, 15, 
    24, -24, 60, 32, 55, 89, 42, 31, 17, 61, 
    72, -37, -14, 41, 74, 66, -10, 50, 57, -23, 
    23, 43, 22, 47, -44, -29, 36, 21, -51, -24, 
    -35, 8, -19, 15, 3, -13, 51, -47, 30, -20, 
    -28, 2, -43, -36, -46, -50, -34, -33, -44, 25, 
    -7, 27, -20, -60, -47, -10, 1, 19, -20, 33, 
    -5, -56, -2, 5, 1, -48, -19, -13, 9, -9, 
    -53, -5, -1, -4, 17, 11, 24, -53, 37, 55, 
    -37, -7, -44, -31, 20, 19, 47, -19, 18, -35, 
    -13, -70, -7, -10, 30, 43, -11, -14, -16, -36, 
    79, 21, 73, 61, 30, -4, -22, -46, 35, -8, 
    3, 3, 19, -15, 19, -8, 59, 25, -35, 17, 
    48, 29, -38, 57, -8, 8, -43, 8, -30, 8, 
    -31, 36, -16, -27, -32, -31, -34, -47, -52, -2, 
    -47, 48, 16, 29, 34, -57, 36, 45, -38, -23, 
    2, -28, 8, -37, -29, 20, -5, 0, 50, 1, 
    -26, 43, -7, -3, -34, -23, 16, -2, -21, -6, 
    -10, -37, 59, 21, -44, -22, -64, -18, -21, -41, 
    9, -37, -27, -44, 40, 54, -23, -33, 28, -37, 
    26, 44, -11, -16, 37, -9, 17, -26, -31, 17, 
    -16, -39, -29, 3, -34, -25, 18, -2, 67, 48, 
    -16, 15, -50, -50, -18, 24, 2, 20, -23, 27, 
    56, -36, -29, 52, 36, -40, -73, -14, -49, 32, 
    -2, -21, -2, 5, -29, -28, 3, 2, 44, 43, 
    -20, -3, 36, -30, 9, -20, -36, 53, 54, -45, 
    -50, 43, -10, 12, 25, -25, 53, 44, -24, 39, 
    -10, 13, 26, -25, -36, 2, -5, -33, -19, -5, 
    15, -14, 6, 11, -23, -3, -36, -60, -3, -36, 
    -21, -29, 22, 21, -39, 44, 40, -12, 33, 4, 
    59, 25, -3, -9, -24, 39, 16, 3, 9, 37, 
    -31, -24, 44, -33, -1, -26, -23, -7, 33, 37, 
    26, 23, 35, -4, -40, -6, 41, 31, 52, 29, 
    40, 48, 63, -15, 52, 31, 8, -42, 3, -35, 
    4, -12, -13, -39, -5, -23, -15, -60, 20, 47, 
    32, -17, 42, -39, 30, -1, -3, -31, 12, 53, 
    -12, -10, 14, -7, -40, -30, 25, -9, -42, -44, 
    -18, -43, -43, 13, -16, -8, -33, -15, -11, -53, 
    -4, -36, -45, -26, 33, 6, 50, -21, 4, -44, 
    -23, 53, 53, 27, 24, 24, -51, -27, 32, -11, 
    14, -24, 26, -40, 35, 13, -9, 36, -38, -32, 
    -48, -38, -24, -9, 40, 29, 9, -25, -54, 41, 
    4, 40, -17, 26, 55, -9, -45, 15, 7, -2, 
    -24, -27, -62, -45, -2, 45, 52, 39, 40, -16, 
    2, -29, 20, 10, 14, -13, 13, -35, 52, 13, 
    -21, -42, -42, -38, -13, 33, -6, 21, -9, 54, 
    -11, 25, 41, -66, -42, -58, -5, -3, 23, 28, 
    20, -13, -8, -18, -70, -44, 32, -22, -31, 27, 
    -30, -7, 46, -39, -5, -21, 15, -19, -14, 26, 
    -45, 25, -27, -14, 13, -7, 38, -6, -2, -3, 
    13, -13, -15, -15, 0, 11, -4, -13, 53, 5, 
    -24, 16, -22, 24, 17, -6, -5, 32, -10, -7, 
    36, 17, -22, -65, 35, -19, 2, 4, -27, -12, 
    21, -33, -10, -24, -29, 22, 33, -9, 11, -20, 
    -1, 30, 14, -20, -80, -8, -37, 11, -18, 4, 
    -26, 1, 16, -24, 20, -27, 22, -31, 14, 0, 
    -24, -49, 23, -26, -36, 26, -35, 59, -33, 23, 
    -13, -43, 29, -26, 35, -44, 51, 18, 29, 18, 
    52, 14, -32, -11, 55, -13, -29, 34, 15, -17, 
    26, 5, 27, 37, 47, 63, 1, 0, -40, -2, 
    10, 88, 73, 77, 89, -33, -42, 64, -41, 0, 
    -7, 32, 2, 24, 25, -28, 21, -12, -46, 2, 
    -49, -61, -59, -34, -7, -20, 28, 21, 11, -6, 
    -15, 43, 28, 13, 0, 18, -37, -24, 66, -15, 
    -53, -79, -29, 35, -6, 54, -3, -33, -9, 6, 
    -2, -28, 25, -30, 46, 15, -2, -7, -10, -10, 
    -39, 22, -22, 53, 18, -60, -12, 42, 35, 11, 
    55, -39, 64, -10, -51, -73, -50, 23, -8, 39, 
    -25, 22, -10, 24, 44, 20, 37, 14, -2, 10, 
    -49, -8, 35, 11, -47, -72, -72, 42, 16, 15, 
    -34, 44, 45, -7, 37, 27, -23, -46, -24, 12, 
    8, 50, 6, -7, 1, 30, 31, -13, -45, -21, 
    3, 8, 22, 38, -27, 39, -8, -22, 15, 23, 
    -48, -15, -19, -4, -8, 7, -9, -1, 16, -50, 
    -43, -44, 23, -52, -40, -24, 19, 31, 61, -8, 
    -46, 38, 21, -15, -9, 19, -7, 30, -10, 39, 
    14, -66, -39, -48, 32, -39, 31, 10, -63, 29, 
    -21, 12, 17, 42, 62, 11, -24, -17, -63, 40, 
    -12, -26, -43, -27, -23, 23, 27, 28, -8, 3, 
    -2, 31, 5, 22, -29, 33, 21, 29, 4, -26, 
    40, 32, 3, -15, 47, 27, 7, 14, 3, -27, 
    12, -11, 23, 24, -17, 21, -15, 26, -7, 47, 
    29, 11, 22, 49, -9, 12, -50, -29, 23, 7, 
    -45, -18, 1, 49, -38, 3, 41, -21, 29, -19, 
    -42, -45, -3, 49, -6, 47, -22, -11, -15, 6, 
    -36, 38, -10, 42, -52, 0, 23, -57, 9, 37, 
    -22, -2, 13, -18, -16, 59, 54, 44, 42, -7, 
    21, -19, -31, 17, -5, 18, -47, -37, -23, -7, 
    -26, -57, -10, 40, 34, -15, 64, 11, 34, 52, 
    34, -22, 7, -20, 18, -7, -40, -44, 12, -10, 
    -28, 41, 48, 21, -3, -33, -5, 12, 39, 60, 
    -1, -1, 35, -32, -49, 4, -47, 63, 9, -48, 
    -1, 17, -1, -15, -22, -20, 53, 15, -48, 44, 
    -18, 17, 25, -20, 37, -41, 1, -11, 19, 31, 
    34, 49, -36, 3, 1, -4, 18, -37, 34, 2, 
    -19, 3, -18, 43, 36, 27, -10, -11, 40, 23, 
    -14, 33, 12, 12, -24, -17, -42, -26, 20, -25, 
    28, -25, 39, -39, -28, 7, 36, -1, 3, -8, 
    -52, -22, -40, 45, 16, -19, 29, 14, 8, 14, 
    2, -18, 20, 52, 58, 40, 19, 47, -11, 24, 
    -39, 37, -14, -15, -46, -11, 50, 40, -22, -77, 
    -55, -1, -18, 40, 27, 37, -5, 28, -13, -15, 
    -21, 2, -9, 16, 64, 27, 41, -51, -71, -21, 
    -24, -17, -43, 5, -16, -51, 30, -14, 41, -3, 
    13, 24, 2, -3, 42, -19, -41, -5, 20, 9, 
    -19, -34, -47, -16, 8, -12, -30, -59, -38, -50, 
    -14, 0, -41, -58, -43, -31, -26, -65, -63, 28, 
    6, -28, 20, 47, 13, 26, -37, 0, 28, 53, 
    25, 11, -50, 25, -39, 34, -44, 7, 3, -44, 
    -37, -34, -26, -22, 1, -23, 17, 6, 42, 21, 
    -19, 24, -3, -3, 22, -44, -47, -56, -20, 24, 
    -30, -35, -8, 1, 33, 60, -24, 11, -31, 40, 
    -5, 14, 12, 34, 28, 47, 10, 35, 36, -41, 
    -24, 30, -38, -41, -40, 28, -4, 25, 3, -40, 
    32, -25, 73, 5, 11, 14, 3, 26, 20, -18, 
    40, 37, -31, -10, 58, 11, 36, 42, 24, 62, 
    65, 56, 37, 59, 13, 4, -10, 14, -19, 25, 
    -2, -53, 38, 15, -38, 13, 1, -35, -33, 35, 
    38, 54, -4, 60, 42, -49, 28, -14, -50, -50, 
    39, -23, -1, 0, 15, 46, 6, -36, 14, 41, 
    -51, -49, 3, 9, 38, -11, -8, 14, 9, 10, 
    -11, 37, 8, 32, -33, 22, -28, -26, -6, -5, 
    2, 46, -18, 45, 26, 30, 31, 13, -30, -7, 
    -25, -48, 16, 22, -4, -23, 18, -44, 23, -38, 
    24, -45, -5, 12, -12, -4, 58, -31, 28, 22, 
    62, 28, -10, -30, 25, -39, -34, -11, -47, -40, 
    28, 4, 27, -10, -33, -12, -30, -53, -39, 30, 
    14, -36, 40, 24, -30, -38, 45, -44, 45, 19, 
    -30, 30, 28, 19, 33, 53, -18, 12, 67, 17, 
    14, 49, -50, 36, -51, -67, -11, -6, 28, 12, 
    -28, 52, -29, 46, 17, 16, 9, 32, -47, -46, 
    -48, -22, 75, 49, 31, 15, 18, -4, 21, 30, 
    8, -15, 29, 30, 10, -4, -33, -21, 2, -9, 
    25, -17, -5, 16, 7, 45, -50, -40, -65, 32, 
    -28, -34, 50, 25, 40, 33, -45, 15, 41, -35, 
    49, -48, 44, -15, 28, 4, -38, -56, 24, 26, 
    27, -7, 71, 32, -34, -24, -38, -38, 39, -1, 
    -8, 25, 7, 53, -29, 40, 45, -14, -20, -13, 
    15, 45, 13, -24, 12, 0, 57, 19, 0, -66, 
    -29, 3, -34, -7, 55, 35, 58, -1, 2, -7, 
    -3, -36, -21, -54, 28, 34, -40, 12, -34, 18, 
    -27, 48, -5, 6, 47, -6, 16, -10, -58, 26, 
    -37, 2, -11, -6, 13, -38, -44, -50, -56, -43, 
    -17, 61, -22, -20, -21, 61, -9, -13, 1, 10, 
    11, -19, 30, 12, 29, 8, 30, 36, 44, -11, 
    -10, 48, 14, 41, 62, -26, -32, 35, 43, -16, 
    39, 18, -31, 44, 10, -46, -15, 6, 1, 4, 
    32, 61, 31, 59, -49, -8, -50, 0, -15, -3, 
    20, -52, 17, 27, 12, 18, 45, 18, -36, 10, 
    -9, 54, 28, 27, -54, 8, 1, -28, -62, -57, 
    37, 13, 33, -27, -55, 3, -67, 20, 0, 7, 
    15, 26, 15, 4, -37, 14, -54, 7, 30, 1, 
    20, -25, -24, 18, 31, -51, 33, -41, 42, -51, 
    15, -48, -53, 41, -44, 24, 7, -42, -13, -39, 
    -9, -64, -54, 41, -13, 10, 31, 23, 51, 50, 
    -23, 18, 31, 4, 12, 36, -6, -27, -57, -57, 
    21, -38, -7, -46, 21, 33, 66, 22, 63, -37, 
    75, -19, -18, 18, -40, -18, -39, -74, -31, -37, 
    -68, -47, 25, 11, -12, -52, -61, 24, -17, -22, 
    -31, -10, -49, -3, -15, -26, -41, -52, -48, -21, 
    21, 59, -8, 27, 1, 21, -10, 35, 6, -16, 
    15, -6, -5, -26, 11, -33, -66, -4, 6, 24, 
    19, -2, -9, 31, 13, 8, -20, 22, 10, 60, 
    -19, -46, -29, -5, -8, -22, 25, -11, 15, -25, 
    -11, -26, 9, 15, -1, 25, -16, 10, 17, 25, 
    -23, -35, 25, 1, 62, 36, -23, 34, 59, -12, 
    -9, 14, -3, -7, -43, 6, -15, -8, 28, 35, 
    -41, -18, -68, -8, -12, 40, 43, 21, -24, 26, 
    48, 17, -64, -51, -25, 30, 10, -54, -52, 8, 
    17, 32, 29, 34, -40, -5, -35, -21, -43, 0, 
    6, -6, 20, -6, -12, 30, -16, 4, -21, -12, 
    -30, -45, 25, -55, 35, -31, 13, 14, -87, -59, 
    1, -51, -13, 7, -6, -78, -45, -77, -69, -57, 
    -85, -75, -30, -46, -20, -3, -33, -57, 3, -27, 
    -47, -81, 27, -21, -14, 10, 36, -7, -5, -10, 
    -29, -2, 12, 49, 12, 59, -1, -41, -9, -43, 
    -15, -18, -6, -52, 29, 25, 59, -41, -10, -43, 
    -51, -5, 41, 20, -3, -8, 19, 11, 40, 16, 
    -9, -16, -18, -25, -14, 13, -7, 30, -5, -12, 
    46, -36, -7, 31, 41, -37, -63, 24, 38, -4, 
    22, 59, -34, -16, -33, 14, -38, 12, 13, -33, 
    -45, 43, -1, -37, 0, -30, -29, -28, 52, 13, 
    -44, -68, -4, -2, 18, 3, 20, -79, -53, 43, 
    11, -20, 4, 23, -1, -50, 42, 29, -12, 13, 
    17, -34, -22, 56, 11, 41, -6, -57, -69, -29, 
    36, 10, -18, 35, -25, -26, -2, -50, 8, -27, 
    40, -37, -48, 31, 7, 8, 44, 41, -28, -29, 
    -15, 30, -6, -27, 52, 16, -28, 33, 35, 25, 
    0, -28, 40, 36, -5, 11, -10, 5, 50, 36, 
    46, 25, 2, 13, 6, -21, -36, -13, -37, 18, 
    34, 16, 5, -5, 28, -45, -31, -33, 6, 19, 
    15, -46, 21, -35, 24, 27, -14, 21, -1, -42, 
    31, 8, -20, -26, 20, 21, 23, 3, -16, 52, 
    -36, -27, -47, -37, 46, 0, -27, -9, 38, 2, 
    34, 11, -53, 39, -6, -23, 27, 41, -47, 33, 
    -39, -22, -46, -4, 51, -3, 51, -17, -35, -13, 
    -46, -28, 29, 40, 50, 20, 30, 10, -19, -28, 
    -35, -36, 30, 46, -28, 10, 6, 43, 18, -6, 
    -31, -25, 33, 13, -19, 52, -5, 41, -41, 42, 
    34, -11, -39, 45, -34, 59, 21, -58, -16, 21, 
    -7, -12, -19, 6, 20, 33, 31, -9, -12, 12, 
    -40, 33, -50, -39, 17, 68, 56, -21, -8, 36, 
    -34, -22, -31, 43, -34, 51, 21, -26, -39, 18, 
    -24, -19, 28, 8, -9, -37, -44, 22, 5, -26, 
    -30, -35, 55, 81, 65, 0, 36, 48, -23, -34, 
    -14, 55, -41, 45, 73, -27, -55, 21, -59, -27, 
    -44, 24, -58, -49, 4, 16, -8, 76, 1, -35, 
    32, -17, 20, -15, 47, -1, 9, -24, 53, 14, 
    -39, -79, 11, 13, -18, 1, -30, 22, -41, 12, 
    -53, -27, 22, 22, 37, -49, -33, 2, -29, -11, 
    -1, -18, 21, 5, 21, 5, 22, 53, -27, 8, 
    -6, 34, -17, -21, 30, -4, 11, 62, 19, -38, 
    28, 47, 6, -36, -10, -9, 11, -33, -3, 35, 
    9, 7, 17, 15, -22, 7, -48, -19, -30, -44, 
    -29, -21, 35, -9, -2, -51, -34, -3, 53, 16, 
    -45, 44, 47, 34, -19, 38, -36, 50, 14, 38, 
    -13, 51, 17, -35, 26, -36, -47, -54, -7, 25, 
    -4, -34, -17, 40, 30, -39, 16, -33, 5, 22, 
    93, 53, 31, 43, 16, 33, 36, -68, -3, 5, 
    38, 12, 6, -37, 0, -5, -32, -29, -4, 8, 
    -29, -63, -33, 5, -26, 32, -9, -50, -2, -1, 
    -48, -23, -25, 9, 32, 19, -4, 25, -52, 34, 
    -36, -14, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};
const TfArray<1, int> tensor_dimension12 = { 1, { 3200 } };
const ALIGN(8) int16_t tensor_data13[256] = { 
    13028, 13028, 13028, 13028, 13028, 13028, 13028, 13028, 13028, 13028, 
    13028, 13028, 13028, 13028, 13028, 13028, -4845, -4605, -2547, -5514, 
    -6107, -4592, -5665, -666, -5955, 634, -931, -2206, -5918, -2535, 
    -3936, -5236, 13028, 13028, 13028, 13028, 13028, 13028, 13028, 13028, 
    13028, 13028, 13028, 13028, 13028, 13028, 13028, 13028, -1007, -2345, 
    -4466, -250, -4857, -2825, -2181, -5905, -3570, -4125, -5097, -3229, 
    -7773, -4150, -5072, -4100, 13028, 13028, 13028, 13028, 13028, 13028, 
    13028, 13028, 13028, 13028, 13028, 13028, 13028, 13028, 13028, 13028, 
    -3204, -4138, -2610, -2181, -1828, -1070, -1070, -8531, -2067, 28, 
    1202, -12166, -856, -2560, -12456, -5577, 13028, 13028, 13028, 13028, 
    13028, 13028, 13028, 13028, 13028, 13028, 13028, 13028, 13028, 13028, 
    13028, 13028, -4592, -2370, -1083, -9768, -5173, -237, -2484, -4554, 
    -477, -2345, -3885, -3039, -1701, -1335, -6107, -4352, 13028, 13028, 
    13028, 13028, 13028, 13028, 13028, 13028, 13028, 13028, 13028, 13028, 
    13028, 13028, 13028, 13028, 4459, -2989, -2471, -6258, -4037, -5577, 
    -3835, -3936, -3759, -3128, -5539, -6006, -2333, -2307, -4024, -2964, 
    13028, 13028, 13028, 13028, 13028, 13028, 13028, 13028, 13028, 13028, 
    13028, 13028, 13028, 13028, 13028, 13028, -7167, 41, -3885, -6271, 
    -2938, -5741, -4138, -4112, -3052, -3128, -5110, -3532, -11497, -4529, 
    -2825, -2661, 13028, 13028, 13028, 13028, 13028, 13028, 13028, 13028, 
    13028, 13028, 13028, 13028, 13028, 13028, 13028, 13028, -1563, -2938, 
    -3229, -3279, 9609, -540, -2673, -5450, -3469, -3456, 5191, -4529, 
    -2156, -2244, -3696, -5627, 13028, 13028, 13028, 13028, 13028, 13028, 
    13028, 13028, 13028, 13028, 13028, 13028, 13028, 13028, 13028, 13028, 
    -237, -5892, -4428, -1651, -6031, -692, -2244, -4870, -3721, -5463, 
    -3481, -4428, -2434, -4441, -5918, -1600, 
};
const TfArray<1, int> tensor_dimension13 = { 1, { 256 } };
const ALIGN(8) int16_t tensor_data14[256] = { 
    13090, 13090, 13090, 13090, 13090, 13090, 13090, 13090, 13090, 13090, 
    13090, 13090, 13090, 13090, 13090, 13090, -4851, -4610, -2543, -5523, 
    -6120, -4598, -5676, -653, -5967, 654, -919, -2200, -5929, -2530, 
    -3938, -5244, 13090, 13090, 13090, 13090, 13090, 13090, 13090, 13090, 
    13090, 13090, 13090, 13090, 13090, 13090, 13090, 13090, -995, -2340, 
    -4471, -234, -4864, -2822, -2175, -5917, -3570, -4128, -5105, -3228, 
    -7794, -4154, -5080, -4103, 13090, 13090, 13090, 13090, 13090, 13090, 
    13090, 13090, 13090, 13090, 13090, 13090, 13090, 13090, 13090, 13090, 
    -3202, -4141, -2606, -2175, -1820, -1059, -1059, -8555, -2061, 45, 
    1224, -12208, -843, -2555, -12500, -5587, 13090, 13090, 13090, 13090, 
    13090, 13090, 13090, 13090, 13090, 13090, 13090, 13090, 13090, 13090, 
    13090, 13090, -4598, -2365, -1071, -9798, -5181, -222, -2479, -4559, 
    -463, -2340, -3887, -3037, -1693, -1325, -6120, -4357, 13090, 13090, 
    13090, 13090, 13090, 13090, 13090, 13090, 13090, 13090, 13090, 13090, 
    13090, 13090, 13090, 13090, 4497, -2987, -2467, -6272, -4039, -5587, 
    -3837, -3938, -3760, -3126, -5549, -6018, -2327, -2302, -4027, -2961, 
    13090, 13090, 13090, 13090, 13090, 13090, 13090, 13090, 13090, 13090, 
    13090, 13090, 13090, 13090, 13090, 13090, -7185, 57, -3887, -6284, 
    -2936, -5752, -4141, -4116, -3050, -3126, -5118, -3532, -11536, -4534, 
    -2822, -2657, 13090, 13090, 13090, 13090, 13090, 13090, 13090, 13090, 
    13090, 13090, 13090, 13090, 13090, 13090, 13090, 13090, -1553, -2936, 
    -3228, -3278, 9672, -526, -2670, -5460, -3469, -3456, 5232, -4534, 
    -2150, -2238, -3697, -5638, 13090, 13090, 13090, 13090, 13090, 13090, 
    13090, 13090, 13090, 13090, 13090, 13090, 13090, 13090, 13090, 13090, 
    -222, -5904, -4433, -1642, -6043, -678, -2238, -4877, -3722, -5473, 
    -3481, -4433, -2429, -4445, -5929, -1591, 
};
const TfArray<1, int> tensor_dimension14 = { 1, { 256 } };
const ALIGN(8) int16_t tensor_data15[256] = { 
    26265, 26265, 26265, 26265, 26265, 26265, 26265, 26265, 26265, 26265, 
    26265, 26265, 26265, 26265, 26265, 26265, -9711, -9228, -5080, -11060, 
    -12256, -9202, -11366, -1288, -11951, 1334, -1822, -4393, -11875, -5054, 
    -7879, -10500, 26265, 26265, 26265, 26265, 26265, 26265, 26265, 26265, 
    26265, 26265, 26265, 26265, 26265, 26265, 26265, 26265, -1975, -4672, 
    -8948, -448, -9737, -5640, -4342, -11849, -7141, -8261, -10220, -6454, 
    -15616, -8312, -10170, -8210, 26265, 26265, 26265, 26265, 26265, 26265, 
    26265, 26265, 26265, 26265, 26265, 26265, 26265, 26265, 26265, 26265, 
    -6403, -8286, -5207, -4342, -3629, -2102, -2102, -17143, -4113, 112, 
    2479, -24472, -1669, -5105, -25057, -11187, 26265, 26265, 26265, 26265, 
    26265, 26265, 26265, 26265, 26265, 26265, 26265, 26265, 26265, 26265, 
    26265, 26265, -9202, -4723, -2128, -19637, -10373, -422, -4952, -9126, 
    -906, -4672, -7777, -6072, -3375, -2637, -12256, -8719, 26265, 26265, 
    26265, 26265, 26265, 26265, 26265, 26265, 26265, 26265, 26265, 26265, 
    26265, 26265, 26265, 26265, 9045, -5970, -4927, -12562, -8083, -11187, 
    -7675, -7879, -7523, -6250, -11111, -12053, -4647, -4596, -8057, -5919, 
    26265, 26265, 26265, 26265, 26265, 26265, 26265, 26265, 26265, 26265, 
    26265, 26265, 26265, 26265, 26265, 26265, -14394, 137, -7777, -12587, 
    -5869, -11518, -8286, -8235, -6098, -6250, -10246, -7065, -23123, -9075, 
    -5640, -5309, 26265, 26265, 26265, 26265, 26265, 26265, 26265, 26265, 
    26265, 26265, 26265, 26265, 26265, 26265, 26265, 26265, -3095, -5869, 
    -6454, -6556, 19428, -1033, -5334, -10933, -6937, -6912, 10521, -9075, 
    -4291, -4469, -7396, -11289, 26265, 26265, 26265, 26265, 26265, 26265, 
    26265, 26265, 26265, 26265, 26265, 26265, 26265, 26265, 26265, 26265, 
    -422, -11824, -8872, -3273, -12104, -1339, -4469, -9762, -7446, -10958, 
    -6963, -8872, -4851, -8897, -11875, -3171, 
};
const TfArray<1, int> tensor_dimension15 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data16[4096] = { 
    1, 33, -10, 56, -24, -6, 32, -12, -4, -34, 
    1, 7, -28, -16, -35, 8, 8, 0, 0, -17, 
    -34, -18, 49, 6, -68, -45, -31, -25, -17, -47, 
    -25, -47, -52, 6, -38, 2, -57, 36, 21, 20, 
    51, -38, -4, 41, 14, -39, 65, -1, -3, 30, 
    -19, 2, 52, 1, 14, -14, -14, -14, -17, 7, 
    -13, 17, -22, -5, 17, 28, 32, 16, 17, -33, 
    44, -35, 12, -48, 4, 7, -44, 70, -41, 14, 
    16, 2, 20, 19, -28, -21, 12, -13, 3, -22, 
    -6, -23, -8, -102, -33, -6, -13, 100, -12, -58, 
    27, 51, -15, 8, 6, 34, -8, 42, -7, -20, 
    -6, -32, -14, -13, 17, -5, 33, -20, 44, 36, 
    -54, 5, -42, -39, 17, -52, -33, 33, -41, 30, 
    -54, 29, -26, 15, 63, 53, -16, -111, 33, -47, 
    17, -43, 43, 38, 13, -7, -43, 61, -7, 28, 
    -12, 23, -3, -105, 17, -67, 9, 6, -49, -12, 
    -1, -8, -15, -14, 7, 14, 10, -6, 2, 3, 
    -4, 35, -1, 80, 10, -1, -10, 12, 15, 5, 
    -34, -4, -30, 2, 22, 0, -8, 1, -61, -5, 
    14, 1, 40, 12, -11, -14, -4, -8, 0, 9, 
    8, 7, -28, 22, -2, -5, -2, -28, 16, 20, 
    4, 15, 34, 48, 2, -28, 42, 4, -1, 3, 
    -4, 10, 4, -24, -32, 11, -2, -4, -5, -6, 
    41, 7, -5, -42, 26, -23, 14, 27, 55, 4, 
    -27, -26, -8, 18, -29, -42, 37, 11, -48, -21, 
    -17, -15, 21, -1, 2, 1, 17, 81, 66, 13, 
    -53, 34, 43, -55, -76, -37, 16, 2, -15, -18, 
    16, 10, 42, -6, 29, 42, -80, -57, 40, 28, 
    -26, -98, 12, -23, 0, -77, -12, -64, -10, 23, 
    -3, 30, -56, 7, 10, 66, 39, -40, 6, 58, 
    -2, -32, -30, 29, 8, 27, 29, 4, -9, 1, 
    29, 13, -35, -88, -7, -35, 5, -69, -80, -27, 
    -13, -13, -52, 6, -2, 27, -8, 28, 60, -47, 
    21, 1, -14, -9, 16, 9, 47, -16, -6, -30, 
    18, 25, -10, 10, 17, -60, 42, 33, 4, -33, 
    -69, -15, 3, -96, 41, -4, 26, 10, -72, -14, 
    -46, 34, -49, 9, 15, 105, -95, 20, 9, -19, 
    -70, -30, -22, 44, -1, 10, 55, 82, -32, 24, 
    -8, 49, 44, 25, -27, 3, -21, -25, -13, 30, 
    0, 15, 12, -7, 6, 30, -4, 1, 22, 38, 
    39, -9, -8, 69, 4, 27, 5, 40, 35, 1, 
    -4, 12, -11, 18, -37, -15, 15, 14, -16, 0, 
    -19, 32, 53, -12, -38, -33, 11, 51, -19, -29, 
    34, -23, -19, -32, 60, 14, -8, 0, -44, 28, 
    9, 13, 24, 71, 60, -26, -43, -12, 6, 20, 
    -15, 55, -28, 27, 26, 35, 48, -87, 29, 5, 
    -71, -31, 17, -15, 19, -2, 27, -51, 21, 1, 
    -9, 45, 26, 28, 23, -37, 85, -15, -35, -12, 
    9, -16, -47, -3, -40, 10, -20, 12, 0, 33, 
    26, 9, -27, -33, 15, 6, 13, 27, 39, -16, 
    -2, 57, 52, 9, -19, -91, -34, -31, -50, 25, 
    25, -30, 4, -45, 18, -27, 20, -11, -34, -23, 
    -5, 10, -12, 13, -21, -23, 11, 16, -19, 17, 
    -51, 2, 33, -21, -71, 30, 31, 39, -41, 9, 
    33, -30, 29, 32, 29, 21, -18, -35, -19, 1, 
    15, -7, 2, 14, 9, -6, 21, -18, -10, -60, 
    -28, 35, 9, -4, 28, 13, 19, 6, -10, 0, 
    11, -32, 46, -34, -34, -5, -33, 12, 27, 52, 
    -47, 29, 14, -6, -9, -31, 24, -23, -32, -23, 
    27, 28, 33, -10, -5, 26, 6, -31, 15, 49, 
    -44, -82, -13, -28, 110, 0, 9, 40, -29, 0, 
    35, -44, 9, -9, -11, -9, 14, 5, 46, 44, 
    24, 12, -28, 53, 59, 23, -24, 84, -17, 14, 
    48, 10, -28, 4, -5, -33, 10, 0, 16, -8, 
    80, -17, 33, -46, -6, -2, 32, -2, 0, 18, 
    -7, 30, 4, 17, -62, -36, -47, 51, 49, -23, 
    -8, -44, -66, -12, -7, 27, -10, 52, 15, -21, 
    8, -23, -32, -46, -59, 12, -28, 17, 31, 51, 
    24, -45, 11, -11, -40, -22, 66, -56, 32, 16, 
    47, 41, 4, -7, 4, 21, -29, -65, -33, -32, 
    27, 37, -39, -47, 32, -31, 61, 4, 93, 1, 
    9, -19, 35, 18, -13, -7, 12, -13, -12, 32, 
    -25, 36, 7, -12, 41, -62, 26, -18, -19, 34, 
    -25, 14, -35, 3, 22, 62, 35, -18, 9, -5, 
    -5, -38, 3, 29, 14, 15, -24, -45, -23, -5, 
    -29, 4, -6, 31, -31, -21, 9, -11, -42, -6, 
    4, 45, 10, 24, -10, 20, 6, 14, 7, -36, 
    -4, 15, 0, 11, -16, -20, -41, 30, -4, 11, 
    50, 16, -47, 52, -19, 16, -55, 8, -47, 24, 
    -20, 17, 41, 39, 23, 37, -6, 30, 19, 71, 
    -11, -37, 20, -1, 7, -49, 51, -15, -45, -2, 
    7, -52, -8, 22, 42, 24, -10, 3, 1, -8, 
    54, -35, -25, 66, 7, 30, -30, 9, -12, 30, 
    -74, 0, -19, 16, -24, 61, -64, 48, 47, 51, 
    32, -93, 42, -37, -27, -7, -17, 44, 56, -13, 
    42, 77, -16, 12, 0, 16, 19, -66, -30, -61, 
    15, -69, -7, 43, -9, 40, 10, 6, -37, -11, 
    35, -33, 23, -39, 10, -19, 12, 22, -1, 29, 
    -16, 27, 55, 7, 37, -10, -7, 13, 29, -37, 
    7, -38, 18, -47, -29, -19, -33, 16, 5, -24, 
    13, -2, -33, -21, -35, -13, 4, 35, 12, 6, 
    -10, 38, 12, -32, -5, 5, -33, 56, -26, -6, 
    -32, 31, 15, 24, 10, 34, 39, -6, 38, 5, 
    -12, -83, 22, -38, -20, -22, -19, 41, -17, 2, 
    11, 27, 50, -28, -48, -50, -7, -16, 41, -22, 
    -25, 29, -6, 56, -18, 30, 23, 32, 43, -27, 
    4, -23, 73, -1, 9, -38, 10, -1, -95, -60, 
    32, -24, 18, 60, -4, 4, 19, 5, 11, 31, 
    2, -43, -20, 25, 13, 0, -14, -6, -13, 12, 
    -13, 28, -6, -23, 22, -17, 27, -14, -61, 14, 
    -51, 36, 11, 18, 29, 12, -23, 66, 1, 18, 
    -5, -19, -44, 19, -25, 2, 55, 21, -6, -35, 
    -3, 25, 50, 15, -25, 5, -21, 11, -17, -9, 
    18, -32, 11, 6, -2, 30, -21, -22, 39, 22, 
    -23, 12, -24, 13, 7, 14, 79, 32, -28, -47, 
    -6, -49, -32, -18, -35, -2, -33, 36, -27, 40, 
    -49, 40, 4, -19, 17, -97, 57, -28, -8, -24, 
    53, 2, 43, -26, 41, 83, 10, 17, 31, 40, 
    -35, -52, 5, -19, 26, -10, -87, -72, -9, 43, 
    32, 22, -53, -8, 85, 10, -5, 11, -8, 44, 
    -2, -49, -14, -10, -28, 15, 32, -27, 28, -46, 
    5, 31, -24, -27, 31, 0, 52, -89, -60, -7, 
    26, 55, 0, 4, 5, -27, 13, -38, 2, 7, 
    12, -15, -50, -28, 22, 46, -35, -45, 14, -39, 
    0, -38, 49, 36, -39, 1, -25, -18, 59, -30, 
    -10, -11, -37, 3, -77, 28, -20, 60, -1, -18, 
    30, -54, 11, -19, 5, 6, 39, 13, 25, -5, 
    -25, 39, -17, 14, 8, 54, 10, -1, 39, -36, 
    -4, 34, 2, 14, 2, 57, 14, 4, 43, -13, 
    8, -4, 48, -9, 5, -43, -4, -16, -30, -37, 
    3, 38, -22, -16, 5, -18, -13, -4, 15, -3, 
    -29, -1, -3, 25, 14, 29, 24, -14, -8, -30, 
    -11, -33, 7, 31, -19, 19, 0, -3, 15, -15, 
    21, 19, -15, 20, 18, -18, -5, 1, 44, -23, 
    33, -37, -36, -18, 3, 15, 10, 0, 23, 6, 
    36, -3, -10, -10, 45, -12, 39, -50, -25, 11, 
    0, -6, 59, 7, -32, 22, -2, -18, -7, -53, 
    27, -13, -19, -7, -75, 33, 17, -23, -19, 15, 
    19, 15, 5, 37, -28, -22, -13, 21, -19, -29, 
    12, 12, 7, -15, 43, 4, 19, -11, 10, 30, 
    3, -18, 26, 16, -100, -8, 20, -7, 2, -75, 
    -3, -2, 19, 76, -28, -5, -52, 10, -5, 80, 
    29, -1, -9, 32, -34, -65, -28, -45, 7, -32, 
    19, 21, -8, -14, 62, -2, -30, -71, -30, -48, 
    -6, -28, -4, -61, -39, 2, -13, 1, 7, -3, 
    7, 10, -4, -20, 40, -32, -42, -16, 25, 0, 
    -9, -3, 12, 29, 13, 19, 13, 14, 40, -14, 
    -15, 29, 4, 43, 9, -3, -3, -26, 17, -13, 
    23, -4, -75, -40, -47, 17, -37, 28, 39, 45, 
    6, 53, 1, 56, -5, -16, -44, -11, -38, 19, 
    38, 77, -14, 56, 5, 66, 25, 63, -19, -29, 
    -33, -20, -19, 35, -71, 8, -4, -33, 29, -5, 
    3, 1, 42, 44, -11, -23, 5, 35, -41, 30, 
    -10, 1, -2, -11, 11, -15, 13, 18, -5, -13, 
    -15, -2, -90, -32, -3, 17, 19, -50, 1, -32, 
    -39, -4, -19, -16, 37, 36, -8, -21, 65, -5, 
    50, -29, -55, 39, 3, 68, 43, -3, 41, 22, 
    -19, 16, 9, 4, -15, 46, -31, -5, 27, 76, 
    53, -31, -16, 4, -74, -29, -49, 12, -4, -2, 
    42, -4, 2, -58, 36, 32, -22, -45, 56, -24, 
    47, 37, -64, -52, -26, -6, -9, 58, -13, 31, 
    3, 12, 16, -12, 60, 18, -7, -5, 43, 40, 
    17, -37, 9, -6, -19, 28, 43, 6, 61, -26, 
    27, 19, -16, 51, 12, 43, -33, 30, 26, -6, 
    -10, 9, -17, -10, -23, -25, 22, -25, -46, -27, 
    8, -6, -19, 37, 12, 14, 32, -35, 95, 46, 
    -39, -11, 20, 24, -3, -3, 6, -15, 36, 50, 
    -39, -28, -39, 23, 29, -6, 41, -6, 7, -1, 
    -2, -23, 26, -45, 6, -1, 21, -5, -52, -4, 
    27, 30, -41, -35, -29, 4, 33, -49, -48, -32, 
    5, 15, -24, 56, -50, 32, 28, 29, 25, -43, 
    13, -9, -14, -25, 44, 2, 21, 11, -3, 19, 
    19, -24, 32, 68, -64, -99, 17, -52, -2, -29, 
    1, -39, 12, 23, 8, -20, -14, -28, -30, -19, 
    -31, -15, -20, -30, -5, 16, -4, 67, -1, 20, 
    -26, -13, 8, -29, 13, -4, -46, -29, -12, -7, 
    26, -18, 58, 43, 32, 9, 50, -2, 17, -6, 
    -6, -39, -27, -13, 4, -17, 22, -15, -41, -11, 
    -24, 23, 14, -46, 10, 10, -9, -30, 27, 87, 
    -31, -25, 0, 3, -6, -21, -17, -40, -24, 18, 
    -44, 18, 17, 32, 24, -21, 9, -23, 8, 20, 
    53, 32, 29, 30, 33, 54, 7, 8, -15, 38, 
    14, -54, -13, -23, 34, 14, -11, -17, 6, -67, 
    46, -52, 10, -14, 7, 1, -34, 31, -15, -36, 
    47, 9, -9, 41, -20, 40, -44, -32, 65, -52, 
    -18, -7, 39, 21, -28, -1, -24, 13, 26, 45, 
    24, -32, 41, 11, 29, -39, 22, -40, 10, -5, 
    -41, -66, -16, 27, -4, -30, -24, 82, -28, -51, 
    45, -30, -16, -6, 23, 35, -9, 53, 53, -3, 
    3, 3, 7, -36, 71, 11, 64, 1, 28, -20, 
    -45, -39, 44, -1, 36, 21, 14, 68, -6, 12, 
    -14, -15, -32, 47, -50, 38, 18, 18, 2, -21, 
    -29, 40, -3, 57, -14, 17, 25, -18, 27, 36, 
    -26, -19, 9, -4, 22, 15, -17, 11, 30, -12, 
    44, -19, -32, 0, 27, -9, 5, 40, 1, 31, 
    -24, 2, -10, 0, -63, 38, -22, -32, -16, 1, 
    4, 57, 27, 14, 25, -84, -6, 0, 37, -7, 
    2, -15, -18, 15, 19, 19, -34, -12, 1, -22, 
    -29, -60, -38, -75, 21, -27, -51, 25, -57, 37, 
    -24, -28, -78, -2, 55, -44, 14, -50, -13, 4, 
    -9, 0, 29, -6, 42, 2, 27, 7, -7, 38, 
    30, 60, -49, -75, 13, 1, 30, 2, -8, 17, 
    -22, -8, -19, 15, 13, 31, -28, -52, -45, -20, 
    -24, 62, 67, 24, -8, 36, 40, -41, 5, 66, 
    -44, 30, -3, 20, 9, 30, 61, 1, -12, 52, 
    59, 18, -13, 26, -22, -52, 10, -12, 3, -26, 
    -19, 27, -22, -17, -14, 68, 24, -43, -68, -55, 
    0, 4, 5, -14, -23, -50, -23, 49, -4, -7, 
    64, 64, -16, 31, -35, -41, 26, -44, 0, 41, 
    -22, 6, -45, -48, 5, 1, 36, 35, 8, 32, 
    -6, 4, -35, 52, -20, -27, -16, 69, -1, -33, 
    7, -9, 0, -21, -36, 1, -11, -37, -42, 73, 
    -9, 4, 52, 17, -1, -56, 9, -39, -7, -77, 
    31, -1, 16, 40, 25, 53, -70, 25, 11, 86, 
    0, -74, 33, -49, 6, -7, -12, -35, 11, 15, 
    -16, -37, -23, -25, 26, -26, 9, 61, -29, -55, 
    -38, -66, 31, -19, 14, 21, 13, 14, 14, -32, 
    52, -19, -29, 21, -22, -10, -6, -35, -28, -12, 
    -47, -18, -38, -9, -2, 41, -17, 21, -1, -25, 
    -4, 21, -19, 19, 4, 16, 46, -19, 20, 18, 
    2, 54, -4, 43, 4, -24, 26, -47, -48, 16, 
    9, -12, 8, -9, 3, -30, 19, -64, -12, -5, 
    28, -31, -22, 8, -17, -23, 15, 5, -24, -15, 
    -10, -24, 22, -1, 12, -34, 44, 65, 20, 18, 
    41, -36, 37, 31, -2, 22, -19, -3, -5, -2, 
    -9, 33, -11, -13, -12, 20, 10, -68, -68, -48, 
    -13, 44, 19, 8, 71, -53, 27, -29, -17, 10, 
    -21, 4, 11, -94, 5, -49, 26, -5, 14, -25, 
    -1, 3, -17, 13, 50, -12, -20, 69, 25, 1, 
    -8, -22, -66, -16, -41, 4, 5, 9, -5, 1, 
    -17, 50, -7, 30, -7, 21, 17, -5, 10, 28, 
    24, -31, -30, 25, -18, -17, 20, -9, -35, -31, 
    -1, -10, 15, 22, 5, -15, 5, -10, 6, -23, 
    22, -33, 6, 12, 5, 0, -16, 16, 19, -27, 
    -3, 3, 5, -8, -22, 11, -21, -34, -12, -10, 
    0, -7, 7, 9, -9, -7, 17, 7, -36, -33, 
    4, 2, 27, -8, 4, 11, -1, 4, 25, -14, 
    -22, -15, 18, 8, -32, 5, 9, -4, -19, -10, 
    -43, -21, -4, 17, 2, 49, 27, -5, 21, -2, 
    -5, 54, 40, 4, -19, 9, -17, 42, -17, -52, 
    -18, 0, -8, 18, -46, -30, 31, -68, 27, 13, 
    -8, -2, -34, -5, 15, -2, 19, 11, 9, 28, 
    7, 40, -15, -22, -13, 27, 2, 18, 17, 22, 
    -24, -11, -39, 29, 9, -9, -36, 34, -16, 16, 
    15, 11, -30, -8, -21, -37, 16, 62, 18, -21, 
    24, 36, 18, -16, 37, 49, 2, -34, 41, 36, 
    -34, -74, -1, -65, -29, -50, -73, -77, -2, 33, 
    26, -12, -6, -1, 17, -8, 12, 5, -8, 0, 
    7, -24, -44, 15, -23, 18, 19, -23, 21, 5, 
    9, 17, -5, 7, -7, -54, -19, 25, -42, 13, 
    -24, -51, 35, -17, 1, -48, -35, 20, -26, 36, 
    -14, 35, -5, 26, -16, -6, 31, -17, 7, -37, 
    -1, 8, -41, -29, 27, 59, -3, 26, -24, 23, 
    56, 38, -1, 49, -57, 25, -37, -43, 22, -4, 
    -19, -8, 4, -24, -5, 10, 1, -7, -22, -27, 
    7, -11, -1, -35, 16, 12, -46, -11, -5, 10, 
    -29, -26, -21, 2, 6, -31, 22, -33, 30, -24, 
    35, -11, 10, 15, -13, -13, 9, 9, -46, -49, 
    -21, -20, 10, -42, 22, -9, -67, -16, 50, 38, 
    -23, 56, 16, 58, 17, 9, 5, -7, -13, 27, 
    -25, 23, 0, 6, -22, -1, 20, -7, 6, 50, 
    11, -1, -8, -58, -33, 19, 32, 37, -5, 13, 
    7, -6, 23, 13, 21, 77, 30, -53, 1, 9, 
    -13, 14, 30, -21, -46, -24, 41, 41, -20, -14, 
    15, 14, -14, -26, -29, 24, -28, 3, -13, -15, 
    -30, -22, 23, 22, 41, 28, -28, 3, -3, 57, 
    -5, 27, 45, -31, 27, 2, 16, 51, -10, -14, 
    -25, 50, -3, -11, 32, -19, -10, -22, 14, 30, 
    46, 9, -9, -36, -13, -21, 22, -33, 0, -8, 
    -90, -10, 23, 52, 7, -34, -39, -9, 7, 44, 
    31, -42, 2, 29, -29, -6, 13, -23, 11, -5, 
    10, -24, 6, 12, 26, -34, -64, -3, 16, -7, 
    22, -66, -57, 10, 35, -29, 18, -13, 0, -29, 
    -9, -6, -3, -17, -9, -11, 16, -16, -45, -63, 
    -22, 21, 1, -17, 13, -11, 17, -11, 0, 28, 
    9, 8, -21, -107, -21, 51, -30, 18, -20, -21, 
    14, -4, 32, 30, 5, -24, -4, -34, -17, -17, 
    -17, 31, 13, -8, -63, -8, 18, -13, 13, 18, 
    -1, -12, -11, 11, 3, 4, -15, -24, 19, -60, 
    68, -38, 40, 32, 30, -11, -52, 0, -8, -33, 
    42, 25, -23, 50, -24, 42, -58, -11, 14, -25, 
    -24, -54, 9, 26, 5, -9, -54, -30, 23, 48, 
    45, 21, 21, -61, -41, -39, -16, -39, -31, -12, 
    28, 6, 5, -18, 5, -30, -5, -7, -2, -26, 
    61, -26, -16, -50, -42, 16, -26, 6, -12, -28, 
    -35, 58, -4, -5, 13, -9, 85, -12, -27, 19, 
    -35, -7, -44, -5, -37, 35, 19, 11, -9, 19, 
    -23, -38, 42, -45, 13, 15, 17, 27, -5, 31, 
    14, -23, -8, 19, -53, 43, 41, -19, 1, -42, 
    -13, 14, -26, 8, -29, -44, 61, 46, 20, 54, 
    -17, 27, -19, 27, 28, 0, -30, -18, -85, 0, 
    -23, 44, -49, -14, -7, -20, 6, 41, -34, 14, 
    -41, 37, 2, 7, 12, 13, 65, -40, -62, 5, 
    34, 19, -24, -13, 50, 16, 14, -47, 6, 12, 
    -34, -17, -8, -29, 37, -71, -14, -25, -48, 64, 
    -66, 43, -16, 13, -37, 49, 27, -49, 17, 6, 
    -13, 12, 25, -19, 3, -1, 11, 27, -30, 59, 
    -10, -13, -28, -101, 20, -101, -7, -50, -8, -2, 
    43, 36, -6, 32, -9, 9, -26, 2, 36, 21, 
    7, -27, -52, -3, -32, 1, -19, -19, -29, 0, 
    18, -43, 37, 41, -54, 42, -22, 13, 16, 23, 
    -19, 4, -8, 1, 26, 46, 6, 10, -31, -14, 
    -35, 17, -25, -1, -4, 76, -8, 31, 7, 12, 
    -14, 4, -52, 65, -5, -14, 34, -19, -20, 22, 
    -38, 8, 31, 19, -42, 39, -24, -16, 6, -3, 
    29, -7, -7, 18, 47, 4, -5, -1, 27, -33, 
    41, 34, 14, 33, -36, -4, 0, 4, -11, -24, 
    10, 11, 40, 2, -72, -12, -36, 77, -85, -15, 
    -72, -10, -8, 42, 44, -52, 47, 4, -11, -2, 
    30, 45, 33, -30, -39, 71, 20, 16, 15, 30, 
    -51, -66, -41, -55, -33, -3, -59, -37, 24, -47, 
    22, -47, 37, -52, 3, 27, 32, 12, -3, -51, 
    27, 17, -10, 17, -26, -10, -12, 4, -19, -46, 
    13, -68, 60, 21, -4, 2, 13, 0, -12, 19, 
    -33, 6, -5, -39, -24, 0, 45, -22, 17, -40, 
    7, 15, -58, -12, 22, 19, 44, -40, 20, -2, 
    -20, -35, -11, 0, -23, -25, 34, -6, 25, -32, 
    -72, -60, -39, 11, 6, 36, 17, -30, -8, 25, 
    42, -40, -5, -31, 27, 1, -11, 30, -20, -18, 
    7, 13, -30, 49, 127, 46, -59, -15, -9, -10, 
    23, -17, -34, 0, -31, 35, 8, -30, -55, 5, 
    -7, 37, 15, -2, -51, 7, -34, -31, 71, -11, 
    -24, -10, -4, 0, 29, 3, -11, -19, -45, -19, 
    20, -32, -45, -3, -12, -3, -20, 18, 10, 26, 
    -31, -10, 45, -13, -19, -34, 9, 35, 49, -11, 
    -38, -19, 3, 68, 26, -31, -4, -82, 1, -12, 
    -56, 5, -7, -2, -3, -50, -13, -24, -37, 8, 
    0, -6, 30, -21, -41, -17, 4, 12, -13, 5, 
    25, -15, 38, -5, 37, -37, 16, -11, 19, -3, 
    10, -1, -30, 17, -38, -2, -5, -33, -19, -7, 
    -31, -19, -34, 81, 21, 30, 32, 32, -4, -70, 
    5, -4, -38, -29, -6, 3, 17, -16, -14, 63, 
    -3, 56, -56, 28, -9, -74, -11, -6, 40, 22, 
    -20, -29, 62, 12, -28, -5, -30, 4, 61, 20, 
    3, 3, -23, -10, -25, 22, 49, -36, -3, 2, 
    4, 3, 66, 0, 41, -33, -20, -35, -47, 3, 
    23, -75, -101, -21, 29, -50, 56, -28, 82, -33, 
    -73, -29, -55, 42, -51, 35, 36, 69, -84, -10, 
    -6, 7, -50, -48, -78, 18, -3, -25, 66, 68, 
    38, 46, 13, 71, 91, 26, -14, 46, 12, 49, 
    -80, -24, 32, -40, -27, -24, 12, 62, 33, -13, 
    14, -4, -1, -41, 4, -9, -59, -11, 43, 45, 
    -68, -35, 5, -22, -4, -51, -26, -6, -34, 27, 
    25, 28, -55, 0, 41, -8, -42, -10, -4, 16, 
    -40, 20, -22, 6, -15, 39, 13, 1, -10, -19, 
    49, 51, -53, -38, -12, -11, 43, -96, -21, -20, 
    14, 39, 17, 22, -27, 25, 27, 4, 8, 26, 
    -49, -46, 31, -28, -47, 7, 20, 37, 56, -22, 
    0, 26, 30, -11, -34, -35, -6, 7, 20, -42, 
    -3, -43, -10, -31, -33, 0, 33, -33, -26, -48, 
    -30, -3, -39, 1, 3, 29, -33, 34, 33, -12, 
    -29, -20, -34, -1, -27, 8, 52, 4, -60, 45, 
    8, 66, 52, 51, 12, -23, 61, -6, 9, -48, 
    -54, -8, 33, 6, -28, -12, 29, 37, -12, 21, 
    -26, 26, -34, -39, 15, -36, -10, 2, 37, 48, 
    -3, 29, -24, -26, -23, 48, -22, -13, 11, 4, 
    5, -7, 30, -15, -7, 12, -26, -8, 19, 12, 
    31, 4, 20, -35, -10, 9, -49, -4, 1, 52, 
    50, 62, -13, -10, 5, 23, -4, 0, -15, -16, 
    18, -12, 51, -16, 27, -1, -42, 27, 5, 10, 
    77, 13, 4, 1, -10, -38, -9, -39, 11, -46, 
    -30, 47, 4, 11, -13, 34, 5, -5, -5, 60, 
    -39, -10, -16, 40, -58, 12, 94, 33, 52, -18, 
    6, 29, -72, -24, -22, -8, -37, 0, 53, 3, 
    -12, -25, 5, 21, -2, -31, 46, -77, 40, 2, 
    -39, -43, -50, 10, -62, 10, -20, 50, 5, 28, 
    -2, -74, 42, 7, -36, -25, 10, -9, 9, -12, 
    40, 5, -22, 3, 11, -3, 11, -25, -13, -60, 
    -26, -30, -20, -51, -18, 62, -35, 16, -32, 2, 
    82, 50, 7, -8, 19, -12, -5, -45, 73, -41, 
    21, -19, 44, -20, 21, -10, 68, 86, -73, -28, 
    -25, -33, 47, -57, -49, -40, 13, 53, -52, -22, 
    -39, -37, 35, 30, 4, -20, 15, 13, -13, -65, 
    40, -40, 21, 10, 24, -33, 33, -34, 19, 24, 
    -21, 9, 35, -5, 47, -65, -34, 3, -12, -38, 
    -17, 47, -53, -22, 34, 38, 32, -39, -21, -19, 
    -45, -89, 67, 12, 40, 98, -22, -3, 24, -55, 
    72, 69, -49, -45, -13, -69, -27, 4, -54, -56, 
    6, -17, 30, 4, -13, 39, -32, -4, -17, 2, 
    3, -22, 60, -23, -14, 29, 1, -14, 11, -14, 
    -34, -15, 31, -22, -58, -8, 14, 60, -34, 8, 
    30, 23, 34, 56, -6, -15, 0, -7, -14, 18, 
    27, 12, 28, 15, -1, -24, -6, 8, 15, -25, 
    0, -18, 6, -30, 4, -21, -18, 26, -32, -5, 
    52, -43, 1, -2, -2, -25, -21, 1, -39, 33, 
    0, -14, -8, -63, -21, -37, -37, -25, -30, 23, 
    51, -59, 21, 41, 13, 6, 25, 32, 41, -58, 
    6, -17, -6, 44, -1, -6, 33, 7, 25, 4, 
    19, -57, 73, -7, 20, -8, -9, 7, 12, -23, 
    -6, 5, -5, 47, 5, -29, 55, -52, 3, -43, 
    -32, 9, -2, -30, 42, 55, -5, 13, 17, 6, 
    32, -37, 25, -18, 58, 51, 47, -6, -14, 3, 
    -68, -15, -9, -21, 5, -7, -19, -12, 9, -13, 
    -51, -22, -18, -14, 39, -11, 42, -32, -7, 16, 
    -42, -35, 42, -7, 60, 17, -21, -34, -56, 17, 
    45, 36, 52, 47, -34, 68, -3, 19, -8, 8, 
    -7, 30, -45, -18, 63, 19, -9, 15, -10, 49, 
    14, 29, -24, 37, 6, -33, -9, 25, -40, 20, 
    -23, -61, 11, 37, 34, 53, 28, -57, 26, -49, 
    -26, 36, -36, -47, -65, 57, 76, -27, 25, 14, 
    38, 39, -55, 45, -20, 14, -37, 3, 9, -6, 
    -60, 23, 9, -14, -21, -26, -16, -36, 24, 23, 
    -40, 13, 44, 40, -66, 2, -42, 25, -7, -25, 
    -20, -26, 12, -7, -80, -14, 11, 30, -37, 48, 
    -21, 58, 33, 32, 34, -10, 15, 3, 3, 11, 
    34, 33, 31, -30, 28, 42, 3, 1, 9, -3, 
    -34, -56, 1, -22, -30, -32, -14, 6, -32, 14, 
    10, -11, -12, 35, -2, 18, -11, 4, -19, -2, 
    -5, 5, 18, 8, 4, 8, -65, 10, -33, 19, 
    -28, 1, 61, 20, 43, -7, 5, 0, -20, 2, 
    -19, 31, -1, 0, -1, 20, -7, 42, -26, -9, 
    -73, 12, 10, -17, 25, -15, 17, 20, -32, 7, 
    17, -25, -2, -47, -47, 51, -5, -22, -18, 14, 
    -13, -6, -37, 14, -51, 21, -54, 54, 60, 42, 
    -24, -52, 30, 23, -4, -12, 16, -16, 25, 30, 
    9, 20, -9, 4, 19, -18, -39, -92, 34, -22, 
    -16, -1, -25, -46, -38, -6, -43, -29, 67, 9, 
    -51, -69, 9, -8, -19, 29, 33, 25, -62, 34, 
    -24, -72, -23, 8, 0, 40, -52, -1, 29, -46, 
    30, 39, -29, 58, 22, 21, 
};
const TfArray<1, int> tensor_dimension16 = { 1, { 4096 } };
const ALIGN(8) int16_t tensor_data17[256] = { 
    14590, 14590, 14590, 14590, 14590, 14590, 14590, 14590, 14590, 14590, 
    14590, 14590, 14590, 14590, 14590, 14590, 1132, 1182, 1178, 1202, 
    1162, 1145, 1121, 1106, 1135, 1183, 1159, 1115, 1154, 1123, 
    1158, 1076, 14590, 14590, 14590, 14590, 14590, 14590, 14590, 14590, 
    14590, 14590, 14590, 14590, 14590, 14590, 14590, 14590, 1176, 1152, 
    1150, 1162, 1158, 1168, 1143, 1197, 1142, 1208, 1119, 1147, 
    1211, 1171, 1143, 1133, 14590, 14590, 14590, 14590, 14590, 14590, 
    14590, 14590, 14590, 14590, 14590, 14590, 14590, 14590, 14590, 14590, 
    1244, 1143, 1155, 1132, 1210, 1175, 1096, 1141, 1142, 1151, 
    1162, 1179, 1130, 1146, 1143, 1127, 14590, 14590, 14590, 14590, 
    14590, 14590, 14590, 14590, 14590, 14590, 14590, 14590, 14590, 14590, 
    14590, 14590, 1142, 1126, 1124, 1222, 1143, 1089, 1177, 1216, 
    1157, 1151, 1194, 1138, 1128, 1143, 1118, 1158, 14590, 14590, 
    14590, 14590, 14590, 14590, 14590, 14590, 14590, 14590, 14590, 14590, 
    14590, 14590, 14590, 14590, 1156, 1192, 1151, 1089, 1160, 1146, 
    1106, 1151, 1162, 1124, 1137, 1166, 1096, 1156, 1158, 1102, 
    14590, 14590, 14590, 14590, 14590, 14590, 14590, 14590, 14590, 14590, 
    14590, 14590, 14590, 14590, 14590, 14590, 1084, 1139, 1101, 1166, 
    1180, 1157, 1102, 1137, 1131, 1162, 1087, 1143, 1122, 1098, 
    1125, 1152, 14590, 14590, 14590, 14590, 14590, 14590, 14590, 14590, 
    14590, 14590, 14590, 14590, 14590, 14590, 14590, 14590, 1085, 1130, 
    1176, 1180, 1152, 1141, 1157, 1118, 1107, 1190, 1127, 1142, 
    1125, 1111, 1097, 1171, 14590, 14590, 14590, 14590, 14590, 14590, 
    14590, 14590, 14590, 14590, 14590, 14590, 14590, 14590, 14590, 14590, 
    1126, 1126, 1126, 1160, 1191, 1080, 1164, 1219, 1142, 1180, 
    1123, 1160, 1154, 1105, 1140, 1163, 
};
const TfArray<1, int> tensor_dimension17 = { 1, { 256 } };
const ALIGN(8) int16_t tensor_data18[256] = { 
    14202, 14202, 14202, 14202, 14202, 14202, 14202, 14202, 14202, 14202, 
    14202, 14202, 14202, 14202, 14202, 14202, -916, -867, -871, -847, 
    -886, -903, -926, -941, -913, -865, -889, -932, -894, -924, 
    -890, -970, 14202, 14202, 14202, 14202, 14202, 14202, 14202, 14202, 
    14202, 14202, 14202, 14202, 14202, 14202, 14202, 14202, -872, -896, 
    -898, -886, -890, -881, -905, -852, -906, -842, -929, -901, 
    -839, -878, -905, -915, 14202, 14202, 14202, 14202, 14202, 14202, 
    14202, 14202, 14202, 14202, 14202, 14202, 14202, 14202, 14202, 14202, 
    -806, -905, -893, -915, -839, -873, -950, -907, -906, -897, 
    -886, -870, -917, -901, -905, -921, 14202, 14202, 14202, 14202, 
    14202, 14202, 14202, 14202, 14202, 14202, 14202, 14202, 14202, 14202, 
    14202, 14202, -906, -921, -923, -828, -905, -957, -872, -834, 
    -891, -897, -855, -909, -919, -905, -929, -890, 14202, 14202, 
    14202, 14202, 14202, 14202, 14202, 14202, 14202, 14202, 14202, 14202, 
    14202, 14202, 14202, 14202, -892, -857, -897, -957, -889, -902, 
    -941, -897, -886, -923, -910, -882, -951, -892, -890, -945, 
    14202, 14202, 14202, 14202, 14202, 14202, 14202, 14202, 14202, 14202, 
    14202, 14202, 14202, 14202, 14202, 14202, -962, -908, -946, -883, 
    -868, -891, -944, -911, -916, -887, -959, -905, -925, -949, 
    -922, -896, 14202, 14202, 14202, 14202, 14202, 14202, 14202, 14202, 
    14202, 14202, 14202, 14202, 14202, 14202, 14202, 14202, -961, -917, 
    -873, -868, -896, -907, -891, -929, -940, -859, -921, -905, 
    -922, -936, -950, -878, 14202, 14202, 14202, 14202, 14202, 14202, 
    14202, 14202, 14202, 14202, 14202, 14202, 14202, 14202, 14202, 14202, 
    -922, -921, -922, -888, -858, -966, -884, -831, -906, -869, 
    -925, -888, -894, -942, -907, -886, 
};
const TfArray<1, int> tensor_dimension18 = { 1, { 256 } };
const ALIGN(8) int16_t tensor_data19[256] = { 
    14198, 14198, 14198, 14198, 14198, 14198, 14198, 14198, 14198, 14198, 
    14198, 14198, 14198, 14198, 14198, 14198, -916, -867, -871, -847, 
    -886, -903, -926, -941, -913, -865, -889, -932, -894, -924, 
    -890, -970, 14198, 14198, 14198, 14198, 14198, 14198, 14198, 14198, 
    14198, 14198, 14198, 14198, 14198, 14198, 14198, 14198, -872, -896, 
    -898, -886, -890, -881, -905, -852, -906, -842, -928, -901, 
    -839, -878, -905, -915, 14198, 14198, 14198, 14198, 14198, 14198, 
    14198, 14198, 14198, 14198, 14198, 14198, 14198, 14198, 14198, 14198, 
    -806, -905, -893, -915, -839, -873, -950, -907, -906, -897, 
    -886, -870, -917, -901, -905, -921, 14198, 14198, 14198, 14198, 
    14198, 14198, 14198, 14198, 14198, 14198, 14198, 14198, 14198, 14198, 
    14198, 14198, -906, -921, -923, -828, -905, -957, -872, -834, 
    -891, -897, -855, -909, -919, -905, -929, -890, 14198, 14198, 
    14198, 14198, 14198, 14198, 14198, 14198, 14198, 14198, 14198, 14198, 
    14198, 14198, 14198, 14198, -892, -857, -897, -957, -889, -902, 
    -941, -897, -886, -923, -910, -882, -951, -892, -890, -945, 
    14198, 14198, 14198, 14198, 14198, 14198, 14198, 14198, 14198, 14198, 
    14198, 14198, 14198, 14198, 14198, 14198, -962, -908, -946, -883, 
    -868, -891, -944, -911, -916, -887, -959, -905, -925, -949, 
    -922, -896, 14198, 14198, 14198, 14198, 14198, 14198, 14198, 14198, 
    14198, 14198, 14198, 14198, 14198, 14198, 14198, 14198, -961, -917, 
    -873, -868, -896, -907, -891, -929, -940, -859, -921, -905, 
    -922, -936, -950, -878, 14198, 14198, 14198, 14198, 14198, 14198, 
    14198, 14198, 14198, 14198, 14198, 14198, 14198, 14198, 14198, 14198, 
    -922, -921, -922, -888, -858, -966, -884, -831, -906, -869, 
    -925, -888, -894, -942, -907, -886, 
};
const TfArray<1, int> tensor_dimension19 = { 1, { 256 } };
const ALIGN(8) int16_t tensor_data20[256] = { 
    14064, 14064, 14064, 14064, 14064, 14064, 14064, 14064, 14064, 14064, 
    14064, 14064, 14064, 14064, 14064, 14064, -788, -739, -743, -720, 
    -758, -775, -798, -812, -785, -738, -761, -803, -766, -796, 
    -762, -841, 14064, 14064, 14064, 14064, 14064, 14064, 14064, 14064, 
    14064, 14064, 14064, 14064, 14064, 14064, 14064, 14064, -745, -768, 
    -770, -759, -762, -753, -777, -725, -778, -714, -800, -773, 
    -711, -750, -777, -787, 14064, 14064, 14064, 14064, 14064, 14064, 
    14064, 14064, 14064, 14064, 14064, 14064, 14064, 14064, 14064, 14064, 
    -679, -777, -765, -787, -712, -746, -822, -779, -777, -769, 
    -758, -742, -789, -773, -777, -792, 14064, 14064, 14064, 14064, 
    14064, 14064, 14064, 14064, 14064, 14064, 14064, 14064, 14064, 14064, 
    14064, 14064, -778, -793, -795, -701, -777, -828, -744, -707, 
    -763, -769, -727, -781, -791, -777, -801, -762, 14064, 14064, 
    14064, 14064, 14064, 14064, 14064, 14064, 14064, 14064, 14064, 14064, 
    14064, 14064, 14064, 14064, -764, -729, -769, -828, -761, -774, 
    -812, -769, -758, -795, -782, -754, -822, -764, -762, -816, 
    14064, 14064, 14064, 14064, 14064, 14064, 14064, 14064, 14064, 14064, 
    14064, 14064, 14064, 14064, 14064, 14064, -833, -780, -818, -755, 
    -741, -763, -816, -783, -788, -759, -830, -777, -797, -820, 
    -794, -768, 14064, 14064, 14064, 14064, 14064, 14064, 14064, 14064, 
    14064, 14064, 14064, 14064, 14064, 14064, 14064, 14064, -832, -789, 
    -745, -741, -768, -779, -763, -800, -811, -732, -792, -777, 
    -794, -807, -821, -750, 14064, 14064, 14064, 14064, 14064, 14064, 
    14064, 14064, 14064, 14064, 14064, 14064, 14064, 14064, 14064, 14064, 
    -794, -793, -794, -760, -730, -837, -756, -703, -777, -741, 
    -796, -760, -766, -813, -779, -758, 
};
const TfArray<1, int> tensor_dimension20 = { 1, { 256 } };
const ALIGN(8) int64_t tensor_data21[4] = { 
    1, 1, 1, 32, 
};
const TfArray<1, int> tensor_dimension21 = { 1, { 4 } };
const ALIGN(8) int64_t tensor_data22[2] = { 
    1, 1, 
};
const TfArray<1, int> tensor_dimension22 = { 1, { 2 } };
const TfArray<3, int> tensor_dimension23 = { 3, { 4,1,24 } };
const TfArray<1, float> quant23_scale = { 1, { 0.090375594794750214, } };
const TfArray<1, int> quant23_zero = { 1, { 127 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<2, int> tensor_dimension24 = { 2, { 1,24 } };
const TfArray<1, float> quant24_scale = { 1, { 0.090375594794750214, } };
const TfArray<1, int> quant24_zero = { 1, { 127 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<2, int> tensor_dimension25 = { 2, { 1,24 } };
const TfArray<1, float> quant25_scale = { 1, { 0.090375594794750214, } };
const TfArray<1, int> quant25_zero = { 1, { 127 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<2, int> tensor_dimension26 = { 2, { 1,24 } };
const TfArray<1, float> quant26_scale = { 1, { 0.090375594794750214, } };
const TfArray<1, int> quant26_zero = { 1, { 127 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<2, int> tensor_dimension27 = { 2, { 1,24 } };
const TfArray<1, float> quant27_scale = { 1, { 0.090375594794750214, } };
const TfArray<1, int> quant27_zero = { 1, { 127 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,128 } };
const TfArray<1, float> quant28_scale = { 1, { 0.4284636378288269, } };
const TfArray<1, int> quant28_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,128 } };
const TfArray<1, float> quant29_scale = { 1, { 0.4284636378288269, } };
const TfArray<1, int> quant29_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,128 } };
const TfArray<1, float> quant30_scale = { 1, { 0.42641991376876831, } };
const TfArray<1, int> quant30_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfArray<2, int> tensor_dimension31 = { 2, { 1,128 } };
const TfArray<1, float> quant31_scale = { 1, { 0.42504888772964478, } };
const TfArray<1, int> quant31_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const TfArray<2, int> tensor_dimension32 = { 2, { 1,128 } };
const TfArray<1, float> quant32_scale = { 1, { 0.018700240179896355, } };
const TfArray<1, int> quant32_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const TfArray<2, int> tensor_dimension33 = { 2, { 1,128 } };
const TfArray<1, float> quant33_scale = { 1, { 0.42796936631202698, } };
const TfArray<1, int> quant33_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(8) int8_t tensor_data34[128] = { 
    -107, -108, -103, -111, -83, -110, -114, -119, -95, -95, 
    -99, -116, -95, -100, -108, -101, -92, -105, -93, -106, 
    -102, -128, -88, -91, -92, -84, -115, -88, -110, -114, 
    -98, -85, 94, 93, 107, 91, 116, 87, 99, 89, 
    109, 104, 102, 79, 110, 93, 68, 98, 85, 87, 
    112, 84, 90, 88, 105, 96, 127, 126, 86, 118, 
    100, 88, 94, 102, -88, -104, -84, -100, -83, -101, 
    -114, -98, -98, -98, -100, -92, -89, -89, -114, -91, 
    -109, -94, -120, -110, -98, -89, -116, -106, -83, -90, 
    -87, -86, -111, -82, -105, -96, -112, -113, -84, -97, 
    -69, -99, -98, -99, -116, -76, -96, -122, -96, -93, 
    -101, -101, -102, -110, -96, -99, -110, -111, -114, -102, 
    -99, -85, -113, -91, -96, -95, -96, -117, 
};
const TfArray<1, int> tensor_dimension34 = { 1, { 128 } };
const TfArray<1, float> quant34_scale = { 1, { 0.0049977507442235947, } };
const TfArray<1, int> quant34_zero = { 1, { -99 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(8) int8_t tensor_data35[128] = { 
    -107, -108, -103, -111, -83, -110, -114, -119, -95, -95, 
    -99, -116, -95, -100, -108, -101, -92, -105, -93, -106, 
    -102, -128, -88, -91, -92, -84, -115, -88, -110, -114, 
    -98, -85, 94, 93, 107, 91, 116, 87, 99, 89, 
    109, 104, 102, 79, 110, 93, 68, 98, 85, 87, 
    112, 84, 90, 88, 105, 96, 127, 126, 86, 118, 
    100, 88, 94, 102, -88, -104, -84, -100, -83, -101, 
    -114, -98, -98, -98, -100, -92, -89, -89, -114, -91, 
    -109, -94, -120, -110, -98, -89, -116, -106, -83, -90, 
    -87, -86, -111, -82, -105, -96, -112, -113, -84, -97, 
    -69, -99, -98, -99, -116, -76, -96, -122, -96, -93, 
    -101, -101, -102, -110, -96, -99, -110, -111, -114, -102, 
    -99, -85, -113, -91, -96, -95, -96, -117, 
};
const TfArray<1, int> tensor_dimension35 = { 1, { 128 } };
const TfArray<1, float> quant35_scale = { 1, { 0.0049977507442235947, } };
const TfArray<1, int> quant35_zero = { 1, { -99 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const TfArray<2, int> tensor_dimension36 = { 2, { 1,128 } };
const TfArray<1, float> quant36_scale = { 1, { 0.42526647448539734, } };
const TfArray<1, int> quant36_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const TfArray<2, int> tensor_dimension37 = { 2, { 1,32 } };
const TfArray<1, float> quant37_scale = { 1, { 0.42526647448539734, } };
const TfArray<1, int> quant37_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const TfArray<2, int> tensor_dimension38 = { 2, { 1,32 } };
const TfArray<1, float> quant38_scale = { 1, { 0.42526647448539734, } };
const TfArray<1, int> quant38_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const TfArray<2, int> tensor_dimension39 = { 2, { 1,32 } };
const TfArray<1, float> quant39_scale = { 1, { 0.42526647448539734, } };
const TfArray<1, int> quant39_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const TfArray<2, int> tensor_dimension40 = { 2, { 1,32 } };
const TfArray<1, float> quant40_scale = { 1, { 0.42526647448539734, } };
const TfArray<1, int> quant40_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const TfArray<2, int> tensor_dimension41 = { 2, { 1,32 } };
const TfArray<1, float> quant41_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant41_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const TfArray<2, int> tensor_dimension42 = { 2, { 1,32 } };
const TfArray<1, float> quant42_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant42_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const TfArray<2, int> tensor_dimension43 = { 2, { 1,32 } };
const TfArray<1, float> quant43_scale = { 1, { 11.757076263427734, } };
const TfArray<1, int> quant43_zero = { 1, { 93 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<2, int> tensor_dimension44 = { 2, { 1,32 } };
const TfArray<1, float> quant44_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<2, int> tensor_dimension45 = { 2, { 1,32 } };
const TfArray<1, float> quant45_scale = { 1, { 0.0078125, } };
const TfArray<1, int> quant45_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<2, int> tensor_dimension46 = { 2, { 1,32 } };
const TfArray<1, float> quant46_scale = { 1, { 0.00784282386302948, } };
const TfArray<1, int> quant46_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<2, int> tensor_dimension47 = { 2, { 1,32 } };
const TfArray<1, float> quant47_scale = { 1, { 11.764379501342773, } };
const TfArray<1, int> quant47_zero = { 1, { 93 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<2, int> tensor_dimension48 = { 2, { 1,32 } };
const TfArray<1, float> quant48_scale = { 1, { 0.0078125, } };
const TfArray<1, int> quant48_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<2, int> tensor_dimension49 = { 2, { 1,32 } };
const TfArray<1, float> quant49_scale = { 1, { 0.0078431377187371254, } };
const TfArray<1, int> quant49_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<2, int> tensor_dimension50 = { 2, { 1,128 } };
const TfArray<1, float> quant50_scale = { 1, { 0.019211821258068085, } };
const TfArray<1, int> quant50_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<2, int> tensor_dimension51 = { 2, { 1,128 } };
const TfArray<1, float> quant51_scale = { 1, { 0.43154260516166687, } };
const TfArray<1, int> quant51_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<2, int> tensor_dimension52 = { 2, { 1,128 } };
const TfArray<1, float> quant52_scale = { 1, { 0.42883971333503723, } };
const TfArray<1, int> quant52_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<2, int> tensor_dimension53 = { 2, { 1,32 } };
const TfArray<1, float> quant53_scale = { 1, { 0.42883971333503723, } };
const TfArray<1, int> quant53_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<2, int> tensor_dimension54 = { 2, { 1,32 } };
const TfArray<1, float> quant54_scale = { 1, { 0.42883971333503723, } };
const TfArray<1, int> quant54_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<2, int> tensor_dimension55 = { 2, { 1,32 } };
const TfArray<1, float> quant55_scale = { 1, { 0.42883971333503723, } };
const TfArray<1, int> quant55_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<2, int> tensor_dimension56 = { 2, { 1,32 } };
const TfArray<1, float> quant56_scale = { 1, { 0.42883971333503723, } };
const TfArray<1, int> quant56_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<2, int> tensor_dimension57 = { 2, { 1,32 } };
const TfArray<1, float> quant57_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<2, int> tensor_dimension58 = { 2, { 1,32 } };
const TfArray<1, float> quant58_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<2, int> tensor_dimension59 = { 2, { 1,32 } };
const TfArray<1, float> quant59_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<2, int> tensor_dimension60 = { 2, { 1,32 } };
const TfArray<1, float> quant60_scale = { 1, { 0.0078125, } };
const TfArray<1, int> quant60_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<2, int> tensor_dimension61 = { 2, { 1,32 } };
const TfArray<1, float> quant61_scale = { 1, { 0.0078428555279970169, } };
const TfArray<1, int> quant61_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<2, int> tensor_dimension62 = { 2, { 1,32 } };
const TfArray<1, float> quant62_scale = { 1, { 11.762869834899902, } };
const TfArray<1, int> quant62_zero = { 1, { 93 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<2, int> tensor_dimension63 = { 2, { 1,32 } };
const TfArray<1, float> quant63_scale = { 1, { 11.770380020141602, } };
const TfArray<1, int> quant63_zero = { 1, { 93 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<2, int> tensor_dimension64 = { 2, { 1,32 } };
const TfArray<1, float> quant64_scale = { 1, { 0.0078125, } };
const TfArray<1, int> quant64_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<2, int> tensor_dimension65 = { 2, { 1,32 } };
const TfArray<1, float> quant65_scale = { 1, { 0.0078431377187371254, } };
const TfArray<1, int> quant65_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<2, int> tensor_dimension66 = { 2, { 1,128 } };
const TfArray<1, float> quant66_scale = { 1, { 0.01921665295958519, } };
const TfArray<1, int> quant66_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<2, int> tensor_dimension67 = { 2, { 1,128 } };
const TfArray<1, float> quant67_scale = { 1, { 0.42933046817779541, } };
const TfArray<1, int> quant67_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<2, int> tensor_dimension68 = { 2, { 1,128 } };
const TfArray<1, float> quant68_scale = { 1, { 0.42662760615348816, } };
const TfArray<1, int> quant68_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<2, int> tensor_dimension69 = { 2, { 1,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.42662760615348816, } };
const TfArray<1, int> quant69_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<2, int> tensor_dimension70 = { 2, { 1,32 } };
const TfArray<1, float> quant70_scale = { 1, { 0.42662760615348816, } };
const TfArray<1, int> quant70_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<2, int> tensor_dimension71 = { 2, { 1,32 } };
const TfArray<1, float> quant71_scale = { 1, { 0.42662760615348816, } };
const TfArray<1, int> quant71_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfArray<2, int> tensor_dimension72 = { 2, { 1,32 } };
const TfArray<1, float> quant72_scale = { 1, { 0.42662760615348816, } };
const TfArray<1, int> quant72_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant72 = { (TfLiteFloatArray*)&quant72_scale, (TfLiteIntArray*)&quant72_zero, 0 };
const TfArray<2, int> tensor_dimension73 = { 2, { 1,32 } };
const TfArray<1, float> quant73_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant73_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant73 = { (TfLiteFloatArray*)&quant73_scale, (TfLiteIntArray*)&quant73_zero, 0 };
const TfArray<2, int> tensor_dimension74 = { 2, { 1,32 } };
const TfArray<1, float> quant74_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant74_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant74 = { (TfLiteFloatArray*)&quant74_scale, (TfLiteIntArray*)&quant74_zero, 0 };
const TfArray<2, int> tensor_dimension75 = { 2, { 1,32 } };
const TfArray<1, float> quant75_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant75_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant75 = { (TfLiteFloatArray*)&quant75_scale, (TfLiteIntArray*)&quant75_zero, 0 };
const TfArray<2, int> tensor_dimension76 = { 2, { 1,32 } };
const TfArray<1, float> quant76_scale = { 1, { 0.0078125, } };
const TfArray<1, int> quant76_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant76 = { (TfLiteFloatArray*)&quant76_scale, (TfLiteIntArray*)&quant76_zero, 0 };
const TfArray<2, int> tensor_dimension77 = { 2, { 1,32 } };
const TfArray<1, float> quant77_scale = { 1, { 0.00784284807741642, } };
const TfArray<1, int> quant77_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant77 = { (TfLiteFloatArray*)&quant77_scale, (TfLiteIntArray*)&quant77_zero, 0 };
const TfArray<2, int> tensor_dimension78 = { 2, { 1,32 } };
const TfArray<1, float> quant78_scale = { 1, { 11.763771057128906, } };
const TfArray<1, int> quant78_zero = { 1, { 93 } };
const TfLiteAffineQuantization quant78 = { (TfLiteFloatArray*)&quant78_scale, (TfLiteIntArray*)&quant78_zero, 0 };
const TfArray<2, int> tensor_dimension79 = { 2, { 1,32 } };
const TfArray<1, float> quant79_scale = { 1, { 11.771059989929199, } };
const TfArray<1, int> quant79_zero = { 1, { 93 } };
const TfLiteAffineQuantization quant79 = { (TfLiteFloatArray*)&quant79_scale, (TfLiteIntArray*)&quant79_zero, 0 };
const TfArray<2, int> tensor_dimension80 = { 2, { 1,32 } };
const TfArray<1, float> quant80_scale = { 1, { 0.0078125, } };
const TfArray<1, int> quant80_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant80 = { (TfLiteFloatArray*)&quant80_scale, (TfLiteIntArray*)&quant80_zero, 0 };
const TfArray<2, int> tensor_dimension81 = { 2, { 1,32 } };
const TfArray<1, float> quant81_scale = { 1, { 0.0078431377187371254, } };
const TfArray<1, int> quant81_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant81 = { (TfLiteFloatArray*)&quant81_scale, (TfLiteIntArray*)&quant81_zero, 0 };
const TfArray<2, int> tensor_dimension82 = { 2, { 1,128 } };
const TfArray<1, float> quant82_scale = { 1, { 0.019400795921683311, } };
const TfArray<1, int> quant82_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant82 = { (TfLiteFloatArray*)&quant82_scale, (TfLiteIntArray*)&quant82_zero, 0 };
const TfArray<2, int> tensor_dimension83 = { 2, { 1,128 } };
const TfArray<1, float> quant83_scale = { 1, { 0.42770636081695557, } };
const TfArray<1, int> quant83_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant83 = { (TfLiteFloatArray*)&quant83_scale, (TfLiteIntArray*)&quant83_zero, 0 };
const TfArray<2, int> tensor_dimension84 = { 2, { 1,128 } };
const TfArray<1, float> quant84_scale = { 1, { 0.42500346899032593, } };
const TfArray<1, int> quant84_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant84 = { (TfLiteFloatArray*)&quant84_scale, (TfLiteIntArray*)&quant84_zero, 0 };
const TfArray<2, int> tensor_dimension85 = { 2, { 1,32 } };
const TfArray<1, float> quant85_scale = { 1, { 0.42500346899032593, } };
const TfArray<1, int> quant85_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant85 = { (TfLiteFloatArray*)&quant85_scale, (TfLiteIntArray*)&quant85_zero, 0 };
const TfArray<2, int> tensor_dimension86 = { 2, { 1,32 } };
const TfArray<1, float> quant86_scale = { 1, { 0.42500346899032593, } };
const TfArray<1, int> quant86_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant86 = { (TfLiteFloatArray*)&quant86_scale, (TfLiteIntArray*)&quant86_zero, 0 };
const TfArray<2, int> tensor_dimension87 = { 2, { 1,32 } };
const TfArray<1, float> quant87_scale = { 1, { 0.42500346899032593, } };
const TfArray<1, int> quant87_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant87 = { (TfLiteFloatArray*)&quant87_scale, (TfLiteIntArray*)&quant87_zero, 0 };
const TfArray<2, int> tensor_dimension88 = { 2, { 1,32 } };
const TfArray<1, float> quant88_scale = { 1, { 0.42500346899032593, } };
const TfArray<1, int> quant88_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant88 = { (TfLiteFloatArray*)&quant88_scale, (TfLiteIntArray*)&quant88_zero, 0 };
const TfArray<2, int> tensor_dimension89 = { 2, { 1,32 } };
const TfArray<1, float> quant89_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant89_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant89 = { (TfLiteFloatArray*)&quant89_scale, (TfLiteIntArray*)&quant89_zero, 0 };
const TfArray<2, int> tensor_dimension90 = { 2, { 1,32 } };
const TfArray<1, float> quant90_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant90_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant90 = { (TfLiteFloatArray*)&quant90_scale, (TfLiteIntArray*)&quant90_zero, 0 };
const TfArray<2, int> tensor_dimension91 = { 2, { 1,32 } };
const TfArray<1, float> quant91_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant91_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant91 = { (TfLiteFloatArray*)&quant91_scale, (TfLiteIntArray*)&quant91_zero, 0 };
const TfArray<2, int> tensor_dimension92 = { 2, { 1,32 } };
const TfArray<1, float> quant92_scale = { 1, { 0.0078125, } };
const TfArray<1, int> quant92_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant92 = { (TfLiteFloatArray*)&quant92_scale, (TfLiteIntArray*)&quant92_zero, 0 };
const TfArray<2, int> tensor_dimension93 = { 2, { 1,32 } };
const TfArray<1, float> quant93_scale = { 1, { 0.0078428471460938454, } };
const TfArray<1, int> quant93_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant93 = { (TfLiteFloatArray*)&quant93_scale, (TfLiteIntArray*)&quant93_zero, 0 };
const TfArray<2, int> tensor_dimension94 = { 2, { 1,32 } };
const TfArray<1, float> quant94_scale = { 1, { 11.76811695098877, } };
const TfArray<1, int> quant94_zero = { 1, { 93 } };
const TfLiteAffineQuantization quant94 = { (TfLiteFloatArray*)&quant94_scale, (TfLiteIntArray*)&quant94_zero, 0 };
const TfArray<2, int> tensor_dimension95 = { 2, { 1,32 } };
const TfArray<1, float> quant95_scale = { 1, { 11.775542259216309, } };
const TfArray<1, int> quant95_zero = { 1, { 93 } };
const TfLiteAffineQuantization quant95 = { (TfLiteFloatArray*)&quant95_scale, (TfLiteIntArray*)&quant95_zero, 0 };
const TfArray<2, int> tensor_dimension96 = { 2, { 1,32 } };
const TfArray<1, float> quant96_scale = { 1, { 0.0078125, } };
const TfArray<1, int> quant96_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant96 = { (TfLiteFloatArray*)&quant96_scale, (TfLiteIntArray*)&quant96_zero, 0 };
const TfArray<2, int> tensor_dimension97 = { 2, { 1,32 } };
const TfArray<1, float> quant97_scale = { 1, { 0.0078431377187371254, } };
const TfArray<1, int> quant97_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant97 = { (TfLiteFloatArray*)&quant97_scale, (TfLiteIntArray*)&quant97_zero, 0 };
const ALIGN(4) int32_t tensor_data98[1] = { 
    1675, 
};
const TfArray<1, int> tensor_dimension98 = { 1, { 1 } };
const TfArray<1, float> quant98_scale = { 1, { 2.2273639842751436e-05, } };
const TfArray<1, int> quant98_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant98 = { (TfLiteFloatArray*)&quant98_scale, (TfLiteIntArray*)&quant98_zero, 0 };
const TfArray<4, int> tensor_dimension99 = { 4, { 1,1,1,32 } };
const TfArray<1, float> quant99_scale = { 1, { 0.0078431377187371254, } };
const TfArray<1, int> quant99_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant99 = { (TfLiteFloatArray*)&quant99_scale, (TfLiteIntArray*)&quant99_zero, 0 };
const ALIGN(8) int8_t tensor_data100[1*1*1*32] = { 
  /* [0][0][][] */ 99,117,-13,-41,-3,-33,41,62,48,13,82,-59,-59,-33,99,-98,-73,34,16,-74,127,-106,27,-25,-45,-30,-45,-92,9,-62,-123,-32, 
};
const TfArray<4, int> tensor_dimension100 = { 4, { 1,1,1,32 } };
const TfArray<1, float> quant100_scale = { 1, { 0.0028398889116942883, } };
const TfArray<1, int> quant100_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant100 = { (TfLiteFloatArray*)&quant100_scale, (TfLiteIntArray*)&quant100_zero, 0 };
const TfArray<4, int> tensor_dimension101 = { 4, { 1,1,1,1 } };
const TfArray<1, float> quant101_scale = { 1, { 0.013530454598367214, } };
const TfArray<1, int> quant101_zero = { 1, { -45 } };
const TfLiteAffineQuantization quant101 = { (TfLiteFloatArray*)&quant101_scale, (TfLiteIntArray*)&quant101_zero, 0 };
const TfArray<2, int> tensor_dimension102 = { 2, { 1,1 } };
const TfArray<1, float> quant102_scale = { 1, { 0.013530454598367214, } };
const TfArray<1, int> quant102_zero = { 1, { -45 } };
const TfLiteAffineQuantization quant102 = { (TfLiteFloatArray*)&quant102_scale, (TfLiteIntArray*)&quant102_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 1,3 } };
const TfArray<1, int> outputs0 = { 1, { 23 } };
const ALIGN(4) uint8_t opdata1[8] = { 4, 0, 0, 0, 0, 0, 0, 0,  }; /* op type 88=UNPACK */
const TfArray<1, int> inputs1 = { 1, { 23 } };
const TfArray<4, int> outputs1 = { 4, { 24,25,26,27 } };
uint8_t ALIGN(4) opdata2[150] = { 107, 116, 0, 109, 112, 0, 32, 24, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 248, 255, 255, 255, 0, 0, 0, 0, 0, 97, 103, 103, 112, 0, 8, 128, 0, 0, 0, 24, 0, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 3, 0, 255, 255, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 7, 83, 43, 125, 123, 72, 59, 56, 7, 1, 7, 87, 14, 1, 129, 77, 0, 64, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs2 = { 3, { 24,12,13 } };
const TfArray<1, int> outputs2 = { 1, { 28 } };
uint8_t ALIGN(4) opdata3[150] = { 107, 116, 0, 109, 112, 0, 32, 24, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 248, 255, 255, 255, 0, 0, 0, 0, 0, 97, 103, 103, 112, 0, 8, 128, 0, 0, 0, 24, 0, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 3, 0, 255, 255, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 7, 83, 43, 125, 123, 72, 59, 56, 7, 1, 7, 87, 14, 1, 129, 77, 0, 64, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs3 = { 3, { 25,12,13 } };
const TfArray<1, int> outputs3 = { 1, { 29 } };
uint8_t ALIGN(4) opdata4[150] = { 107, 116, 0, 109, 112, 0, 32, 24, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 248, 255, 255, 255, 0, 0, 0, 0, 0, 97, 103, 103, 112, 0, 8, 128, 0, 0, 0, 24, 0, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 3, 0, 255, 255, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 7, 83, 43, 125, 123, 72, 59, 56, 7, 1, 7, 87, 14, 1, 129, 77, 0, 64, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs4 = { 3, { 26,12,14 } };
const TfArray<1, int> outputs4 = { 1, { 30 } };
uint8_t ALIGN(4) opdata5[150] = { 107, 116, 0, 109, 112, 0, 32, 24, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 248, 255, 255, 255, 0, 0, 0, 0, 0, 97, 103, 103, 112, 0, 8, 128, 0, 0, 0, 24, 0, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 3, 0, 0, 0, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 7, 83, 43, 125, 123, 72, 59, 56, 7, 1, 7, 87, 14, 1, 129, 77, 0, 64, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs5 = { 3, { 27,12,15 } };
const TfArray<1, int> outputs5 = { 1, { 31 } };
uint8_t ALIGN(4) opdata6[142] = { 107, 116, 0, 109, 112, 0, 8, 32, 0, 0, 0, 32, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 2, 0, 255, 255, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 7, 99, 43, 117, 115, 72, 59, 56, 7, 1, 7, 103, 14, 0, 121, 77, 0, 0, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs6 = { 3, { 0,16,17 } };
const TfArray<1, int> outputs6 = { 1, { 32 } };
const TfLiteAddParams opdata7 = { kTfLiteActNone };
const TfArray<2, int> inputs7 = { 2, { 28,32 } };
const TfArray<1, int> outputs7 = { 1, { 33 } };
const TfLiteAddParams opdata8 = { kTfLiteActNone };
const TfArray<2, int> inputs8 = { 2, { 33,34 } };
const TfArray<1, int> outputs8 = { 1, { 36 } };
const ALIGN(4) uint8_t opdata9[4] = { 4, 0, 0, 0,  }; /* op type 49=SPLIT */
const TfArray<2, int> inputs9 = { 2, { 4,36 } };
const TfArray<4, int> outputs9 = { 4, { 37,38,39,40 } };
uint8_t ALIGN(4) opdata10[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs10 = { 2, { 37,5 } };
const TfArray<1, int> outputs10 = { 1, { 41 } };
uint8_t ALIGN(4) opdata11[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs11 = { 2, { 38,5 } };
const TfArray<1, int> outputs11 = { 1, { 42 } };
const TfLiteMulParams opdata12 = { kTfLiteActNone };
const TfArray<2, int> inputs12 = { 2, { 42,2 } };
const TfArray<1, int> outputs12 = { 1, { 43 } };
uint8_t ALIGN(4) opdata13[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs13 = { 2, { 40,5 } };
const TfArray<1, int> outputs13 = { 1, { 44 } };
uint8_t ALIGN(4) opdata14[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs14 = { 2, { 39,6 } };
const TfArray<1, int> outputs14 = { 1, { 45 } };
const TfLiteMulParams opdata15 = { kTfLiteActNone };
const TfArray<2, int> inputs15 = { 2, { 41,45 } };
const TfArray<1, int> outputs15 = { 1, { 46 } };
const TfLiteAddParams opdata16 = { kTfLiteActNone };
const TfArray<2, int> inputs16 = { 2, { 43,46 } };
const TfArray<1, int> outputs16 = { 1, { 47 } };
uint8_t ALIGN(4) opdata17[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs17 = { 2, { 47,7 } };
const TfArray<1, int> outputs17 = { 1, { 48 } };
const TfLiteMulParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 44,48 } };
const TfArray<1, int> outputs18 = { 1, { 49 } };
uint8_t ALIGN(4) opdata19[142] = { 107, 116, 0, 109, 112, 0, 8, 32, 0, 0, 0, 32, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 2, 0, 255, 255, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 7, 99, 43, 117, 115, 72, 59, 56, 7, 1, 7, 103, 14, 0, 121, 77, 0, 0, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs19 = { 3, { 49,16,18 } };
const TfArray<1, int> outputs19 = { 1, { 50 } };
const TfLiteAddParams opdata20 = { kTfLiteActNone };
const TfArray<2, int> inputs20 = { 2, { 29,50 } };
const TfArray<1, int> outputs20 = { 1, { 51 } };
const TfLiteAddParams opdata21 = { kTfLiteActNone };
const TfArray<2, int> inputs21 = { 2, { 51,34 } };
const TfArray<1, int> outputs21 = { 1, { 52 } };
const ALIGN(4) uint8_t opdata22[4] = { 4, 0, 0, 0,  }; /* op type 49=SPLIT */
const TfArray<2, int> inputs22 = { 2, { 4,52 } };
const TfArray<4, int> outputs22 = { 4, { 53,54,55,56 } };
uint8_t ALIGN(4) opdata23[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs23 = { 2, { 53,8 } };
const TfArray<1, int> outputs23 = { 1, { 57 } };
uint8_t ALIGN(4) opdata24[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs24 = { 2, { 54,8 } };
const TfArray<1, int> outputs24 = { 1, { 58 } };
uint8_t ALIGN(4) opdata25[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs25 = { 2, { 56,8 } };
const TfArray<1, int> outputs25 = { 1, { 59 } };
uint8_t ALIGN(4) opdata26[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs26 = { 2, { 55,9 } };
const TfArray<1, int> outputs26 = { 1, { 60 } };
const TfLiteMulParams opdata27 = { kTfLiteActNone };
const TfArray<2, int> inputs27 = { 2, { 57,60 } };
const TfArray<1, int> outputs27 = { 1, { 61 } };
const TfLiteMulParams opdata28 = { kTfLiteActNone };
const TfArray<2, int> inputs28 = { 2, { 58,47 } };
const TfArray<1, int> outputs28 = { 1, { 62 } };
const TfLiteAddParams opdata29 = { kTfLiteActNone };
const TfArray<2, int> inputs29 = { 2, { 62,61 } };
const TfArray<1, int> outputs29 = { 1, { 63 } };
uint8_t ALIGN(4) opdata30[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs30 = { 2, { 63,7 } };
const TfArray<1, int> outputs30 = { 1, { 64 } };
const TfLiteMulParams opdata31 = { kTfLiteActNone };
const TfArray<2, int> inputs31 = { 2, { 59,64 } };
const TfArray<1, int> outputs31 = { 1, { 65 } };
uint8_t ALIGN(4) opdata32[142] = { 107, 116, 0, 109, 112, 0, 8, 32, 0, 0, 0, 32, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 2, 0, 255, 255, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 7, 99, 43, 117, 115, 72, 59, 56, 7, 1, 7, 103, 14, 0, 121, 77, 0, 0, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs32 = { 3, { 65,16,19 } };
const TfArray<1, int> outputs32 = { 1, { 66 } };
const TfLiteAddParams opdata33 = { kTfLiteActNone };
const TfArray<2, int> inputs33 = { 2, { 30,66 } };
const TfArray<1, int> outputs33 = { 1, { 67 } };
const TfLiteAddParams opdata34 = { kTfLiteActNone };
const TfArray<2, int> inputs34 = { 2, { 67,34 } };
const TfArray<1, int> outputs34 = { 1, { 68 } };
const ALIGN(4) uint8_t opdata35[4] = { 4, 0, 0, 0,  }; /* op type 49=SPLIT */
const TfArray<2, int> inputs35 = { 2, { 4,68 } };
const TfArray<4, int> outputs35 = { 4, { 69,70,71,72 } };
uint8_t ALIGN(4) opdata36[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs36 = { 2, { 69,10 } };
const TfArray<1, int> outputs36 = { 1, { 73 } };
uint8_t ALIGN(4) opdata37[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs37 = { 2, { 70,10 } };
const TfArray<1, int> outputs37 = { 1, { 74 } };
uint8_t ALIGN(4) opdata38[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs38 = { 2, { 72,10 } };
const TfArray<1, int> outputs38 = { 1, { 75 } };
uint8_t ALIGN(4) opdata39[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs39 = { 2, { 71,11 } };
const TfArray<1, int> outputs39 = { 1, { 76 } };
const TfLiteMulParams opdata40 = { kTfLiteActNone };
const TfArray<2, int> inputs40 = { 2, { 73,76 } };
const TfArray<1, int> outputs40 = { 1, { 77 } };
const TfLiteMulParams opdata41 = { kTfLiteActNone };
const TfArray<2, int> inputs41 = { 2, { 74,63 } };
const TfArray<1, int> outputs41 = { 1, { 78 } };
const TfLiteAddParams opdata42 = { kTfLiteActNone };
const TfArray<2, int> inputs42 = { 2, { 78,77 } };
const TfArray<1, int> outputs42 = { 1, { 79 } };
uint8_t ALIGN(4) opdata43[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs43 = { 2, { 79,7 } };
const TfArray<1, int> outputs43 = { 1, { 80 } };
const TfLiteMulParams opdata44 = { kTfLiteActNone };
const TfArray<2, int> inputs44 = { 2, { 75,80 } };
const TfArray<1, int> outputs44 = { 1, { 81 } };
uint8_t ALIGN(4) opdata45[142] = { 107, 116, 0, 109, 112, 0, 8, 32, 0, 0, 0, 32, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 2, 0, 255, 255, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 7, 99, 43, 117, 115, 72, 59, 56, 7, 1, 7, 103, 14, 0, 121, 77, 0, 0, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs45 = { 3, { 81,16,20 } };
const TfArray<1, int> outputs45 = { 1, { 82 } };
const TfLiteAddParams opdata46 = { kTfLiteActNone };
const TfArray<2, int> inputs46 = { 2, { 31,82 } };
const TfArray<1, int> outputs46 = { 1, { 83 } };
const TfLiteAddParams opdata47 = { kTfLiteActNone };
const TfArray<2, int> inputs47 = { 2, { 83,35 } };
const TfArray<1, int> outputs47 = { 1, { 84 } };
const ALIGN(4) uint8_t opdata48[4] = { 4, 0, 0, 0,  }; /* op type 49=SPLIT */
const TfArray<2, int> inputs48 = { 2, { 4,84 } };
const TfArray<4, int> outputs48 = { 4, { 85,86,87,88 } };
uint8_t ALIGN(4) opdata49[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs49 = { 2, { 86,5 } };
const TfArray<1, int> outputs49 = { 1, { 89 } };
uint8_t ALIGN(4) opdata50[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs50 = { 2, { 88,5 } };
const TfArray<1, int> outputs50 = { 1, { 90 } };
uint8_t ALIGN(4) opdata51[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs51 = { 2, { 85,5 } };
const TfArray<1, int> outputs51 = { 1, { 91 } };
uint8_t ALIGN(4) opdata52[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs52 = { 2, { 87,6 } };
const TfArray<1, int> outputs52 = { 1, { 92 } };
const TfLiteMulParams opdata53 = { kTfLiteActNone };
const TfArray<2, int> inputs53 = { 2, { 91,92 } };
const TfArray<1, int> outputs53 = { 1, { 93 } };
const TfLiteMulParams opdata54 = { kTfLiteActNone };
const TfArray<2, int> inputs54 = { 2, { 89,79 } };
const TfArray<1, int> outputs54 = { 1, { 94 } };
const TfLiteAddParams opdata55 = { kTfLiteActNone };
const TfArray<2, int> inputs55 = { 2, { 94,93 } };
const TfArray<1, int> outputs55 = { 1, { 95 } };
uint8_t ALIGN(4) opdata56[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs56 = { 2, { 95,7 } };
const TfArray<1, int> outputs56 = { 1, { 96 } };
const TfLiteMulParams opdata57 = { kTfLiteActNone };
const TfArray<2, int> inputs57 = { 2, { 90,96 } };
const TfArray<1, int> outputs57 = { 1, { 97 } };
const TfLiteReshapeParams opdata58 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs58 = { 2, { 97,21 } };
const TfArray<1, int> outputs58 = { 1, { 99 } };
const TfLiteConvParams opdata59 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs59 = { 3, { 99,100,98 } };
const TfArray<1, int> outputs59 = { 1, { 101 } };
const TfLiteReshapeParams opdata60 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs60 = { 2, { 101,22 } };
const TfArray<1, int> outputs60 = { 1, { 102 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteInt8, tensor_arena + 224, (TfLiteIntArray*)&tensor_dimension0, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0)) },},
  { kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension1, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1)) },},
  { kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2)) },},
  { kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 12, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 4, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 3200, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 512, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 512, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 512, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 4096, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 512, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 512, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 512, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 512, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt64, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 32, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt64, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 16, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension23, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23)) },},
  { kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension24, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24)) },},
  { kTfLiteInt8, tensor_arena + 160, (TfLiteIntArray*)&tensor_dimension25, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension26, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26)) },},
  { kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension27, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27)) },},
  { kTfLiteInt8, tensor_arena + 640, (TfLiteIntArray*)&tensor_dimension28, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28)) },},
  { kTfLiteInt8, tensor_arena + 512, (TfLiteIntArray*)&tensor_dimension29, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29)) },},
  { kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension30, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30)) },},
  { kTfLiteInt8, tensor_arena + 256, (TfLiteIntArray*)&tensor_dimension31, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension32, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension33, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33)) },},
  { kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34)) },},
  { kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension36, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36)) },},
  { kTfLiteInt8, tensor_arena + 640, (TfLiteIntArray*)&tensor_dimension37, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37)) },},
  { kTfLiteInt8, tensor_arena + 224, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38)) },},
  { kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension39, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39)) },},
  { kTfLiteInt8, tensor_arena + 160, (TfLiteIntArray*)&tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension41, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42)) },},
  { kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension43, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43)) },},
  { kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension44, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44)) },},
  { kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension45, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension46, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46)) },},
  { kTfLiteInt8, tensor_arena + 640, (TfLiteIntArray*)&tensor_dimension47, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension49, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension50, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension51, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52)) },},
  { kTfLiteInt8, tensor_arena + 512, (TfLiteIntArray*)&tensor_dimension53, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53)) },},
  { kTfLiteInt8, tensor_arena + 224, (TfLiteIntArray*)&tensor_dimension54, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54)) },},
  { kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension55, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55)) },},
  { kTfLiteInt8, tensor_arena + 160, (TfLiteIntArray*)&tensor_dimension56, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension57, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57)) },},
  { kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension58, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58)) },},
  { kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension59, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60)) },},
  { kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension61, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension62, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62)) },},
  { kTfLiteInt8, tensor_arena + 512, (TfLiteIntArray*)&tensor_dimension63, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension65, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension66, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension67, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension68, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68)) },},
  { kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension69, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69)) },},
  { kTfLiteInt8, tensor_arena + 224, (TfLiteIntArray*)&tensor_dimension70, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70)) },},
  { kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension71, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant71)) },},
  { kTfLiteInt8, tensor_arena + 160, (TfLiteIntArray*)&tensor_dimension72, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant72)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension73, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant73)) },},
  { kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension74, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant74)) },},
  { kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension75, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant75)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension76, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant76)) },},
  { kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension77, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant77)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension78, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant78)) },},
  { kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension79, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant79)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension80, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant80)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension81, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant81)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension82, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant82)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension83, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant83)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension84, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant84)) },},
  { kTfLiteInt8, tensor_arena + 256, (TfLiteIntArray*)&tensor_dimension85, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant85)) },},
  { kTfLiteInt8, tensor_arena + 224, (TfLiteIntArray*)&tensor_dimension86, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant86)) },},
  { kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension87, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant87)) },},
  { kTfLiteInt8, tensor_arena + 160, (TfLiteIntArray*)&tensor_dimension88, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant88)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension89, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant89)) },},
  { kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension90, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant90)) },},
  { kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension91, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant91)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension92, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant92)) },},
  { kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension93, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant93)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension94, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant94)) },},
  { kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension95, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant95)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension96, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant96)) },},
  { kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension97, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant97)) },},
  { kTfLiteInt32, (void*)tensor_data98, (TfLiteIntArray*)&tensor_dimension98, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant98)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension99, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant99)) },},
  { kTfLiteInt8, (void*)tensor_data100, (TfLiteIntArray*)&tensor_dimension100, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant100)) },},
  { kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension101, 1, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant101)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension102, 1, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant102)) },},
};
const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, 0, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_UNPACK, 0, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_XC_conv2d_v2, 150, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_XC_conv2d_v2, 150, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_XC_conv2d_v2, 150, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_XC_conv2d_v2, 150, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_XC_conv2d_v2, 142, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_SPLIT, 0, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_XC_conv2d_v2, 142, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_SPLIT, 0, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, const_cast<void*>(static_cast<const void*>(&opdata27)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs28, (TfLiteIntArray*)&outputs28, const_cast<void*>(static_cast<const void*>(&opdata28)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs29, (TfLiteIntArray*)&outputs29, const_cast<void*>(static_cast<const void*>(&opdata29)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs30, (TfLiteIntArray*)&outputs30, const_cast<void*>(static_cast<const void*>(&opdata30)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs31, (TfLiteIntArray*)&outputs31, const_cast<void*>(static_cast<const void*>(&opdata31)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs32, (TfLiteIntArray*)&outputs32, const_cast<void*>(static_cast<const void*>(&opdata32)), OP_XC_conv2d_v2, 142, },
  { (TfLiteIntArray*)&inputs33, (TfLiteIntArray*)&outputs33, const_cast<void*>(static_cast<const void*>(&opdata33)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs34, (TfLiteIntArray*)&outputs34, const_cast<void*>(static_cast<const void*>(&opdata34)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs35, (TfLiteIntArray*)&outputs35, const_cast<void*>(static_cast<const void*>(&opdata35)), OP_SPLIT, 0, },
  { (TfLiteIntArray*)&inputs36, (TfLiteIntArray*)&outputs36, const_cast<void*>(static_cast<const void*>(&opdata36)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs37, (TfLiteIntArray*)&outputs37, const_cast<void*>(static_cast<const void*>(&opdata37)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs38, (TfLiteIntArray*)&outputs38, const_cast<void*>(static_cast<const void*>(&opdata38)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs39, (TfLiteIntArray*)&outputs39, const_cast<void*>(static_cast<const void*>(&opdata39)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs40, (TfLiteIntArray*)&outputs40, const_cast<void*>(static_cast<const void*>(&opdata40)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs41, (TfLiteIntArray*)&outputs41, const_cast<void*>(static_cast<const void*>(&opdata41)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs42, (TfLiteIntArray*)&outputs42, const_cast<void*>(static_cast<const void*>(&opdata42)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs43, (TfLiteIntArray*)&outputs43, const_cast<void*>(static_cast<const void*>(&opdata43)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs44, (TfLiteIntArray*)&outputs44, const_cast<void*>(static_cast<const void*>(&opdata44)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs45, (TfLiteIntArray*)&outputs45, const_cast<void*>(static_cast<const void*>(&opdata45)), OP_XC_conv2d_v2, 142, },
  { (TfLiteIntArray*)&inputs46, (TfLiteIntArray*)&outputs46, const_cast<void*>(static_cast<const void*>(&opdata46)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs47, (TfLiteIntArray*)&outputs47, const_cast<void*>(static_cast<const void*>(&opdata47)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs48, (TfLiteIntArray*)&outputs48, const_cast<void*>(static_cast<const void*>(&opdata48)), OP_SPLIT, 0, },
  { (TfLiteIntArray*)&inputs49, (TfLiteIntArray*)&outputs49, const_cast<void*>(static_cast<const void*>(&opdata49)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs50, (TfLiteIntArray*)&outputs50, const_cast<void*>(static_cast<const void*>(&opdata50)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs51, (TfLiteIntArray*)&outputs51, const_cast<void*>(static_cast<const void*>(&opdata51)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs52, (TfLiteIntArray*)&outputs52, const_cast<void*>(static_cast<const void*>(&opdata52)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs53, (TfLiteIntArray*)&outputs53, const_cast<void*>(static_cast<const void*>(&opdata53)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs54, (TfLiteIntArray*)&outputs54, const_cast<void*>(static_cast<const void*>(&opdata54)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs55, (TfLiteIntArray*)&outputs55, const_cast<void*>(static_cast<const void*>(&opdata55)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs56, (TfLiteIntArray*)&outputs56, const_cast<void*>(static_cast<const void*>(&opdata56)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs57, (TfLiteIntArray*)&outputs57, const_cast<void*>(static_cast<const void*>(&opdata57)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs58, (TfLiteIntArray*)&outputs58, const_cast<void*>(static_cast<const void*>(&opdata58)), OP_RESHAPE, 0, },
  { (TfLiteIntArray*)&inputs59, (TfLiteIntArray*)&outputs59, const_cast<void*>(static_cast<const void*>(&opdata59)), OP_CONV_2D, 0, },
  { (TfLiteIntArray*)&inputs60, (TfLiteIntArray*)&outputs60, const_cast<void*>(static_cast<const void*>(&opdata60)), OP_RESHAPE, 0, },
};

// Scratch buffer variables
int scratch_buffer_idx = 0;
const int scratch_buffer_offsets[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
tflite::MicroContext mc;

// Xcore context and thread variables
xc_context_config_t xc_config;
constexpr int kStackWordsPerThread = 256;
uint64_t xc_stack[kStackWordsPerThread/2];

// Functions to be used as function pointers for TfLiteContext and MicroContext 
static void* AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes) {
  static uint8_t *AllocPtr = tensor_arena + sizeof(tensor_arena);

  AllocPtr -= bytes;
  return AllocPtr;
}

static TfLiteEvalTensor *GetEvalTensor(const struct TfLiteContext *context,
                                       int tensor_idx) {
  return &evalTensors[tensor_idx];
}

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext *context, size_t bytes,
                                       int *buffer_idx) {
  *buffer_idx = scratch_buffer_idx++;
  return kTfLiteOk;
};

static void *GetScratchBuffer(struct TfLiteContext *context,
                                       int buffer_idx) {
  return tensor_arena + scratch_buffer_offsets[buffer_idx];
}

static TfLiteTensor* AllocateTempInputTensor(const TfLiteNode* node, int index) {
      return &ctx.tensors[node->inputs->data[index]];
}

static TfLiteTensor* AllocateTempOutputTensor(const TfLiteNode* node, int index) {
      return &ctx.tensors[node->outputs->data[index]];
}

static void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
}

static void* external_context() {
  return &xc_config;
}

} // namespace

TfLiteStatus model_init(void *flash_data) {
  // Set flash data in xcore context config
  xc_config.flash_data = flash_data;

  // Setup microcontext functions
  mc.AllocateTempInputTensor = &AllocateTempInputTensor;
  mc.AllocateTempOutputTensor = &AllocateTempOutputTensor;
  mc.DeallocateTempTfLiteTensor = &DeallocateTempTfLiteTensor;
  mc.external_context = &external_context;

  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  
  // Set microcontext as the context ptr
  ctx.impl_ = (void*)&mc;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 103;
  for(size_t i = 0; i < 103; ++i) {
    tflTensors[i].data.data = tensorData[i].data;
    evalTensors[i].data.data = tensorData[i].data;
    tflTensors[i].type = tensorData[i].type;
    evalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    evalTensors[i].dims = tensorData[i].dims;
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
  }
  registrations[OP_RESHAPE] = tflite::ops::micro::Register_RESHAPE();
  registrations[OP_UNPACK] = tflite::ops::micro::Register_UNPACK();
  registrations[OP_XC_conv2d_v2] = *(tflite::ops::micro::xcore::Register_XC_conv2d_v2());
  registrations[OP_ADD] = tflite::Register_ADD();
  registrations[OP_SPLIT] = tflite::ops::micro::Register_SPLIT();
  registrations[OP_XC_lookup] = *(tflite::ops::micro::xcore::Register_XC_lookup());
  registrations[OP_MUL] = tflite::Register_MUL();
  registrations[OP_CONV_2D] = tflite::Register_CONV_2D();

  for(size_t i = 0; i < 61; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, nodeData[i].custom_initial_data_size);
    }
  }
  for(size_t i = 0; i < 61; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 1, 2, 
};
TfLiteTensor* model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  97, 95, 102, 
};
TfLiteTensor* model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus model_invoke() {
  thread_init_1(&xc_config.thread_info);
  xc_config.thread_info.nstackwords = kStackWordsPerThread;
  xc_config.thread_info.stacks = &xc_stack[kStackWordsPerThread/2 - 1];
  for(size_t i = 0; i < 61; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      thread_destroy(&xc_config.thread_info);
      return status;
    }
  }
  thread_destroy(&xc_config.thread_info);
  return kTfLiteOk;
}
