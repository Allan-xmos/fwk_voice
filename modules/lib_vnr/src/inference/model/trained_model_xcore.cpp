// This file is generated. Do not edit.
// Generated on: 31.10.2022 16:59:29


#include "../../api/xcore_config.h"
#include "tensorflow/lite/c/builtin_op_data.h"
#include "tensorflow/lite/c/common.h"
#include "tensorflow/lite/micro/kernels/conv.h"
#include "tensorflow/lite/micro/kernels/fully_connected.h"
#include "tensorflow/lite/micro/kernels/micro_ops.h"
#include "tensorflow/lite/micro/kernels/reduce.h"
#include "tensorflow/lite/micro/kernels/softmax.h"
#include "tensorflow/lite/micro/micro_context.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace tflite {
namespace ops {
namespace micro {
namespace xcore {
extern TfLiteRegistration *Register_XC_conv2d_v2(void);
extern TfLiteRegistration *Register_XC_lookup(void);
} // namespace xcore
}  // namespace micro
}  // namespace ops
}  // namespace tflite

namespace {

constexpr int kTensorArenaSize = 1544;
uint8_t tensor_arena[kTensorArenaSize] ALIGN(8);
template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_XC_conv2d_v2, OP_UNPACK, OP_ADD, OP_SPLIT, OP_XC_lookup, OP_MUL, OP_RESHAPE, OP_CONV_2D,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
  int custom_initial_data_size;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[40];
TfLiteEvalTensor evalTensors[40];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[19];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,32 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0078426757827401161, } };
const TfArray<1, int> quant0_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const TfArray<4, int> tensor_dimension1 = { 4, { 1,1,1,24 } };
const TfArray<1, float> quant1_scale = { 1, { 0.095865048468112946, } };
const TfArray<1, int> quant1_zero = { 1, { 127 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const TfArray<2, int> tensor_dimension2 = { 2, { 1,32 } };
const TfArray<1, float> quant2_scale = { 1, { 11.764171600341797, } };
const TfArray<1, int> quant2_zero = { 1, { 93 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const int32_t tensor_data3[1] = { 1 };
const int tensor_dimension3 = 0; /* empty TfLiteIntArray */
const ALIGN(8) int8_t tensor_data4[256] = { 
    -128, -128, -128, -128, -127, -127, -127, -127, -126, -126, 
    -125, -125, -124, -122, -120, -118, -115, -112, -107, -101, 
    -94, -85, -75, -63, -49, -34, -17, 0, 17, 34, 
    49, 63, 75, 85, 94, 101, 107, 112, 115, 118, 
    120, 122, 124, 125, 125, 126, 126, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, 
};
const TfArray<1, int> tensor_dimension4 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data5[256] = { 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -127, -127, -126, -125, 
    -122, -118, -112, -101, -85, -63, -34, 0, 34, 63, 
    85, 101, 112, 118, 122, 125, 126, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, 
};
const TfArray<1, int> tensor_dimension5 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data6[256] = { 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, 0, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, 
    -128, -128, -128, -128, -128, -128, 
};
const TfArray<1, int> tensor_dimension6 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data7[896] = { 
    -127, -1, 108, -39, -7, -63, 48, 5, -67, -33, 
    -7, -61, 28, 18, 35, 69, 63, 85, 6, -37, 
    -99, 70, -74, -36, 127, -23, -126, 69, 74, -57, 
    -44, -73, 24, -89, -66, 14, -27, -85, 72, 108, 
    -54, -49, 28, 108, 1, -81, -63, 32, 51, 11, 
    -102, -113, -69, 91, -73, 21, -69, -68, 57, 72, 
    -79, -127, -29, 67, -114, -12, -11, 53, -14, 56, 
    19, 72, 69, 63, 18, 98, -49, 26, 72, 11, 
    117, 52, -63, -98, -63, 30, -5, -93, 115, -64, 
    69, -23, 14, 127, 65, -47, -25, -99, -105, 121, 
    63, -3, -79, -121, -33, 11, 37, -86, 98, 90, 
    -99, -39, -112, 100, -32, 19, -13, 127, 36, -34, 
    -29, -37, 123, 109, -1, 15, -81, -96, 76, -127, 
    -8, 53, -50, 91, 88, 90, -61, 70, -52, 59, 
    -107, 75, -63, 22, 116, -82, -125, 56, 14, 110, 
    58, 74, 35, -105, 12, -103, -39, 30, 127, 127, 
    18, -14, -2, -58, -31, 57, -103, -52, 12, -55, 
    -32, 93, -68, 84, 84, 0, -40, 98, 104, 31, 
    -127, 35, -69, -118, 93, -16, -5, 101, 16, -77, 
    44, -46, 77, -48, -7, 85, -112, -40, 51, 2, 
    127, 82, -21, 1, -99, 96, 17, -82, -102, -83, 
    1, -88, -12, 111, -65, 112, 25, 90, -57, 67, 
    21, -84, 54, -106, -32, 79, -6, 11, -8, 127, 
    6, -71, -107, -84, -95, 110, 15, 113, -69, -61, 
    -127, 6, 98, 43, 43, -8, 95, -73, 73, -93, 
    -28, 68, -111, 64, -39, 48, 78, -10, 13, 47, 
    34, 6, 47, -56, 21, -27, 73, 77, 98, 126, 
    -122, -47, -84, 22, -88, -5, -111, -100, 110, -113, 
    91, -9, 116, 110, -127, 25, 120, 20, -5, 45, 
    -13, 89, -17, -20, -91, 5, -48, -63, 95, -24, 
    -24, 106, -91, 32, 80, -17, 110, 127, -59, -86, 
    -82, -13, -105, 54, -89, -54, -47, 74, 65, -113, 
    -2, -48, -23, -40, -82, -112, 48, 127, -55, 86, 
    -90, -89, -85, 85, 105, -8, 115, 22, 36, 81, 
    117, -79, 62, -47, -79, 67, -124, -46, 67, -15, 
    56, -109, 86, -5, -47, -70, -7, -127, 106, 63, 
    28, -73, 70, -77, -53, -127, 11, 28, -45, -2, 
    16, -60, 63, -99, 45, -121, -16, 112, -102, 74, 
    -64, -50, 111, 111, 127, -39, 1, -90, -91, 46, 
    -3, -94, -25, -89, 30, 43, 59, 116, -15, 3, 
    -6, 96, -5, -50, -29, 14, 67, 44, -17, 48, 
    120, -83, 19, 101, -34, 122, 104, 127, -26, 22, 
    16, -13, -10, 20, -4, 53, -21, -98, 60, 27, 
    -97, -116, 2, 52, 47, -119, -64, 75, 76, -87, 
    83, 62, 62, 68, -16, -76, 73, 54, 44, -23, 
    -33, -9, -127, 48, 57, 95, -48, 35, -104, 10, 
    96, 0, 40, 127, -22, -7, -50, -49, -66, 84, 
    65, -23, -59, 26, 30, 58, -89, -101, 60, -8, 
    -10, 107, -61, -127, 112, -73, -9, -70, -9, -44, 
    -33, 69, 15, 56, -44, 46, 18, -56, -31, -47, 
    26, -53, 26, 40, 88, -16, -63, 60, -56, -28, 
    -127, -14, 69, 113, 101, 24, -48, -82, -123, -7, 
    37, 89, 86, 62, 22, -20, 117, -52, 49, -17, 
    -62, -87, -127, 49, 70, 49, -15, 60, -111, 5, 
    -2, 18, 88, -98, -81, 108, 94, -14, 73, -56, 
    -81, 7, -101, -30, -22, 39, 111, -91, -57, -38, 
    -85, 95, -50, -71, 125, 127, 106, -20, 43, -58, 
    -32, 20, -40, 114, -72, 18, 4, 24, -127, -83, 
    -11, -17, -93, 62, 103, 13, 5, 19, -89, -30, 
    -86, -82, 65, 21, 61, -19, -92, 44, 54, 52, 
    -10, 29, -23, 127, 20, 89, -111, -53, -62, 61, 
    82, 78, -114, -117, 22, -61, -45, 39, -25, 27, 
    -47, 15, -18, 47, 116, -100, -80, -34, 49, -127, 
    -5, 107, 37, 80, 49, 44, -10, -58, 70, -31, 
    12, -56, 97, -78, -38, -25, -116, 86, 47, -64, 
    115, -92, -127, 112, -50, -20, -61, 2, -11, 41, 
    -37, -63, -47, 83, -46, -108, -86, -28, -88, 39, 
    28, 3, 9, -82, -109, -121, -9, -80, 77, -60, 
    -53, 41, 65, 109, 32, -5, -48, -127, 45, -51, 
    82, 8, 68, -27, 52, -78, -6, -44, -17, -60, 
    -127, -61, -52, -92, -76, 74, -83, -59, 74, 121, 
    57, -22, 9, 37, 56, -43, 68, 27, 11, -88, 
    -68, 78, -83, -28, -127, 57, 59, 98, 30, 67, 
    93, 15, -73, 78, 59, -110, 20, 16, -47, -69, 
    6, -34, 19, 32, 106, 54, -10, -11, 15, 32, 
    -60, 47, -70, -64, -113, -50, -55, -24, -76, 109, 
    127, -73, 12, -77, 8, 102, -89, 70, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 
};
const TfArray<1, int> tensor_dimension7 = { 1, { 896 } };
const ALIGN(8) int16_t tensor_data8[64] = { 
    13858, 13167, 14222, 12265, 12883, 15507, 13951, 15533, 14799, 13582, 
    14020, 12546, 11940, 13040, 14499, 15793, 1953, -2587, 4413, -1466, 
    -3236, -4294, -190, -1047, -3037, -2606, -3152, 1150, -6083, 2865, 
    1459, 744, 13078, 15404, 16503, 14876, 11818, 15229, 13911, 17334, 
    13265, 14006, 12881, 14112, 13336, 14648, 13206, 14309, 104, -2326, 
    3718, 2764, 4193, -838, -379, 2413, -1405, 76, -3880, 1022, 
    -1122, -5898, -5141, -2548, 
};
const TfArray<1, int> tensor_dimension8 = { 1, { 64 } };
const ALIGN(8) int8_t tensor_data9[4096] = { 
    18, 30, -33, 14, -20, 36, -47, 26, -14, 74, 
    -56, 7, 22, -29, 31, 13, 27, -12, 23, -22, 
    -16, -24, -15, -7, -72, 21, -46, -70, 17, 55, 
    59, -4, -5, 41, -21, -3, -42, -12, -59, -11, 
    11, 45, -6, -79, -62, -37, -54, -23, -3, 102, 
    -21, 54, 47, 99, -65, 18, 46, -31, 41, 31, 
    66, 35, 29, 61, 47, -26, -59, 6, 43, -35, 
    -26, 3, -18, 20, -53, 46, -36, -8, -12, 8, 
    -87, 62, 6, -26, -33, -26, -28, -30, 33, -42, 
    -35, 8, -58, 30, 54, 42, 27, 62, -33, -34, 
    25, -16, -36, -14, 7, 5, 45, -45, 59, 15, 
    10, -14, -28, -3, -2, 22, -24, -6, 18, -4, 
    2, -2, 38, -14, -34, -10, 40, 47, -56, -67, 
    61, 30, 35, 12, 37, -11, -31, -45, 42, 15, 
    -21, 5, -24, -39, 55, -17, -52, -43, -11, -53, 
    74, -37, -7, -100, 25, -37, -22, -36, 13, 42, 
    37, -13, -44, 2, -10, -41, -48, 4, -28, 31, 
    -46, -61, 54, -60, -35, -12, 2, 21, 3, -74, 
    -29, -15, -50, -80, -19, 58, -19, 44, 59, 30, 
    -49, 13, -87, -27, -9, -36, -35, 58, 1, -54, 
    50, -5, 10, 32, 28, -54, -37, -56, -34, 4, 
    31, -56, 15, 49, -3, -25, -1, -78, -49, -56, 
    13, 5, 42, -31, 17, 56, 41, -56, -29, 72, 
    -6, 90, -1, 38, 40, 76, 38, -23, -23, 20, 
    -11, 29, 61, -47, 21, 0, 14, 42, 13, 16, 
    14, -13, -55, -39, 44, 67, -19, -33, -22, 65, 
    -24, -47, -15, 11, -8, -4, -11, -34, 57, -6, 
    -30, -27, 6, 89, -35, 88, -34, 39, -10, -8, 
    -10, -11, 33, 2, -48, -19, 1, 2, 68, -9, 
    -15, -82, 28, 58, -44, 8, 0, -35, -19, -35, 
    6, 43, -43, -34, -2, -3, 36, 34, 19, -2, 
    59, -83, 12, 36, -73, 0, 6, 23, -6, 51, 
    -9, 19, 67, -65, 28, -38, 24, -6, -4, -56, 
    -35, -24, 46, 8, 5, -47, 2, -56, -12, -17, 
    28, -45, 23, -5, -9, -10, -36, 31, 25, 10, 
    -6, -17, 17, 51, 12, 35, 39, -22, -33, 24, 
    14, -25, -3, -35, -34, 8, -44, 9, -38, -36, 
    -42, -46, -20, -69, 3, -8, 34, -8, -56, -8, 
    -27, -25, -5, -12, 18, 49, -10, 7, 61, 61, 
    27, -21, -2, 1, 32, -65, -7, -30, -53, -53, 
    23, 45, -34, -40, 31, -32, -41, -27, 58, -64, 
    -2, 13, -48, 21, 67, 23, 30, -49, -65, 4, 
    24, -45, 7, 29, -41, -2, 76, -8, -58, -11, 
    19, -46, -84, -51, -46, 57, -53, 43, -44, -75, 
    -35, -20, 42, 26, 39, -30, -68, -44, 23, 25, 
    -36, -1, 52, -32, 43, 26, 7, -29, 60, 25, 
    -28, -8, 35, -58, -30, 70, -39, -60, -25, -12, 
    -23, -76, 53, 20, 1, -13, 28, -10, 9, 41, 
    12, 38, -29, -29, 39, -1, -7, -32, 48, 6, 
    -43, 39, -39, -5, -6, -9, -31, 19, 49, -16, 
    59, -11, -46, -34, 25, 31, -45, 20, 67, 7, 
    36, 37, 22, -8, 39, 21, -16, 60, 2, 16, 
    19, 30, -36, -70, -50, 32, -38, -41, -4, 27, 
    -67, -17, -65, 69, 15, 70, 13, -54, 8, -86, 
    38, 25, 66, 48, -72, -24, 37, 10, 34, 4, 
    45, 16, -8, -26, -1, 39, 0, 47, -7, -59, 
    -52, 49, -17, 32, 16, 53, 42, -21, 38, -26, 
    46, -29, -18, 61, 64, -26, -13, -36, -4, -6, 
    -1, -57, 51, 66, -32, 65, -74, 8, -45, 53, 
    -3, 2, -20, 41, 26, -30, 41, 5, 69, 16, 
    26, 62, -23, -23, 34, -60, -8, -59, -38, 67, 
    54, 65, -10, -36, -18, -45, 20, 30, -51, -28, 
    -6, 38, 60, -50, 46, -47, 5, -44, -55, 38, 
    10, 69, -37, -19, -18, 0, -41, -44, 0, 4, 
    33, 21, 34, 30, -79, 38, 57, -21, -27, 12, 
    39, -64, -23, -5, 26, -61, -67, -31, -20, 52, 
    33, 89, -31, -38, 47, -12, -47, -32, 38, 36, 
    23, 36, 17, -20, 64, -3, -75, -82, -17, 25, 
    -45, 22, 9, 40, -81, -19, -17, 73, 53, -59, 
    76, 61, 5, -9, 37, 14, -41, -8, 8, 58, 
    49, -21, 16, -11, 14, -54, 52, -41, 42, -16, 
    9, -81, 14, 0, -1, -10, 52, -15, 0, 7, 
    72, -28, 2, 16, -1, 18, 7, 12, -2, -17, 
    1, 26, -33, 26, 26, -36, -59, 22, 14, 25, 
    -33, 5, 37, 49, -30, 32, 28, 30, 60, 10, 
    38, -37, -17, 39, -38, 5, 44, 3, 71, -28, 
    -51, 50, 41, -75, 46, -33, 11, -12, -22, 4, 
    52, 29, -90, -40, 50, 9, -27, -15, -53, 28, 
    -13, -1, -18, 22, 10, 55, -20, 29, 43, -52, 
    47, 59, -36, 41, 6, 29, 20, -5, 6, -85, 
    69, 21, -46, 11, -29, 13, 79, -41, 1, -2, 
    6, 110, 28, 31, 1, 19, -33, -64, 30, 74, 
    23, -83, -46, -109, 51, -32, 17, 23, -32, -32, 
    -21, 9, 34, 47, 39, 41, 67, 51, 14, 22, 
    -9, -70, -33, -9, 60, 28, 39, -2, 0, -8, 
    23, 53, -67, 41, -8, 2, 16, -21, 38, 28, 
    -3, 12, -43, -2, 9, -60, -36, -36, 8, -13, 
    2, -2, 4, -30, 38, 16, -62, -47, -11, -12, 
    -46, 45, -35, -35, 48, 45, 13, -10, 47, 58, 
    -31, -12, -19, -54, -62, 14, 52, -24, -11, 25, 
    -31, -68, -43, 51, -1, -8, -47, -19, 3, 48, 
    -3, 32, -38, 17, 26, 28, -9, -54, 10, 14, 
    -15, -16, -51, 37, 11, -69, 14, -4, -1, 17, 
    -32, -30, 46, 67, -23, 5, -35, -10, -29, -99, 
    -25, -80, -21, 33, -37, -13, -65, -54, -2, -6, 
    22, -5, 38, 19, -33, -71, 17, -10, -12, -36, 
    56, 49, -41, -48, -63, 19, -13, 21, -25, 23, 
    -1, -45, 44, 24, 0, 55, 2, -2, -18, -3, 
    -18, -34, -88, -18, -12, 55, 9, 52, -12, 28, 
    -23, -11, -71, -1, 65, 33, 37, 30, 38, 0, 
    -98, 3, 24, 10, 37, 21, 48, 25, 17, -55, 
    12, -32, 44, -49, -68, -53, 48, 60, 48, -33, 
    62, 42, 59, -1, -30, 55, 16, 30, 51, 39, 
    15, -44, 40, 34, -68, 30, -32, 18, 50, 12, 
    38, -3, 28, 14, -18, 26, -28, 35, -73, -24, 
    -3, -39, -35, -45, -23, 18, 32, -49, 27, 10, 
    -2, 0, -68, 30, 66, -14, -11, -101, 5, 7, 
    -57, -58, 4, 25, -41, -61, -43, 50, 25, -18, 
    -21, -47, 32, -15, 2, -14, -1, 67, -27, 22, 
    36, -25, -32, -21, 66, 36, 30, -19, -63, 10, 
    -35, 50, 32, 15, -19, -52, -17, -36, -26, 17, 
    -1, 37, -57, 10, -15, 25, 42, 15, -18, -51, 
    -125, 1, 26, -52, -5, -21, -44, 64, -8, 111, 
    34, -39, -8, -61, -57, 52, -21, 72, -3, -3, 
    -29, 25, -6, -59, 30, -11, -49, 44, -26, 2, 
    112, -58, 38, -42, 50, 3, 110, 29, -82, -50, 
    46, 2, 35, -12, 23, 52, -52, -52, 19, 8, 
    14, -6, -42, 47, -4, 0, 35, 38, 28, -25, 
    -16, -39, -69, 53, 51, 26, -73, -44, 27, -27, 
    -45, 55, 3, -10, 39, 18, -6, -95, -18, -22, 
    -7, 45, 23, -80, -24, 89, -29, 27, 5, 47, 
    39, 6, -11, -38, -31, 24, -18, 7, 64, -1, 
    14, 33, 34, 7, 5, -54, 33, -10, -17, 0, 
    3, 37, -32, -39, -38, 52, 11, -32, 0, 35, 
    36, -54, -18, -45, 31, 19, 15, 17, -43, 80, 
    -14, 23, 26, 28, -41, 12, 21, 45, 2, 32, 
    65, 37, -37, -19, 8, -24, -70, -72, 37, -45, 
    -1, -11, 57, -41, -34, -74, 17, -32, 51, -32, 
    56, 43, 75, 82, 50, -1, -49, 22, -53, -33, 
    -50, 64, -30, 9, 66, 44, -11, 5, 87, 70, 
    45, 14, 39, 2, -71, 59, 21, 89, -34, 32, 
    -60, 54, 7, -57, -3, -50, 2, 30, -57, -64, 
    -115, 7, 35, 50, -53, -20, 8, 31, 32, 33, 
    19, -5, 55, 18, -7, 5, 15, 29, -67, -41, 
    28, 3, -71, 50, -41, 71, -16, 39, 47, -19, 
    -33, 14, 64, 0, 97, 11, 57, -75, -84, -60, 
    16, 43, -46, -28, -9, -24, -77, -55, 2, -50, 
    79, 9, -50, 49, 55, 25, -5, -21, -59, 77, 
    9, 12, 31, -65, 61, -38, 4, -68, -5, 29, 
    12, -52, 59, 50, -99, -16, -32, 3, 59, 74, 
    20, -108, -17, 49, -66, 4, 24, -35, 29, -47, 
    27, -35, -45, -61, 8, 39, 15, -25, -55, 34, 
    -12, 75, 65, 3, -32, 55, 23, 94, -16, -9, 
    50, 60, -19, -13, 55, 81, -30, 14, -36, -46, 
    4, -25, -39, -30, -14, 12, -56, -27, 43, -7, 
    55, -32, -34, 78, 97, -33, 25, 22, 38, -79, 
    -45, 26, -9, 9, -46, 49, 17, 49, -20, 15, 
    4, 36, 52, 25, -80, 46, -11, -5, 65, 47, 
    17, 31, 57, -8, 48, -61, 3, 3, 37, 38, 
    -40, -57, 1, -56, 41, 4, 60, -45, 25, -70, 
    5, 61, -5, -13, 31, -32, 18, -34, -51, -13, 
    64, -36, 3, -2, -39, 16, -15, -2, -37, 31, 
    -40, -19, -5, -53, 34, 9, -8, -70, 35, 28, 
    -40, -16, -40, 3, 56, -46, 38, -10, 13, 5, 
    -14, -5, 49, 18, 8, -44, -1, 17, 6, -7, 
    19, -30, 9, -38, 39, 31, 5, -42, -38, 52, 
    0, -11, -12, 20, 20, -36, -16, 26, 18, 30, 
    -32, 30, -71, 4, 23, 26, 6, 17, 11, 37, 
    -24, -11, -56, 44, -37, -48, 42, -30, 22, 0, 
    32, 10, -18, -28, -16, -36, -26, 37, 5, -63, 
    75, 8, 34, 9, 2, 30, 29, 45, -98, 33, 
    48, 12, -25, -10, -50, 52, -21, -43, -17, 3, 
    -47, 63, -43, 23, 2, 33, -19, 28, -2, -22, 
    -15, 40, 3, -3, -1, 5, 19, 56, -63, -12, 
    11, 14, 59, -40, 3, -36, 24, -34, -3, -1, 
    -81, -16, -64, -19, -59, 11, -24, -36, 82, -32, 
    14, 99, -38, 115, -38, -2, -35, 25, 4, 21, 
    41, 62, 47, 26, -57, -25, 24, -28, -7, 35, 
    24, 22, 59, -2, 7, 43, -4, -62, 26, 21, 
    23, 12, 77, -24, 52, -59, -49, 14, -31, -23, 
    -22, 49, -24, -25, -22, 17, -8, 16, 48, 14, 
    -35, 71, -33, 5, -57, -27, -6, 4, 49, -52, 
    12, -59, -14, 11, -45, -45, -38, -55, 9, -36, 
    1, -46, 108, 67, -61, 11, 7, -16, 26, 6, 
    33, 28, -45, -21, 53, 27, -15, 29, -30, -29, 
    -80, 10, 53, -9, 33, -73, -35, -12, -68, 76, 
    -36, 17, -11, -21, -64, -55, -2, -37, 34, -21, 
    -50, -55, -64, -48, 61, -10, 25, -8, -5, 57, 
    16, -30, -21, -25, -49, -15, -63, -55, -23, -18, 
    18, -38, -52, -27, 26, -11, 33, -34, -19, 13, 
    30, 24, 16, -34, -3, -46, 4, 55, -4, -55, 
    -60, -57, -18, -21, -3, -28, -21, 17, -36, 23, 
    39, -64, -2, 20, -1, 92, -105, 40, 67, 35, 
    -127, -53, 42, 47, 75, -105, 110, -50, -45, -49, 
    11, 41, -123, -20, -76, 6, -16, 79, -74, -75, 
    95, 2, -68, 114, -32, 14, -63, 33, 39, 67, 
    -19, -9, -50, -27, 42, 9, -85, -54, -13, 28, 
    45, 11, -36, 0, -3, 68, 21, 20, 29, -13, 
    -51, -53, -58, 60, -12, -15, 38, 21, 12, -53, 
    -42, 38, -26, -45, -9, -36, -2, -13, -5, 60, 
    -39, 23, 61, 52, 44, -55, -35, 65, -21, 43, 
    60, -2, -25, 8, -5, 5, 29, -47, 43, -52, 
    60, 79, -65, 26, -2, -20, -43, 16, 52, -49, 
    84, 19, 91, -27, -51, -24, -25, 60, -58, -24, 
    -82, 74, 13, -60, 63, 3, 43, -63, 8, -13, 
    -38, -16, -3, 8, -25, 41, 46, 38, 28, 35, 
    6, 11, -15, -50, -74, 42, -30, 88, -56, 23, 
    28, -6, 58, -71, -29, -29, 49, -37, 50, -19, 
    24, -23, -25, -65, 23, -14, -4, -92, -3, -40, 
    45, 1, 39, -58, -14, -32, 5, 10, 32, 2, 
    -20, 5, 3, -24, 69, -2, -5, 45, 17, 32, 
    3, 45, 70, 38, -59, 6, -1, -17, 42, 24, 
    20, 0, -17, 22, -37, 2, 13, 23, 82, -47, 
    33, -61, -8, 42, 23, -96, 6, 19, -18, -18, 
    -15, -69, -11, -33, 30, 64, 51, 59, -34, 19, 
    -32, 38, 4, 18, 8, -1, -40, -70, -21, 1, 
    -22, 56, -61, -35, -74, -42, -10, 24, 30, 26, 
    -5, 17, 6, -56, -20, -28, -14, -17, -61, 31, 
    -56, 40, 14, 21, -53, -34, 58, -13, 26, -16, 
    -46, -31, -41, -46, -65, -44, -39, 19, 40, 53, 
    -35, -10, 19, 46, -9, 32, -21, -1, 66, -21, 
    -12, -75, 33, -72, 46, -34, 30, 5, 3, 7, 
    31, -40, -82, 54, -19, 62, -42, -23, -25, 41, 
    48, -36, 7, -78, -44, 33, 41, -29, 10, -15, 
    15, 36, 2, -8, -45, -19, 11, 75, 42, 46, 
    -7, -1, 31, 30, 82, -35, -22, -28, -4, 41, 
    42, 37, -7, 54, -52, -5, -42, -14, 0, 27, 
    -9, -19, -83, 0, -25, -5, 19, -37, -13, 21, 
    -32, 51, -10, -42, 23, -60, -43, 6, 22, -24, 
    26, 39, 22, 28, -17, 31, 57, -25, 22, 30, 
    36, 33, -29, -2, 19, -17, 19, -21, -45, -53, 
    12, -40, -70, -23, 22, -4, 79, 5, -35, -52, 
    53, -6, -13, 12, -37, 46, 13, -50, 24, 32, 
    26, 59, -22, 5, -11, -7, 36, -36, 20, -16, 
    21, -25, 34, 1, 54, -45, -41, -19, -40, -11, 
    6, 2, -12, 10, 32, 28, -5, -7, 15, 38, 
    15, 21, -30, 61, 66, 13, 34, -1, -35, 60, 
    -8, 20, 81, 39, -16, 3, 13, -27, -68, -83, 
    -37, 33, -7, -27, -31, -53, 49, 19, -34, 19, 
    -32, -51, 9, 29, 43, 61, -65, -21, 12, 13, 
    28, -23, 15, -18, 70, 60, 22, -2, 55, 0, 
    -47, 8, -24, 1, 36, 66, 7, 77, 32, 37, 
    55, -34, 43, -4, -14, -41, 10, -32, 0, 33, 
    -8, -27, 1, -24, -40, -47, 19, 28, -7, 67, 
    5, -9, 28, 45, 43, -15, -48, -64, 35, 13, 
    -45, -77, 9, 12, -52, -6, 13, 74, -23, 9, 
    59, -55, 5, -37, -18, 63, -19, -42, 45, -42, 
    23, -48, -51, 55, -58, -23, -20, 54, 42, -9, 
    -32, -3, 1, -66, -76, 31, 39, 14, -48, 23, 
    -1, 24, -19, 35, 8, 31, -6, -2, -29, 53, 
    1, 16, -41, -16, -17, -49, 40, 50, 35, 49, 
    -26, -31, 27, -5, 44, -28, 19, 17, 42, 27, 
    -22, 10, -33, 28, -59, 32, 30, -14, -16, 24, 
    0, 37, -9, -49, 22, -6, -13, -61, 38, 22, 
    -48, -4, -73, 79, 11, 80, -33, 40, -35, 60, 
    60, 48, -46, -48, -27, 23, -68, 5, 40, -53, 
    -31, -16, -21, 7, -40, -10, -28, -34, -46, 17, 
    0, 13, 60, -10, 27, 63, 39, 11, 3, 63, 
    13, -82, 35, -23, 29, 1, 22, -77, 36, 16, 
    44, -54, -17, 29, -64, -13, 14, -15, 6, -25, 
    26, 22, -54, -33, -7, 2, -92, -40, 23, -13, 
    16, 49, 58, -72, 0, 41, 53, -30, -40, 3, 
    -28, -56, -6, 18, -37, 53, -14, -32, 45, -3, 
    -53, -6, 61, 17, -37, -36, -10, -39, -31, 19, 
    -12, 35, 9, -27, -32, 37, -24, 6, -6, 46, 
    35, -25, -33, 32, 67, -34, -11, 26, -16, -4, 
    -45, -34, -25, -40, -10, 17, -65, 15, 79, -5, 
    22, 34, -46, -6, 58, 25, 10, 35, -86, -18, 
    12, -2, -13, 51, -40, -25, -35, 16, 8, 67, 
    49, -1, 27, 40, -42, -25, 38, 73, -18, 29, 
    -68, 33, 1, 35, -23, -52, -42, 22, 28, -25, 
    18, -36, 13, 0, -92, 93, 61, -15, -46, 17, 
    -17, -33, -24, -32, -25, 8, 36, -39, -24, -10, 
    -40, 34, -92, 3, 23, 12, -8, 33, -14, -40, 
    -58, -29, 49, -19, -22, 24, 29, -57, 39, 72, 
    6, -38, 62, -51, -21, 46, 36, -19, -23, -46, 
    58, 11, 24, -46, -21, 78, 28, -49, -11, 61, 
    -4, 11, 3, 14, 28, 46, -51, -57, 34, -26, 
    -5, -2, -57, 29, 52, -15, -54, 28, 1, 9, 
    41, 38, -37, -42, -32, -24, -38, 47, 46, -39, 
    46, -48, -57, 40, 15, 2, -51, 30, 61, 23, 
    -37, -24, -41, 3, 26, -50, 47, 37, 67, 2, 
    -35, 16, 68, -43, 24, -35, 27, 25, -73, 19, 
    -3, 4, -55, -4, 27, 54, -18, 14, 17, 20, 
    41, -14, 21, -62, 5, 69, -15, 7, 24, 10, 
    -38, -8, -28, -19, 0, 29, -48, -5, -30, 49, 
    -25, -32, -26, 9, 4, 2, -56, -6, 21, -14, 
    33, -3, -30, 40, 56, -57, 16, 46, -12, -51, 
    40, -25, -56, -50, -48, -12, -37, -46, 34, 35, 
    14, -45, 37, 14, 19, -40, -34, 10, 11, -4, 
    -37, -27, 31, 58, 36, -10, -42, 30, 58, -42, 
    -22, 13, 67, -62, 30, -66, -55, -18, 45, 18, 
    13, 7, 70, -51, -39, -45, -64, 30, -5, 56, 
    -26, 56, 6, 17, 50, 54, 7, 65, -14, -62, 
    -17, 16, 12, 57, -18, -56, -8, 2, -32, 20, 
    -29, 34, 13, 12, -27, 12, -67, 72, 6, -29, 
    -44, -28, -26, -18, -42, -31, -43, 30, 33, -1, 
    -52, -50, -28, 30, -47, 80, 23, 38, -25, 60, 
    63, -65, 33, 44, 46, -47, -70, 33, 24, -32, 
    -24, -55, 38, 32, -14, -14, 48, -37, -2, 0, 
    -37, -10, 51, -44, -2, -22, 12, 35, -19, 32, 
    1, -53, -29, 20, 4, -41, -47, -41, -23, -28, 
    47, -48, -38, 33, -61, -31, 9, -34, -49, -45, 
    9, -49, 44, -40, 8, -44, -14, 23, 36, 2, 
    66, -41, -43, 44, 51, -59, 58, 50, 37, -19, 
    27, 58, -32, -39, -67, 20, -33, -3, 32, 68, 
    -18, -69, 36, -7, -1, -32, 56, -73, -60, -6, 
    9, 39, 54, -66, -27, -32, -28, 41, -4, -19, 
    -26, -17, -59, -8, -29, 9, -51, 16, -44, 23, 
    21, -44, -54, 22, -25, -29, -39, 17, -31, 26, 
    54, 7, -20, -20, 3, 21, 14, 13, 35, 32, 
    23, 34, -69, -58, 14, 19, -26, 74, 30, -89, 
    9, -8, 28, 41, -10, -55, 69, -22, 38, 19, 
    -103, 48, -19, -38, 14, 40, -34, 41, 35, 31, 
    -30, -32, 36, 8, 4, 31, 31, 94, -25, 10, 
    -33, -64, 45, -9, -17, 5, -39, -17, -8, 16, 
    -46, 11, -25, 89, -70, -57, 51, 40, -29, 2, 
    4, -75, -35, -31, 22, 1, 55, 29, 15, 36, 
    -12, -34, -1, -44, 66, -26, -4, -25, -35, 54, 
    25, -29, 32, -29, -9, 3, 26, -30, -16, -1, 
    14, 24, 6, 2, 53, -3, 41, 17, 37, -4, 
    -43, -45, -45, 60, 48, -75, -8, -1, 12, 33, 
    47, 96, -21, 7, -38, 6, 14, -78, 13, -53, 
    -53, 2, 42, 71, 17, 10, 79, -58, -31, -31, 
    51, 21, -42, -24, 10, -91, 20, 79, 41, -18, 
    -19, -53, 7, -51, 72, -9, -59, 5, 43, 78, 
    43, -25, -33, 52, 3, 22, -66, 25, -14, -12, 
    60, -76, -25, -48, 62, 47, -45, 40, 20, -64, 
    24, 65, -6, -54, -12, 63, -66, -38, 26, 7, 
    57, -27, 7, 24, -10, 49, 35, -44, -13, 45, 
    -23, 3, 40, -23, -10, -43, 12, -70, 20, 3, 
    24, 24, 37, 71, 43, -8, 25, 8, 39, 16, 
    -22, -26, 80, 30, 44, -20, 42, 53, -20, -12, 
    -21, -5, -27, -9, -35, -8, -24, 35, 9, 45, 
    -57, 8, -17, 13, 37, -67, 24, -49, 12, -24, 
    -5, -70, 43, 14, -75, -36, 44, 8, 2, -17, 
    -40, -25, -26, 47, 46, -63, -9, 28, -31, -36, 
    33, 18, -51, 61, -27, 15, -34, 8, 58, 2, 
    27, 8, -21, 18, -46, -13, 50, 9, -52, 17, 
    -24, 55, -31, -1, -61, -10, -56, 22, -20, -3, 
    -60, 26, -26, 86, 29, -40, 2, 14, 22, 31, 
    -3, -25, -13, -38, -70, 31, -33, -67, -6, -94, 
    -38, 2, 1, 35, 38, 15, -29, 7, 63, -47, 
    -33, -55, -69, -16, 45, -21, -44, -44, -8, -37, 
    56, 57, 51, -4, 11, -31, 25, 14, 39, -61, 
    -43, 67, 6, 36, -38, 86, 24, -23, -63, -37, 
    11, 44, -13, 7, -16, -12, -52, 15, 22, -23, 
    12, 36, -16, -45, -53, 11, 4, 29, -19, -48, 
    -68, -21, 9, -13, 35, 28, 40, 18, -50, 13, 
    -35, -37, -10, -10, 32, 29, 14, 22, 47, 57, 
    4, -62, 41, 14, 7, -10, 42, -6, 20, 18, 
    -62, -41, 33, -6, -14, 16, -34, -24, -47, 1, 
    -21, -14, 68, 3, -36, 25, 37, 23, 25, -25, 
    32, -77, -34, 11, 7, -2, -49, 43, 25, -26, 
    75, -78, -2, -8, -26, 44, -27, -46, 34, -61, 
    29, 48, 7, -14, -8, 23, 4, -9, 99, -31, 
    -72, -73, -20, 43, -83, -30, 12, -1, 3, -10, 
    23, 50, 13, -19, 73, -7, 25, 36, 11, -3, 
    -17, 50, -24, 13, 68, 23, 25, -11, -17, 5, 
    -74, 10, 49, -5, -37, 38, -34, -5, 62, -19, 
    42, 13, -78, -21, 31, 52, -20, -33, 40, -31, 
    -8, 27, 53, -16, 38, -5, -31, -7, 41, -20, 
    43, -28, -32, -33, -31, -41, 54, -15, 48, -27, 
    28, -41, 18, -34, -55, 52, -2, 46, -60, -10, 
    -25, -70, 50, -12, 43, 41, 43, 9, -17, -22, 
    11, 25, -51, -28, -47, 44, 23, -30, 44, 31, 
    -112, 97, 58, -32, -26, 41, 58, 33, 36, 15, 
    59, -38, 30, -22, -46, -49, 71, -45, -12, 9, 
    43, 24, -63, -38, -19, 4, -41, -42, 43, -11, 
    27, 33, 61, -37, 44, -11, -65, 25, 0, -16, 
    47, 14, -39, 29, -15, -38, 46, -43, -65, 12, 
    -59, -36, 54, 40, 17, -47, 0, -37, -44, 19, 
    53, 28, 35, -51, 28, 25, 34, -44, -3, 43, 
    8, -22, -19, 5, -7, 37, -2, 25, -6, -35, 
    23, 5, -4, -23, 51, -11, -11, 11, 32, 30, 
    -48, -12, 44, 7, -19, -16, -10, -19, -52, 3, 
    5, 2, -49, -31, 4, 24, -5, -16, -22, 22, 
    -47, -61, 38, -26, 44, -29, -37, -18, 27, -28, 
    26, -9, -52, 27, -24, -47, -38, 0, -1, -13, 
    -32, 2, 6, -27, -49, 0, -41, -19, -18, -77, 
    -47, -39, 25, 26, -43, -25, 31, 3, -36, 28, 
    39, -16, 35, 0, 34, -18, -39, 21, -42, 5, 
    -31, -50, -53, -35, 13, 69, -56, -38, -4, -28, 
    11, -40, 47, 11, -28, -11, 29, -11, 54, -13, 
    -45, -13, -60, 55, -41, -23, -50, -27, 31, -31, 
    -45, 16, -55, 21, -6, 4, -57, 57, -30, 24, 
    28, 39, 55, 35, 57, 17, 40, 13, 12, 20, 
    -45, -26, 47, -18, -2, -31, -28, 11, -42, -38, 
    -37, 37, -13, -7, 44, 33, -26, -2, 52, 39, 
    73, 56, 44, -22, 35, 51, 7, -10, -1, 34, 
    -39, -11, -44, 28, -10, 25, -9, -49, -3, 23, 
    67, -50, 34, -26, 6, -5, -62, -17, -26, -9, 
    -25, 13, 39, 27, -32, 37, 55, 33, 62, -38, 
    2, 20, 26, 29, 29, 32, -6, 50, -9, -53, 
    -62, 6, 3, -31, 8, 39, -33, -76, -46, 76, 
    -10, -88, 16, 39, -5, 57, -28, 34, -45, -61, 
    56, 19, -3, -14, -68, 28, 25, -55, -25, 53, 
    8, -44, -17, 25, -26, 19, -63, 27, 6, 26, 
    28, -59, -1, -35, -11, 19, -38, 22, -83, 26, 
    32, -22, -59, -33, -20, -59, 6, 61, -37, -44, 
    -51, -5, 16, -22, -40, -59, 30, -31, 23, -32, 
    -14, 7, 24, 37, -43, -10, 23, -64, -4, -12, 
    -49, -28, -24, 9, -39, -12, -7, 11, 23, -30, 
    -8, -27, 26, -35, 69, 22, 20, -52, 37, 12, 
    -19, -43, -22, 59, 47, 35, -3, -33, 25, 30, 
    -38, 20, -1, -27, -45, 16, 48, 65, 30, 31, 
    -39, 5, 16, 32, 4, 29, 35, -63, 44, 29, 
    -17, -27, -52, -47, -57, -54, -10, 35, -6, 8, 
    -26, 47, -23, -32, -37, -8, 24, 0, 20, -24, 
    -21, 34, 2, -25, 2, 44, 34, -50, -15, -57, 
    49, 37, -38, -17, 5, 14, 8, 9, 19, 44, 
    -9, -43, -7, 61, -35, 33, 19, -51, -15, 5, 
    -21, -61, 34, 11, -39, -27, -58, -19, 37, -39, 
    -17, -60, 29, 34, 53, 35, -51, -28, -57, -27, 
    47, 33, 47, -20, -22, 23, 25, 63, 4, -64, 
    10, -24, -55, -1, 9, -44, 24, -79, -52, 27, 
    -41, 37, 48, -1, -3, 5, -48, 46, 36, -6, 
    49, -33, 33, 32, -33, 22, 56, 38, 18, 7, 
    -32, 31, -40, 24, -40, 26, -34, 42, 23, 34, 
    58, -31, -5, -45, 59, -27, 
};
const TfArray<1, int> tensor_dimension9 = { 1, { 4096 } };
const ALIGN(8) int16_t tensor_data10[256] = { 
    15878, 15878, 15878, 15878, 15878, 15878, 15878, 15878, 15878, 15878, 
    15878, 15878, 15878, 15878, 15878, 15878, 4418, 3987, 1983, 3871, 
    2483, 3138, 3848, 3600, 5801, 2309, 2386, 2821, 4239, 2948, 
    4584, 3786, 15878, 15878, 15878, 15878, 15878, 15878, 15878, 15878, 
    15878, 15878, 15878, 15878, 15878, 15878, 15878, 15878, 5011, 3693, 
    2037, 3286, 2809, 5313, 4018, 4080, 4797, 4076, 4301, 4173, 
    3526, 4115, 4797, 4104, 15878, 15878, 15878, 15878, 15878, 15878, 
    15878, 15878, 15878, 15878, 15878, 15878, 15878, 15878, 15878, 15878, 
    2793, 4673, 4162, 4794, 3417, 3883, 3247, 6305, 3650, 4208, 
    3700, 4379, 3406, 3565, 2914, 4166, 15878, 15878, 15878, 15878, 
    15878, 15878, 15878, 15878, 15878, 15878, 15878, 15878, 15878, 15878, 
    15878, 15878, 4255, 4317, 3910, 3960, 3960, 3724, 3262, 2696, 
    1530, 3844, 2444, 5034, 3658, 4449, 3445, 4115, 15878, 15878, 
    15878, 15878, 15878, 15878, 15878, 15878, 15878, 15878, 15878, 15878, 
    15878, 15878, 15878, 15878, 3824, 3026, 3929, 3429, 4503, 3627, 
    3879, 4883, 3348, 4817, 3545, 4352, 4212, 3673, 2933, 2425, 
    15878, 15878, 15878, 15878, 15878, 15878, 15878, 15878, 15878, 15878, 
    15878, 15878, 15878, 15878, 15878, 15878, 3456, 4394, 2832, 3654, 
    2286, 3627, 3235, 4239, 3542, 2956, 4185, 4076, 4053, 3410, 
    3600, 3848, 15878, 15878, 15878, 15878, 15878, 15878, 15878, 15878, 
    15878, 15878, 15878, 15878, 15878, 15878, 15878, 15878, 4138, 3669, 
    3995, 4464, 3720, 4255, 3115, 3476, 2832, 3619, 2793, 5046, 
    4138, 3999, 4456, 4030, 15878, 15878, 15878, 15878, 15878, 15878, 
    15878, 15878, 15878, 15878, 15878, 15878, 15878, 15878, 15878, 15878, 
    4856, 3770, 3177, 2813, 4658, 2817, 2398, 2960, 4704, 4542, 
    3952, 2945, 2134, 2821, 4270, 3499, 
};
const TfArray<1, int> tensor_dimension10 = { 1, { 256 } };
const ALIGN(8) int8_t tensor_data11[4096] = { 
    -5, 13, 10, 1, -2, -23, 13, 14, -8, -6, 
    -25, -12, 22, -14, 16, 19, 11, -5, 17, -15, 
    11, 20, -28, 14, 26, -7, -16, 24, 13, 1, 
    -28, 21, 17, 30, 20, 14, 9, 21, -28, -13, 
    4, 22, -10, -1, 18, 51, -18, 15, 19, 11, 
    -8, 20, -17, 34, 16, 33, -7, -15, 5, -10, 
    4, -8, 17, -7, -6, -10, 23, -4, 6, -5, 
    3, 12, -62, 28, 59, -47, 9, -7, 17, 10, 
    -19, -6, 2, 3, 25, 8, -5, 1, -23, 1, 
    2, 30, -18, 49, -9, -2, 6, 7, -21, -4, 
    -20, -25, -17, -35, 17, -11, -26, 23, -48, 3, 
    -8, -7, 18, -14, -16, -11, 19, 22, -35, 2, 
    -21, 4, -19, -15, 1, 14, 30, 24, 36, 9, 
    1, -34, -16, 39, 28, -9, -35, 20, -69, 8, 
    18, 4, -25, 3, 3, 26, 20, -9, -12, -2, 
    5, -9, -30, 7, -18, -6, -53, -53, -26, 15, 
    -24, 1, -14, 20, 0, 8, -17, -6, -8, 28, 
    -10, -40, -28, 12, 4, 31, 7, -13, 2, 34, 
    4, -19, -26, -4, -8, -21, -5, -25, 45, 1, 
    2, -59, 52, -13, 35, -19, -18, 11, 34, -6, 
    15, 25, -15, -26, -6, 17, 8, 3, -17, 28, 
    -4, -15, 6, -45, 5, 14, 7, -14, 5, 47, 
    -13, -2, 6, -43, -9, -7, -39, 28, 46, -17, 
    -20, -17, -21, -3, 7, -24, -26, 27, -5, 15, 
    3, -3, 10, -34, -23, -18, -51, 18, 10, 29, 
    -3, -5, -34, 51, 7, 18, 22, 41, 38, -14, 
    11, -22, -13, 48, -20, 9, -8, -8, 84, -18, 
    48, 32, -49, -3, 3, -1, -2, -13, -5, 3, 
    -10, -39, -7, -46, 30, -36, 32, -42, -5, 9, 
    -2, 16, -36, 20, 32, 19, -8, -25, 25, 27, 
    7, 19, 13, -10, -2, -17, -14, 38, 1, 7, 
    -14, -21, 23, 28, -3, 17, 2, -29, -24, 8, 
    14, 1, -13, -6, -10, 1, 17, -41, -12, 7, 
    30, 22, 29, -16, 43, -10, -4, 19, -1, -6, 
    3, -23, 14, -9, -24, 13, -3, -7, 4, 10, 
    11, -19, 17, 20, -9, -35, -40, 2, 42, -53, 
    -30, -1, -61, 17, 40, -14, -20, 1, 67, 6, 
    -28, -25, -16, 43, 58, -16, -26, 17, -14, -4, 
    -63, -51, -18, 74, 16, 7, 27, 34, 12, 8, 
    35, -1, -16, -28, 9, -25, 30, -1, -8, -9, 
    20, -43, -17, 0, -8, 0, -25, -12, -4, -36, 
    -17, 2, -33, -23, -5, -8, -23, 39, 12, -10, 
    9, 4, -3, 21, 10, -23, -24, 4, -57, 2, 
    -18, 10, -7, -37, -15, 22, 15, -8, 1, 3, 
    -5, -12, 14, -1, -5, 43, -15, 3, 8, 3, 
    -2, 9, 34, -6, -7, 50, 5, 1, 12, 11, 
    -1, 8, -8, 22, 11, -34, 2, 21, -7, 10, 
    -19, -29, 3, -4, 2, -29, 60, -1, 25, -62, 
    -14, 10, -15, 3, -17, 2, 11, -7, 5, -27, 
    -11, 41, 5, -13, -5, -4, 11, 5, 14, 22, 
    54, -3, -19, 5, 12, 6, -21, -13, -4, -6, 
    12, 21, 1, 84, 29, -9, -12, -2, -20, 37, 
    -1, -25, -26, -29, 127, 20, 12, -16, -10, 7, 
    34, 8, 26, 1, 3, 9, 17, 2, -4, -63, 
    6, 18, 22, -46, -8, -14, 11, -3, -28, 12, 
    -16, 2, 15, -3, 31, 8, 30, 8, 18, 16, 
    -57, 1, 12, -8, 9, -16, 11, 57, -21, 28, 
    22, -18, -4, 30, 20, -36, -30, -8, 4, 17, 
    -20, 13, 24, 6, -4, -7, -16, -10, 19, -1, 
    -42, 2, -2, 11, 13, -29, 6, -7, -8, -8, 
    5, 11, -14, -10, 19, 3, -28, 9, -7, 37, 
    27, -28, -15, 18, 23, -21, -6, -12, -24, -1, 
    35, -10, -1, -35, 8, 49, 30, 16, -28, -1, 
    26, 18, -4, 46, -16, 29, -48, -20, -9, 21, 
    -19, 20, -1, 48, -1, -21, -24, -5, -1, 52, 
    20, 5, 32, 7, 56, 9, -26, -1, -8, 28, 
    -17, 19, 0, 12, 30, -19, -9, -10, 5, 49, 
    30, -11, -14, 12, 2, 30, 29, -3, -13, 21, 
    19, 24, 21, 41, -14, -21, 18, 39, 29, 11, 
    -1, -6, 16, -26, -47, 14, 14, 30, 34, 0, 
    21, 1, 17, 10, 1, 2, 49, -33, -13, 18, 
    62, -14, -53, 16, -9, -4, 50, 47, -22, 8, 
    15, 30, 32, -16, -40, 45, 88, 5, -27, -15, 
    -29, 55, -27, -75, -35, -26, 14, -37, 15, -14, 
    2, -15, 0, -25, 34, -8, 39, -25, 1, -28, 
    28, -19, -8, 11, 1, -11, 33, 17, -1, 47, 
    8, -14, -2, -7, -17, 28, 20, 40, -7, -11, 
    -19, 18, 22, 9, -13, -11, -2, 14, 3, 20, 
    -2, -21, 11, -5, 10, -17, 15, 21, 11, -20, 
    4, 13, -12, 11, 18, 9, 0, 34, 4, 1, 
    -19, -18, 3, 33, -17, 9, -8, 7, 24, -50, 
    -8, -6, -40, 8, 10, -4, -17, -6, -22, 4, 
    33, 13, 23, -14, 30, -15, 8, -8, -3, 19, 
    -28, -26, 13, -7, 21, -4, 39, 29, 22, -3, 
    -37, -43, 27, 11, 23, -23, -12, -31, 3, 11, 
    -23, 4, -7, 2, 10, 26, 32, -2, -6, 4, 
    -8, -7, -26, 30, 8, 9, 0, -6, -5, 8, 
    -17, 13, 4, 17, 26, 9, -15, 0, 25, -32, 
    6, 18, 12, -8, 10, -1, -11, 17, 0, -2, 
    4, -1, 22, -20, -12, -1, -16, 13, -21, 37, 
    -12, 30, -2, 6, 5, 6, -17, 33, -14, 11, 
    28, 9, 10, -28, 16, -11, 4, -22, 13, 11, 
    -11, -10, 21, -30, -25, -14, 21, -8, 20, -21, 
    -25, 19, 6, -18, 2, -19, 17, 36, -31, -47, 
    -20, -1, -13, -6, -12, -43, 2, 7, -1, -20, 
    -22, -3, -27, -29, -9, 23, 2, 3, 38, -1, 
    5, 5, 2, 6, -26, 8, 30, 28, -3, -26, 
    -6, -12, -5, -27, 22, 3, -14, 23, -35, 16, 
    -6, 8, 16, -17, -32, 29, -8, 39, -11, -12, 
    -30, 29, -2, 41, -6, -29, -32, -33, -21, 37, 
    71, -24, 6, -7, -43, -2, 6, 17, 27, -7, 
    9, 11, -30, -25, -43, 30, 22, 27, 8, -10, 
    -3, 13, -10, 17, -12, -11, 17, -7, 25, -12, 
    47, -15, -16, -23, 1, -6, 1, -5, 35, -37, 
    0, -2, -12, 37, -14, 5, 4, 25, -2, -23, 
    -9, 22, 1, 14, -12, 47, 6, 26, 2, -20, 
    11, 49, 21, 1, 16, 34, -26, -26, 60, 42, 
    24, 9, 5, 2, 29, -5, -9, 25, 14, 6, 
    -28, -47, -15, 6, -10, -27, 4, -22, 9, 24, 
    -8, 26, -20, 10, -27, -1, -20, -15, 4, 26, 
    31, -9, 5, -15, -14, 1, -7, -12, 25, 24, 
    2, 1, 14, 34, 7, 11, 44, -26, -6, -21, 
    30, 8, -27, 9, -21, -49, -35, 7, 24, -18, 
    3, -2, 20, 19, -4, 2, 2, 10, -6, 33, 
    0, 28, -33, 36, 19, 13, 5, -12, 6, 44, 
    -16, 29, 8, 20, -9, -14, 8, 23, 33, 7, 
    -9, 8, -23, 35, 4, -17, -30, -26, 3, 7, 
    45, 4, -29, -9, 20, -43, -14, -30, -32, 7, 
    -17, -48, -6, 31, 0, 29, -20, 17, 30, -15, 
    16, 25, 6, 24, -25, -27, -35, 12, -29, 59, 
    -27, -12, 14, 29, 20, -8, -39, -22, -31, -19, 
    20, -24, -9, -16, 35, -38, -24, 15, 3, -24, 
    -7, 19, -6, 9, 0, 8, -38, 25, 2, -8, 
    41, 7, -9, -3, 11, 28, -11, -9, 30, 32, 
    -4, 1, -1, 13, 50, -33, -13, -36, -12, 29, 
    9, 19, 5, 28, -9, 19, -4, 1, -39, -25, 
    -28, -7, 12, -33, 11, -28, 30, -19, -20, -11, 
    -5, -17, -24, -17, -16, 14, 5, 4, 3, 15, 
    -2, 12, 3, -18, 18, -30, -15, -26, -32, -9, 
    0, -4, 35, -4, 9, -18, -17, 0, 0, 7, 
    5, -14, 15, 16, -4, 20, 18, -2, -14, -32, 
    16, -3, -16, 19, 29, -32, -33, -8, 8, 6, 
    -20, -18, 6, 2, -5, 24, -15, -29, -8, 10, 
    -3, 7, -3, -9, -27, 8, -1, -22, -11, -1, 
    -21, -11, -11, 2, -21, -24, -51, -17, 22, 29, 
    7, 0, 25, 53, 2, -31, 14, -5, -22, 35, 
    27, 3, 27, -1, -24, -19, -14, -25, -14, -34, 
    -21, -25, 12, -2, 8, -39, 11, -17, -7, 14, 
    8, -8, 45, -48, -18, 5, -45, 0, 11, 9, 
    2, 17, 7, 8, 52, -24, -39, 47, 15, -33, 
    -4, -19, 31, -18, 2, -28, -13, -5, 0, 24, 
    22, -6, 0, -19, 21, -2, -45, -3, -20, -4, 
    15, 8, 27, -8, 49, 32, 2, 8, -7, 14, 
    14, -28, 13, 7, -7, -51, -45, -8, -27, -21, 
    23, -11, 3, -36, 14, -20, 41, 5, 32, -15, 
    -58, 14, 11, -2, -11, -16, 9, -19, 3, 14, 
    1, 7, 30, -3, -15, -15, -2, 10, -6, -3, 
    -48, 42, 15, -24, 6, -1, 39, 9, 0, 24, 
    20, 7, 7, 5, 3, -14, -27, -32, 2, -35, 
    11, -17, 6, -17, -28, -19, 6, -26, -4, 4, 
    27, 2, 29, -63, -5, 31, -40, 51, -14, 6, 
    -6, -25, 9, 11, 14, -16, -11, 52, 29, 2, 
    -19, 12, -7, -14, 10, 10, -20, 4, -45, -2, 
    -13, -6, 4, 29, -35, 15, 9, 40, -5, -2, 
    -22, 12, 21, 27, -42, -50, -48, 4, 72, -5, 
    13, -41, 10, 17, -17, -1, -21, 28, 14, 26, 
    15, 34, 14, 3, -4, -31, -24, 13, -14, -25, 
    -17, 10, -10, -23, -12, 43, -36, 8, 14, -1, 
    37, 9, 19, -8, -29, -29, 8, 2, 12, -12, 
    -5, -21, -1, -3, 0, 4, -14, 11, 36, -1, 
    -14, -16, -20, 9, 19, 9, 5, 24, 15, -56, 
    38, -16, -47, -30, 21, 20, 16, 15, -20, -18, 
    23, 3, 14, 18, -8, -6, 16, -10, 3, 25, 
    5, -2, 38, -23, 13, -42, -7, 32, 33, -47, 
    -29, 7, -33, 17, 2, -14, -18, -31, 21, -17, 
    37, -66, -41, 35, 38, -27, -34, -41, -52, 81, 
    -32, -3, -40, 46, 22, -26, 3, 5, 15, 4, 
    -10, 1, 1, -11, 18, 7, -9, 53, 22, 39, 
    -7, 40, 9, 9, 16, 25, 21, 2, 18, -6, 
    23, 48, 19, 32, 0, 42, -8, -10, -10, -1, 
    -2, -13, -52, -34, -5, -20, 3, 20, 4, -54, 
    3, 35, 7, -5, -17, 18, 8, -18, -7, 45, 
    -14, 14, -27, 27, 9, 37, 8, -37, 35, 31, 
    3, 21, 10, 10, 44, -12, 35, 18, -66, 9, 
    -40, -46, -71, 17, 25, -25, 14, -10, -27, -22, 
    19, -20, -24, 0, -32, -5, 12, -15, -36, -32, 
    5, -37, -2, -16, 2, -3, 18, -1, -7, -22, 
    33, -14, -9, -6, 1, -10, -20, 6, 25, 3, 
    27, -29, 9, 28, -26, -24, 14, 26, 0, 4, 
    15, 8, -22, -2, -15, 29, -16, -62, 1, 30, 
    11, -26, -2, 6, -15, -9, 34, 2, 18, 1, 
    -29, -20, 20, -11, -54, 50, -3, 11, 18, 6, 
    -22, 40, 14, -6, 25, 22, 6, -51, 29, 7, 
    25, -34, 38, 6, -11, -45, 14, -9, -10, -9, 
    18, 21, 54, -16, -55, 49, 28, 12, -49, -23, 
    -44, 43, -11, -41, -53, 40, -13, 12, 20, -26, 
    -40, -22, 8, -8, -29, -56, -24, 21, 53, -10, 
    31, -25, -27, 14, -20, 18, -42, 26, 24, 56, 
    -24, -3, -4, 22, -14, -11, -7, 18, 17, -26, 
    18, -3, 14, -10, -2, 20, 10, -9, 9, -12, 
    -17, -15, 11, 4, -1, 19, 13, 6, 20, -3, 
    13, 19, -4, 12, -4, -26, 12, 13, -16, 17, 
    -16, 14, -30, -18, 42, -25, -12, 23, 50, 47, 
    -5, -24, -58, 28, -28, 26, 0, -37, 10, -21, 
    -8, -28, -11, -53, -6, 7, 16, -8, 41, 21, 
    28, -76, -65, 14, 28, -3, -23, 3, -34, -24, 
    4, 5, -13, -20, 11, -36, -3, 18, -18, -16, 
    18, -8, 11, 5, -11, 7, 15, 9, 20, 16, 
    6, -21, 52, 1, -25, 11, 17, -5, -33, 8, 
    -20, 33, -4, -12, -10, 4, 10, 25, -5, 18, 
    -3, 34, -28, 4, 21, 6, 22, -4, -25, -28, 
    28, 12, -12, 9, -2, 6, -22, 6, -12, -43, 
    3, -25, 22, -1, 26, -8, -21, -1, -30, 2, 
    -10, 8, 36, 2, 8, -19, 3, -2, -21, -8, 
    -15, 4, -17, 19, -8, 27, -23, 63, -36, -4, 
    5, 17, 45, -19, -6, 25, -17, -29, 44, 27, 
    -32, -51, -16, -15, 4, 17, -23, 27, 8, 1, 
    -16, 9, 10, -16, 16, 36, -24, 26, -5, 27, 
    -23, 6, -18, 13, -19, 12, -8, 7, -2, 5, 
    -4, -30, -9, -10, 14, 1, -5, -39, -16, 23, 
    6, -28, -9, -3, 2, -9, 21, 2, 32, 25, 
    -8, 4, -23, -5, 57, 24, -17, -10, -5, 29, 
    -30, 8, 44, 17, -9, -20, 58, -15, 8, 7, 
    -13, 28, 3, 5, -5, 34, 18, -1, -7, 20, 
    6, 26, 16, -2, -15, 3, -19, 28, 45, 27, 
    -18, 27, 13, 23, 29, -13, -3, 4, 18, 33, 
    15, -43, -14, -16, 3, -21, -37, -36, -2, 5, 
    -31, -41, 37, -16, 37, -58, -18, -21, -40, 33, 
    -36, 4, 15, 33, 2, -31, -16, -9, -38, 7, 
    -6, 18, 21, -12, -2, 6, -9, -34, -27, 37, 
    11, -17, -14, 3, 23, 9, 18, -36, -1, 4, 
    -27, 19, 7, -4, -42, 24, 37, 29, 6, 0, 
    -14, 9, -3, -8, -45, -32, 2, 2, 18, -7, 
    -16, -11, 6, -14, -25, 16, 2, 12, 15, -36, 
    1, -10, 35, 22, 54, -23, 16, -11, -27, -20, 
    1, 36, 1, 31, -10, -8, 2, -7, 21, -12, 
    -2, -6, -13, -50, -25, -9, 12, -23, -5, 2, 
    0, -9, 3, 20, 35, -14, -15, -8, 12, -16, 
    -31, -9, -7, 8, 37, -11, 1, -16, 22, 25, 
    -30, 7, 6, 8, 12, 32, 7, 5, 47, 17, 
    -19, 6, 6, 45, -18, -26, 22, 0, 4, 2, 
    -9, -6, 20, -19, 22, 23, -70, -12, 12, -4, 
    -13, -4, 6, 37, 23, 17, -51, -1, -6, 26, 
    30, -15, -2, 12, -32, 33, 25, 11, 24, 15, 
    -4, 26, 12, 20, -18, 22, -24, -13, 71, 7, 
    -42, -4, 1, 14, -6, 5, -20, -2, -2, -3, 
    -11, 23, -29, -31, -19, 4, 12, -16, 28, -39, 
    28, -3, 22, -10, 8, -31, -26, 14, 40, 7, 
    -10, -1, 1, 9, 1, -19, 33, 4, -38, 19, 
    -13, -12, -3, 11, -20, -34, -42, 37, 7, 21, 
    -2, -5, 21, 4, 59, 7, -15, 19, 27, -21, 
    32, 34, 1, 28, 31, 6, -27, -1, -30, -15, 
    35, -23, -42, -4, 23, -2, 20, -57, 27, 39, 
    11, -9, -5, -2, 8, 3, 4, 12, -11, 8, 
    25, -13, 2, 6, -29, -9, 11, 45, -11, -3, 
    -33, 2, -33, -62, -31, 6, 37, -11, 10, -20, 
    24, 58, 13, -6, -19, -9, -56, -7, 20, 5, 
    9, 14, -9, 14, -11, -1, -52, 21, -22, 38, 
    -49, -48, 8, -16, 30, -9, -46, 2, 18, -1, 
    -11, -13, 20, 20, 39, -34, -3, -11, 13, -15, 
    19, 29, 19, -18, 12, -24, -6, -16, 41, -61, 
    -2, -18, 11, 39, -40, -10, 5, 44, 36, 11, 
    -38, -13, 1, 31, -40, -22, -17, 38, 10, 19, 
    10, -27, 6, -7, 18, -29, -7, -5, -24, -9, 
    46, 21, -30, -13, 18, -7, 2, -11, -6, -17, 
    13, -12, -26, -22, -28, 45, 0, -25, 19, 14, 
    3, 32, 53, -11, -28, 16, 5, 11, -35, 19, 
    -36, -12, 39, 18, -28, -4, 38, 10, 5, -41, 
    -15, 34, 55, -27, -22, -14, -21, -41, -29, -35, 
    28, -56, 1, -52, -21, 23, 33, -43, -10, -8, 
    25, -13, 9, -31, -44, 7, 13, 28, 18, -5, 
    3, 4, 12, 8, 2, 25, -23, -15, -2, 2, 
    -17, -43, -41, 30, -27, -29, 21, 10, -16, -45, 
    -29, 6, 37, -22, 23, 0, -45, 24, 22, 21, 
    0, -19, -20, 9, 17, 2, -40, -15, 5, 13, 
    -24, -13, 24, 23, 12, 1, 6, -43, 5, 2, 
    -3, -13, 2, -14, -32, 16, -9, -5, -40, -11, 
    -5, -18, 6, -3, -32, -8, -3, 17, 1, -3, 
    10, 3, -1, -2, -40, -44, -32, 34, 16, 53, 
    -19, 3, -13, 19, 22, 4, -16, -3, 4, 0, 
    5, 16, -36, -9, 1, 7, 0, -31, -18, 28, 
    16, 20, -2, 0, 4, -31, 24, 9, 0, -11, 
    6, -7, -7, 11, 5, -3, -21, 5, 11, -9, 
    7, 19, -15, -14, 35, 12, 1, 8, -24, 16, 
    34, 3, -24, 15, -6, 28, 33, 16, 24, 26, 
    9, 15, 0, 13, -16, -1, 9, 34, -35, 16, 
    -11, 8, -42, 15, 1, -5, 11, 29, 34, -9, 
    38, 1, -19, -22, 13, -6, -1, 4, 49, 18, 
    -19, -48, -31, -28, -28, 8, 0, 9, 1, -19, 
    -29, 12, -1, -22, -1, 6, 23, 30, 12, -16, 
    4, 15, -13, 38, 2, -37, -12, -11, -30, 9, 
    18, -13, 37, 39, 19, 2, -28, 20, 1, 4, 
    -1, -14, 15, -27, 9, -35, 23, 10, -3, -8, 
    1, 7, -3, -8, 7, 11, 7, 5, 33, -25, 
    6, 21, 11, -10, -1, 0, -3, 10, 25, 66, 
    -6, 22, -47, 12, 38, -14, 4, -17, 5, -12, 
    20, -14, 9, -5, 2, -5, 1, -6, -25, 22, 
    33, -18, -11, -17, 4, 9, -9, -43, 11, -24, 
    24, 25, 1, -1, 12, 23, 1, -13, -2, 5, 
    -4, -24, 11, 4, -41, -12, -10, -32, -10, -7, 
    -38, -2, -1, 12, -7, 6, -5, 35, 2, -22, 
    17, 36, -17, 42, 22, 14, 13, -6, 7, 25, 
    7, 44, -34, -12, 8, -3, 17, 7, -19, 14, 
    15, 24, 39, -14, 9, 25, 26, 8, -19, 15, 
    -15, 14, -11, -6, -9, 53, -30, 29, 26, -10, 
    -35, -12, -6, -19, 15, 3, -4, 8, 1, -4, 
    -3, -29, 1, -2, 22, 3, -2, 5, 9, -19, 
    15, 10, 1, 1, -12, -40, 14, 3, 7, -7, 
    -3, -38, 41, -13, 23, -3, 7, -2, 24, -5, 
    33, -10, -2, 40, -45, 8, -14, 47, -12, -6, 
    -2, -11, 30, -2, -15, 11, -29, -15, -15, 31, 
    6, -6, -19, 47, 25, -14, -8, 44, -18, 11, 
    28, 12, -13, 13, -13, -29, 6, -10, -14, 23, 
    25, -26, -11, 41, -16, -2, 0, -29, -1, -17, 
    7, 28, 3, 35, -15, 1, -28, 21, 24, -7, 
    22, -9, -15, 5, -18, 36, -54, -56, 23, 7, 
    20, -39, -3, -18, 31, 13, 21, -40, 51, 22, 
    2, -53, -12, -6, 48, -2, 17, -16, 7, -6, 
    -10, -10, -35, 18, 11, 21, 8, -8, 3, -25, 
    -28, -17, -14, -22, 17, 25, -34, -7, 1, 19, 
    -14, -24, -21, 21, 12, 25, 5, -18, -22, 28, 
    12, 26, 0, 6, -37, -35, 32, 18, 22, -13, 
    3, 27, -1, -5, -7, -6, 31, -10, -1, -7, 
    -16, 27, -14, -62, 20, -7, 13, 1, 34, 3, 
    2, -10, 11, 20, -19, 25, -19, 34, 39, 14, 
    0, 28, 10, 10, -23, -1, -11, -19, 11, -57, 
    17, -9, 10, -17, -9, -23, -2, 38, -17, 32, 
    -25, -11, 9, -15, 35, -25, 29, -10, -22, -19, 
    -36, -4, 0, -10, -5, 39, -5, -6, 24, -29, 
    -1, 3, 14, -14, 2, -1, -24, -22, -49, 84, 
    10, -26, 0, -6, -13, 34, 46, -16, -30, 11, 
    -29, -12, 37, -3, -13, 0, 61, 20, 17, 7, 
    3, 10, 62, 9, -11, 2, -2, 47, -7, -44, 
    6, 24, 2, 2, -18, 33, 15, 26, 12, 14, 
    11, 65, -7, -20, -15, 33, -16, 41, -2, -14, 
    39, -18, 3, -20, -1, 3, -20, 10, 16, -24, 
    65, 4, 77, -25, 18, 35, -42, -11, 3, 40, 
    50, -33, -8, 10, -67, 16, 19, -12, -39, -33, 
    18, 17, 33, -20, -17, 46, 27, -29, -14, 0, 
    -7, -16, -33, -40, -11, 18, -36, 1, -5, -41, 
    -21, -11, 2, 16, 33, -31, -16, 6, -38, 13, 
    15, 16, -7, -7, -12, -13, 6, 17, -55, -3, 
    7, 3, -7, -18, -13, 28, 10, 6, 5, 27, 
    -4, -55, 4, -6, 33, -26, 22, -22, -13, -12, 
    -17, 2, 7, 5, -17, 22, -18, -15, -14, 35, 
    50, 19, 0, 9, -8, 12, -44, -25, -17, 22, 
    -4, -10, 34, 1, 16, -12, -8, -13, -19, -34, 
    -14, -28, 2, -16, 11, -22, -11, 21, -13, 1, 
    -10, -3, -7, -40, 3, 12, 27, 15, 20, -7, 
    10, 5, 8, 34, 14, -28, 13, 21, 20, 2, 
    21, 11, -15, 2, 28, -1, -37, -25, 3, 25, 
    28, -23, -15, -18, 8, -12, -11, -6, -7, 20, 
    24, -23, 43, -31, 0, -7, -12, -17, -15, 8, 
    51, -15, -18, 11, -38, 17, 56, -13, -2, -3, 
    38, 16, 16, -45, -14, 39, 46, -16, -10, -2, 
    11, 48, -58, -55, -52, 43, -4, 0, 12, 11, 
    -54, -1, 10, -5, -11, -2, -14, 12, 21, 18, 
    23, -46, 43, 24, 0, 37, 39, -12, 11, 35, 
    37, 37, 26, 8, -45, -7, 3, 12, -14, -34, 
    -12, -15, -9, -2, 20, -21, 42, -8, -13, -2, 
    -30, 9, -9, -27, 37, -28, -19, -15, -17, -5, 
    -33, -7, 16, -7, 28, 21, -20, 19, -25, 8, 
    -18, 1, -9, -6, -11, 7, -11, 27, 26, 34, 
    22, 30, -31, 4, -19, 0, -26, -38, -24, 10, 
    -2, -25, -2, -9, -12, -14, -6, -47, 42, 20, 
    36, -19, 1, -12, 12, -13, 13, 4, -4, -2, 
    8, -10, 16, -15, -35, 5, -5, -12, -11, -19, 
    -36, 38, 20, 37, 1, -6, 37, 12, 0, 17, 
    10, 29, 8, 8, 6, 9, 6, -33, -64, -5, 
    48, 14, -15, -32, -14, 26, 32, 9, 15, -10, 
    24, 20, -31, -3, 18, 22, 25, 17, 5, 18, 
    -7, 0, 11, -61, -35, -30, -32, -17, 21, -6, 
    -16, 2, -14, -4, -14, -21, -30, 29, 54, -14, 
    11, -16, -62, 2, -24, 10, -31, 0, 17, 21, 
    42, 7, 10, 13, -2, 7, 11, 63, -5, 7, 
    6, 9, 18, -31, 42, 10, -3, 3, -2, 5, 
    -2, -31, 16, -37, -12, 21, -15, -47, -2, 24, 
    17, 19, 23, -28, -2, 17, -11, 7, -67, 55, 
    21, 27, -19, -85, 15, -21, 8, 46, -23, -14, 
    -22, -12, 7, 11, 21, -21, -9, -4, -25, 1, 
    5, -18, -12, 10, 9, 17, 8, -8, -22, 23, 
    -10, -16, 9, -16, 34, 37, 35, -30, -42, 7, 
    17, -29, 11, 5, 0, -20, 22, -16, -26, 55, 
    -33, 15, -16, 15, 4, 15, 13, -2, 1, -20, 
    -1, -6, -12, 30, 8, -20, -27, 23, 12, -13, 
    -10, 13, -10, 7, 6, 16, 22, 19, -27, 24, 
    12, 23, 13, -13, -27, -19, 22, -34, -10, -17, 
    -21, -8, 17, 13, 13, -30, 21, 30, -1, -41, 
    -20, 21, 40, -21, -33, -4, -33, -18, 26, -21, 
    -10, -20, 1, 9, 30, -19, -39, 24, 19, 1, 
    -26, 10, -14, 24, -13, -60, -27, 8, -19, 31, 
    -21, 6, -7, -2, 11, -10, -22, 28, -20, 24, 
    -11, 12, -25, -27, 21, 41, -10, -10, 6, 16, 
    26, -29, 15, -14, 2, -12, 4, -4, 14, -23, 
    20, 29, 27, -8, 8, 46, 23, 9, -12, 13, 
    -41, 10, 73, 18, -1, -19, 34, -1, 0, -22, 
    -18, 14, 65, -9, -43, 22, -54, 27, -29, -32, 
    -16, -16, -16, -7, -13, 21, 30, -30, -30, 45, 
    41, 3, 19, -16, -10, 69, 24, 24, -2, -20, 
    -44, 20, 15, -42, -30, 25, 5, 15, -1, -13, 
    18, -12, -12, -8, -16, -19, -19, 22, 33, 0, 
    16, 16, 32, -47, 0, -18, -26, 19, 23, 11, 
    -9, -2, -20, -3, -3, -24, -8, 5, 21, 23, 
    -25, 21, 11, 4, 28, 8, -5, 0, -1, 15, 
    19, 7, -19, -12, -15, -23, 38, -9, 8, 7, 
    31, 5, -16, 42, -7, 6, 3, -35, -53, 50, 
    40, -45, -7, -26, 22, 18, -3, 0, 28, 29, 
    2, -17, 1, 4, -34, 1, -22, 17, -17, 21, 
    5, -3, -3, 43, -3, 7, 21, -13, 2, -23, 
    7, -16, 11, 11, -26, -3, 7, -10, 37, -21, 
    16, 41, -33, -24, -31, 17, 0, 14, 11, -24, 
    -8, 26, 19, -11, -15, 12, -3, -12, 31, 15, 
    11, -13, 15, 9, 0, 14, 3, -4, 20, -9, 
    20, 24, 4, 20, 5, -10, -34, -11, 26, -24, 
    11, -22, -29, 10, 11, -2, 5, 22, -36, 26, 
    -17, -8, 0, -6, 23, 5, 0, -10, -9, 51, 
    -19, -30, 22, -13, 21, 10, -21, -19, -18, 21, 
    -44, 9, 23, 5, 16, 12, -37, -2, 4, 52, 
    -9, -4, -36, 10, 32, -36, -52, 8, 20, -10, 
    -11, -9, 23, 40, 30, 23, 
};
const TfArray<1, int> tensor_dimension11 = { 1, { 4096 } };
const ALIGN(8) int16_t tensor_data12[256] = { 
    10718, 10718, 10718, 10718, 10718, 10718, 10718, 10718, 10718, 10718, 
    10718, 10718, 10718, 10718, 10718, 10718, 20, 29, -17, -39, 
    -39, 11, 33, 15, -29, 20, -42, -54, -53, 21, 
    78, 24, 10718, 10718, 10718, 10718, 10718, 10718, 10718, 10718, 
    10718, 10718, 10718, 10718, 10718, 10718, 10718, 10718, 5, 0, 
    -63, 11, 25, 22, -28, 35, 35, 28, 101, 81, 
    32, -27, 36, 65, 10718, 10718, 10718, 10718, 10718, 10718, 
    10718, 10718, 10718, 10718, 10718, 10718, 10718, 10718, 10718, 10718, 
    4, -28, -7, -15, -14, -41, -60, -23, -36, 22, 
    -20, -30, 41, 32, 51, 21, 10718, 10718, 10718, 10718, 
    10718, 10718, 10718, 10718, 10718, 10718, 10718, 10718, 10718, 10718, 
    10718, 10718, -19, 17, -17, -36, 32, -27, -8, -8, 
    -1, -59, -31, 139, -64, 11, -16, 19, 10718, 10718, 
    10718, 10718, 10718, 10718, 10718, 10718, 10718, 10718, 10718, 10718, 
    10718, 10718, 10718, 10718, -21, -2, -51, -2, 56, -4, 
    16, 0, 61, -12, -25, -41, -12, 80, -22, 11, 
    10718, 10718, 10718, 10718, 10718, 10718, 10718, 10718, 10718, 10718, 
    10718, 10718, 10718, 10718, 10718, 10718, 6, 17, 18, -11, 
    78, -6, 3, 11, 17, 0, 68, 20, -85, -24, 
    -41, -29, 10718, 10718, 10718, 10718, 10718, 10718, 10718, 10718, 
    10718, 10718, 10718, 10718, 10718, 10718, 10718, 10718, 31, -23, 
    -56, 71, 3, 24, -30, -13, -51, -27, 89, 63, 
    -26, 33, 11, -31, 10718, 10718, 10718, 10718, 10718, 10718, 
    10718, 10718, 10718, 10718, 10718, 10718, 10718, 10718, 10718, 10718, 
    17, -13, 43, 14, 11, 18, 22, 38, -3, -51, 
    -8, 18, -37, 1, 6, -5, 
};
const TfArray<1, int> tensor_dimension12 = { 1, { 256 } };
const ALIGN(8) int64_t tensor_data13[4] = { 
    1, 1, 1, 32, 
};
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const ALIGN(8) int64_t tensor_data14[2] = { 
    1, 1, 
};
const TfArray<1, int> tensor_dimension14 = { 1, { 2 } };
const TfArray<3, int> tensor_dimension15 = { 3, { 1,1,32 } };
const TfArray<1, float> quant15_scale = { 1, { 0.15701916813850403, } };
const TfArray<1, int> quant15_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,32 } };
const TfArray<1, float> quant16_scale = { 1, { 0.15701916813850403, } };
const TfArray<1, int> quant16_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<2, int> tensor_dimension17 = { 2, { 1,128 } };
const TfArray<1, float> quant17_scale = { 1, { 0.2679019570350647, } };
const TfArray<1, int> quant17_zero = { 1, { 30 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<2, int> tensor_dimension18 = { 2, { 1,128 } };
const TfArray<1, float> quant18_scale = { 1, { 0.016610343009233475, } };
const TfArray<1, int> quant18_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<2, int> tensor_dimension19 = { 2, { 1,128 } };
const TfArray<1, float> quant19_scale = { 1, { 0.2679741382598877, } };
const TfArray<1, int> quant19_zero = { 1, { 31 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(8) int8_t tensor_data20[128] = { 
    -101, -96, -98, -115, -115, -103, -100, -110, -98, -114, 
    -99, -122, -98, -99, -110, -105, -91, -99, -115, -97, 
    -93, -106, -90, -91, -105, -126, -81, -96, -117, -105, 
    -92, -107, 111, 97, 105, 112, 94, 97, 115, 119, 
    110, 109, 109, 95, 127, 122, 85, 111, 104, 124, 
    112, 102, 120, 117, 63, 127, 112, 94, 121, 125, 
    68, 121, 122, 119, -111, -108, -95, -80, -89, -108, 
    -126, -85, -98, -111, -97, -99, -102, -81, -91, -93, 
    -95, -113, -102, -94, -100, -109, -116, -95, -95, -105, 
    -89, -114, -107, -84, -102, -128, -94, -91, -108, -85, 
    -118, -115, -103, -114, -90, -117, -106, -120, -109, -116, 
    -115, -117, -94, -106, -102, -107, -86, -93, -88, -120, 
    -106, -124, -105, -99, -102, -101, -102, -103, 
};
const TfArray<1, int> tensor_dimension20 = { 1, { 128 } };
const TfArray<1, float> quant20_scale = { 1, { 0.0046555530279874802, } };
const TfArray<1, int> quant20_zero = { 1, { -102 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,128 } };
const TfArray<1, float> quant21_scale = { 1, { 0.26899391412734985, } };
const TfArray<1, int> quant21_zero = { 1, { 27 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,32 } };
const TfArray<1, float> quant22_scale = { 1, { 0.26899391412734985, } };
const TfArray<1, int> quant22_zero = { 1, { 27 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<2, int> tensor_dimension23 = { 2, { 1,32 } };
const TfArray<1, float> quant23_scale = { 1, { 0.26899391412734985, } };
const TfArray<1, int> quant23_zero = { 1, { 27 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<2, int> tensor_dimension24 = { 2, { 1,32 } };
const TfArray<1, float> quant24_scale = { 1, { 0.26899391412734985, } };
const TfArray<1, int> quant24_zero = { 1, { 27 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<2, int> tensor_dimension25 = { 2, { 1,32 } };
const TfArray<1, float> quant25_scale = { 1, { 0.26899391412734985, } };
const TfArray<1, int> quant25_zero = { 1, { 27 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<2, int> tensor_dimension26 = { 2, { 1,32 } };
const TfArray<1, float> quant26_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<2, int> tensor_dimension27 = { 2, { 1,32 } };
const TfArray<1, float> quant27_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,32 } };
const TfArray<1, float> quant28_scale = { 1, { 11.758289337158203, } };
const TfArray<1, int> quant28_zero = { 1, { 93 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,32 } };
const TfArray<1, float> quant29_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant29_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,32 } };
const TfArray<1, float> quant30_scale = { 1, { 0.0078125, } };
const TfArray<1, int> quant30_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfArray<2, int> tensor_dimension31 = { 2, { 1,32 } };
const TfArray<1, float> quant31_scale = { 1, { 0.0078428881242871284, } };
const TfArray<1, int> quant31_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const TfArray<2, int> tensor_dimension32 = { 2, { 1,32 } };
const TfArray<1, float> quant32_scale = { 1, { 11.761137008666992, } };
const TfArray<1, int> quant32_zero = { 1, { 93 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const TfArray<2, int> tensor_dimension33 = { 2, { 1,32 } };
const TfArray<1, float> quant33_scale = { 1, { 0.0078125, } };
const TfArray<1, int> quant33_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const TfArray<2, int> tensor_dimension34 = { 2, { 1,32 } };
const TfArray<1, float> quant34_scale = { 1, { 0.0078431367874145508, } };
const TfArray<1, int> quant34_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(4) int32_t tensor_data35[1] = { 
    1556, 
};
const TfArray<1, int> tensor_dimension35 = { 1, { 1 } };
const TfArray<1, float> quant35_scale = { 1, { 2.240065805381164e-05, } };
const TfArray<1, int> quant35_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const TfArray<4, int> tensor_dimension36 = { 4, { 1,1,1,32 } };
const TfArray<1, float> quant36_scale = { 1, { 0.0078431367874145508, } };
const TfArray<1, int> quant36_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(8) int8_t tensor_data37[1*1*1*32] = { 
  /* [0][0][][] */ 90,-32,81,-36,-82,-22,102,-10,-46,-36,71,47,93,-25,41,-102,44,37,-55,127,-84,50,42,35,60,6,107,37,-114,-18,-72,54, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 1,1,1,32 } };
const TfArray<1, float> quant37_scale = { 1, { 0.0028560841456055641, } };
const TfArray<1, int> quant37_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const TfArray<4, int> tensor_dimension38 = { 4, { 1,1,1,1 } };
const TfArray<1, float> quant38_scale = { 1, { 0.014005058445036411, } };
const TfArray<1, int> quant38_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const TfArray<2, int> tensor_dimension39 = { 2, { 1,1 } };
const TfArray<1, float> quant39_scale = { 1, { 0.014005058445036411, } };
const TfArray<1, int> quant39_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
uint8_t ALIGN(4) opdata0[150] = { 107, 116, 0, 109, 112, 0, 32, 24, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 248, 255, 255, 255, 0, 0, 0, 0, 0, 97, 103, 103, 112, 0, 8, 32, 0, 0, 0, 24, 0, 0, 0, 0, 111, 116, 112, 0, 8, 32, 0, 0, 0, 3, 0, 254, 255, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 1, 34, 20, 7, 83, 43, 125, 123, 72, 59, 56, 7, 1, 7, 87, 14, 1, 129, 77, 0, 64, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs0 = { 3, { 1,7,8 } };
const TfArray<1, int> outputs0 = { 1, { 15 } };
const ALIGN(4) uint8_t opdata1[8] = { 1, 0, 0, 0, 0, 0, 0, 0,  }; /* op type 88=UNPACK */
const TfArray<1, int> inputs1 = { 1, { 15 } };
const TfArray<1, int> outputs1 = { 1, { 16 } };
uint8_t ALIGN(4) opdata2[142] = { 107, 116, 0, 109, 112, 0, 8, 32, 0, 0, 0, 32, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 2, 0, 255, 255, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 7, 99, 43, 117, 115, 72, 59, 56, 7, 1, 7, 103, 14, 0, 121, 77, 0, 0, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs2 = { 3, { 16,9,10 } };
const TfArray<1, int> outputs2 = { 1, { 17 } };
uint8_t ALIGN(4) opdata3[142] = { 107, 116, 0, 109, 112, 0, 8, 32, 0, 0, 0, 32, 0, 0, 0, 0, 97, 103, 103, 112, 0, 24, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111, 116, 112, 0, 8, 128, 0, 0, 0, 1, 0, 255, 255, 0, 111, 116, 116, 0, 115, 99, 114, 97, 116, 99, 104, 0, 97, 107, 112, 0, 32, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 1, 34, 20, 7, 99, 43, 117, 115, 72, 59, 56, 7, 1, 7, 103, 14, 0, 121, 77, 0, 0, 20, 40, 4, 20, 20, 4, 4, 14, 36, 1,  }; /* custom_initial_data */
const TfArray<3, int> inputs3 = { 3, { 0,11,12 } };
const TfArray<1, int> outputs3 = { 1, { 18 } };
const TfLiteAddParams opdata4 = { kTfLiteActNone };
const TfArray<2, int> inputs4 = { 2, { 17,18 } };
const TfArray<1, int> outputs4 = { 1, { 19 } };
const TfLiteAddParams opdata5 = { kTfLiteActNone };
const TfArray<2, int> inputs5 = { 2, { 19,20 } };
const TfArray<1, int> outputs5 = { 1, { 21 } };
const ALIGN(4) uint8_t opdata6[4] = { 4, 0, 0, 0,  }; /* op type 49=SPLIT */
const TfArray<2, int> inputs6 = { 2, { 3,21 } };
const TfArray<4, int> outputs6 = { 4, { 22,23,24,25 } };
uint8_t ALIGN(4) opdata7[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs7 = { 2, { 22,4 } };
const TfArray<1, int> outputs7 = { 1, { 26 } };
uint8_t ALIGN(4) opdata8[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs8 = { 2, { 23,4 } };
const TfArray<1, int> outputs8 = { 1, { 27 } };
const TfLiteMulParams opdata9 = { kTfLiteActNone };
const TfArray<2, int> inputs9 = { 2, { 27,2 } };
const TfArray<1, int> outputs9 = { 1, { 28 } };
uint8_t ALIGN(4) opdata10[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs10 = { 2, { 25,4 } };
const TfArray<1, int> outputs10 = { 1, { 29 } };
uint8_t ALIGN(4) opdata11[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs11 = { 2, { 24,5 } };
const TfArray<1, int> outputs11 = { 1, { 30 } };
const TfLiteMulParams opdata12 = { kTfLiteActNone };
const TfArray<2, int> inputs12 = { 2, { 26,30 } };
const TfArray<1, int> outputs12 = { 1, { 31 } };
const TfLiteAddParams opdata13 = { kTfLiteActNone };
const TfArray<2, int> inputs13 = { 2, { 28,31 } };
const TfArray<1, int> outputs13 = { 1, { 32 } };
uint8_t ALIGN(4) opdata14[0] = {  }; /* custom_initial_data */
const TfArray<2, int> inputs14 = { 2, { 32,6 } };
const TfArray<1, int> outputs14 = { 1, { 33 } };
const TfLiteMulParams opdata15 = { kTfLiteActNone };
const TfArray<2, int> inputs15 = { 2, { 29,33 } };
const TfArray<1, int> outputs15 = { 1, { 34 } };
const TfLiteReshapeParams opdata16 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs16 = { 2, { 34,13 } };
const TfArray<1, int> outputs16 = { 1, { 36 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 36,37,35 } };
const TfArray<1, int> outputs17 = { 1, { 38 } };
const TfLiteReshapeParams opdata18 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs18 = { 2, { 38,14 } };
const TfArray<1, int> outputs18 = { 1, { 39 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension0, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0)) },},
  { kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension1, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1)) },},
  { kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2)) },},
  { kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 4, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 256, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 896, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 128, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 4096, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 512, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 4096, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt16, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 512, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt64, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt64, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 16, {kTfLiteNoQuantization, nullptr },},
  { kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension15, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16)) },},
  { kTfLiteInt8, tensor_arena + 256, (TfLiteIntArray*)&tensor_dimension17, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension19, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19)) },},
  { kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension21, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21)) },},
  { kTfLiteInt8, tensor_arena + 224, (TfLiteIntArray*)&tensor_dimension22, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension23, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23)) },},
  { kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension24, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24)) },},
  { kTfLiteInt8, tensor_arena + 160, (TfLiteIntArray*)&tensor_dimension25, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25)) },},
  { kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension27, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27)) },},
  { kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension28, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28)) },},
  { kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension29, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29)) },},
  { kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension30, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension31, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31)) },},
  { kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension33, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33)) },},
  { kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension34, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34)) },},
  { kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension36, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36)) },},
  { kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37)) },},
  { kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension38, 1, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38)) },},
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension39, 1, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39)) },},
};
const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_XC_conv2d_v2, 150, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_UNPACK, 0, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_XC_conv2d_v2, 142, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_XC_conv2d_v2, 142, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_SPLIT, 0, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_ADD, 0, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_XC_lookup, 0, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_MUL, 0, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_RESHAPE, 0, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, 0, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_RESHAPE, 0, },
};

// Scratch buffer variables
int scratch_buffer_idx = 0;
const int scratch_buffer_offsets[3] = { 0, 0, 0 };
tflite::MicroContext mc;

// Xcore context and thread variables
xc_context_config_t xc_config;
constexpr int kStackWordsPerThread = 256;
uint64_t xc_stack[kStackWordsPerThread/2];

// Functions to be used as function pointers for TfLiteContext and MicroContext 
static void* AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes) {
  static uint8_t *AllocPtr = tensor_arena + sizeof(tensor_arena);

  AllocPtr -= bytes;
  return AllocPtr;
}

static TfLiteEvalTensor *GetEvalTensor(const struct TfLiteContext *context,
                                       int tensor_idx) {
  return &evalTensors[tensor_idx];
}

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext *context, size_t bytes,
                                       int *buffer_idx) {
  *buffer_idx = scratch_buffer_idx++;
  return kTfLiteOk;
};

static void *GetScratchBuffer(struct TfLiteContext *context,
                                       int buffer_idx) {
  return tensor_arena + scratch_buffer_offsets[buffer_idx];
}

static TfLiteTensor* AllocateTempInputTensor(const TfLiteNode* node, int index) {
      return &ctx.tensors[node->inputs->data[index]];
}

static TfLiteTensor* AllocateTempOutputTensor(const TfLiteNode* node, int index) {
      return &ctx.tensors[node->outputs->data[index]];
}

static void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
}

static void* external_context() {
  return &xc_config;
}

} // namespace

TfLiteStatus model_init(void *flash_data) {
  // Set flash data in xcore context config
  xc_config.flash_data = flash_data;

  // Setup microcontext functions
  mc.AllocateTempInputTensor = &AllocateTempInputTensor;
  mc.AllocateTempOutputTensor = &AllocateTempOutputTensor;
  mc.DeallocateTempTfLiteTensor = &DeallocateTempTfLiteTensor;
  mc.external_context = &external_context;

  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  
  // Set microcontext as the context ptr
  ctx.impl_ = (void*)&mc;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 40;
  for(size_t i = 0; i < 40; ++i) {
    tflTensors[i].data.data = tensorData[i].data;
    evalTensors[i].data.data = tensorData[i].data;
    tflTensors[i].type = tensorData[i].type;
    evalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    evalTensors[i].dims = tensorData[i].dims;
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
  }
  registrations[OP_XC_conv2d_v2] = *(tflite::ops::micro::xcore::Register_XC_conv2d_v2());
  registrations[OP_UNPACK] = tflite::ops::micro::Register_UNPACK();
  registrations[OP_ADD] = tflite::Register_ADD();
  registrations[OP_SPLIT] = tflite::ops::micro::Register_SPLIT();
  registrations[OP_XC_lookup] = *(tflite::ops::micro::xcore::Register_XC_lookup());
  registrations[OP_MUL] = tflite::Register_MUL();
  registrations[OP_RESHAPE] = tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = tflite::Register_CONV_2D();

  for(size_t i = 0; i < 19; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, nodeData[i].custom_initial_data_size);
    }
  }
  for(size_t i = 0; i < 19; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 1, 2, 
};
TfLiteTensor* model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  34, 32, 39, 
};
TfLiteTensor* model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus model_invoke() {
  thread_init_1(&xc_config.thread_info);
  xc_config.thread_info.nstackwords = kStackWordsPerThread;
  xc_config.thread_info.stacks = &xc_stack[kStackWordsPerThread/2 - 1];
  for(size_t i = 0; i < 19; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      thread_destroy(&xc_config.thread_info);
      return status;
    }
  }
  thread_destroy(&xc_config.thread_info);
  return kTfLiteOk;
}
